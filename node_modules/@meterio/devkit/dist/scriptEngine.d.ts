/// <reference types="node" />
import { RLP } from './rlp';
export declare namespace ScriptEngine {
    const SCRIPT_ENGINE_PREFIX: Buffer;
    const SCRIPT_ENGINE_VERSION = 0;
    const SCRIPT_DATA_PREFIX: Buffer;
    const STAKING_VERSION = 0;
    const AUCTION_VERSION = 0;
    const EMPTY_ADDRESS = "0x0000000000000000000000000000000000000000";
    const EMPTY_BYTE32 = "0x0000000000000000000000000000000000000000000000000000000000000000";
    enum ModuleID {
        Staking = 1000,
        Auction = 1001,
        AccountLock = 1002
    }
    enum Token {
        Meter = 0,
        MeterGov = 1
    }
    enum StakingOpCode {
        Bound = 1,
        Unbound = 2,
        Candidate = 3,
        Uncandidate = 4,
        Delegate = 5,
        Undelegate = 6,
        CandidateUpdate = 7,
        BucketUpdate = 8,
        DelegateStats = 101,
        BailOut = 102,
        FlushAllStats = 103,
        Governing = 10001
    }
    const explainStakingOpCode: (opCode: StakingOpCode) => "staking bound" | "staking unbound" | "staking candidate" | "staking uncandidate" | "staking delegate" | "staking undelegate" | "staking candidate update" | "staking bucket update" | "staking delegate stats" | "staking bailout" | "staking clean stats" | "staking governing";
    enum StakingOption {
        Empty = 0,
        OneWeekLock = 1,
        TwoWeekLock = 2,
        ThreeWeekLock = 3,
        FourWeekLock = 4
    }
    enum AuctionOpCode {
        Start = 1,
        End = 2,
        Bid = 3
    }
    enum AuctionOption {
        Userbid = 0,
        Autobid = 1
    }
    const explainAuctionOpCode: (opCode: AuctionOpCode, option: AuctionOption) => "auction start" | "auction end" | "auction userbid" | "auction autobid" | "auction bid";
    enum AccountLockOpCode {
        Add = 1,
        Remove = 2,
        Transfer = 3,
        Governing = 4
    }
    const explainAccountLockOpCode: (opCode: AccountLockOpCode) => "account lock add" | "account lock remove" | "account lock transfer" | "account lock governing";
    function IsScriptEngineData(hexStr: string): boolean;
    function encodeScriptData(moduleID: ModuleID, body: StakingBody | AuctionBody): Buffer;
    function decodeScriptData(input: Buffer | string): ScriptData;
    function decodeStakingBody(input: Buffer | string): StakingBody;
    function decodeAuctionBody(input: Buffer | string): AuctionBody;
    function decodeAccountLockBody(input: Buffer | string): AccountLockBody;
    function decodeStakingGoverningExtra(input: Buffer | string): RewardInfo[];
    function getAuctionTxFromAuctionBody(body: AuctionBody): AuctionTx | undefined;
    const ScriptDataProfile: RLP.Profile;
    class ScriptDataHeader {
        version: number;
        modId: number;
        constructor(version: number, modId: number);
    }
    class ScriptData {
        header: ScriptDataHeader;
        payload: Buffer;
        constructor(modId: number, payload: Buffer);
        encode(): Buffer;
    }
    const StakingGoverningExtraProfile: RLP.Profile;
    class RewardInfo {
        address: Buffer;
        amount: string;
        constructor(address: Buffer, amount: string);
    }
    const StakingBodyProfile: RLP.Profile;
    const BucketIDProfile: RLP.Profile;
    class StakingBody {
        opCode: StakingOpCode;
        version: number;
        option: number;
        holderAddr: Buffer;
        candidateAddr: Buffer;
        candidateName: Buffer;
        candidateDescription: Buffer;
        candidatePubKey: Buffer;
        candidateIP: Buffer;
        candidatePort: number;
        bucketID: Buffer;
        amount: string;
        token: Token;
        autobid: number;
        timestamp: number;
        nonce: number;
        extra: Buffer;
        constructor(op: StakingOpCode, option: number, holderAddr: string, candidateAddr: string, candidateName: string, candidateDescription: string, candidatePubKey: string, candidateIP: string, candidatePort: number, bucketID: string, amount: string | number, token: Token, autobid: number, timestamp?: number, nonce?: number);
        encode(): Buffer;
    }
    function jsonFromStakingBody(sb: StakingBody): any;
    function getBoundData(option: number, holderAddr: string, candidateAddr: string, amount: number | string, timestamp?: number, nonce?: number, autobid?: number): Buffer;
    function getUnboundData(holderAddr: string, stakingIDStr: string, amount: number | string, timestamp?: number, nonce?: number): Buffer;
    function getBucketUpdateData(holderAddr: string, bucketID: string, amount: number | string, timestamp?: number, nonce?: number): Buffer;
    function getCandidateData(holderAddr: string, candidateName: string, candidateDescription: string, candidatePubKey: string, candidateIP: string, candidatePort: number, amount: number | string, commission: number, timestamp?: number, nonce?: number, autobid?: number): Buffer;
    function getUncandidateData(candidateAddr: string, timestamp?: number, nonce?: number): Buffer;
    function getDelegateData(holderAddr: string, candidateAddr: string, bucketID: string, amount: string | number, timestamp?: number, nonce?: number, autobid?: number): Buffer;
    function getUndelegateData(holderAddr: string, stakingIDStr: string, amount: number | string, timestamp?: number, nonce?: number): Buffer;
    function getCandidateUpdateData(holderAddr: string, candidateName: string, candidateDescription: string, candidatePubKey: string, candidateIP: string, candidatePort: number, commission: number, timestamp?: number, nonce?: number, autobid?: number): Buffer;
    function getBailOutData(holderAddr: string, timestamp?: number, nonce?: number): Buffer;
    const AuctionControlBlockProfile: RLP.Profile;
    class AuctionControlBlock {
        startHeight: number;
        startEpoch: number;
        endHeight: number;
        endEpoch: number;
        rlsdMTRG: string;
        rsvdMTRG: string;
        rsvdPrice: string;
        createTime: number;
        constructor(startHeight: number, startEpoch: number, endHeight: number, endEpoch: number, rlsdMTRG: string | number, rsvdMTRG: string | number, rsvdPrice: string | number, createTime: number);
        ID(): string;
    }
    const AuctionTxProfile: RLP.Profile;
    class AuctionTx {
        address: Buffer;
        amount: string;
        type: number;
        timestamp: number;
        nonce: string;
        constructor(address: string, amount: string | number, type: number, timestamp: number, nonce: string | number);
        ID(): string;
    }
    const AuctionBodyProfile: RLP.Profile;
    class AuctionBody {
        opCode: AuctionOpCode;
        version: number;
        option: AuctionOption;
        startHeight: number;
        startEpoch: number;
        endHeight: number;
        endEpoch: number;
        sequence: number;
        auctionID: Buffer;
        bidder: Buffer;
        amount: string;
        reserveAmount: string;
        token: Token;
        timestamp: number;
        nonce: number;
        constructor(opCode: AuctionOpCode, option: number, auctionID: string, bidder: string, amount: string | number, timestamp?: number, nonce?: number);
        encode(): Buffer;
    }
    function jsonFromAuctionBody(ab: AuctionBody): object;
    function getBidData(bidder: string, amount: number | string, timestamp?: number, nonce?: number): Buffer;
    const AccountLockBodyProfile: RLP.Profile;
    class AccountLockBody {
        opCode: AccountLockOpCode;
        version: number;
        option: number;
        lockEpoch: number;
        releaseEpoch: number;
        fromAddr: Buffer;
        toAddr: Buffer;
        meterAmount: string;
        meterGovAmount: string;
        memo: Buffer;
        constructor(op: AccountLockOpCode, lockEpoch: number, releaseEpoch: number, fromAddr: string, toAddr: string, meterAmount: number | string, meterGovAmount: number | string, memo: string);
        encode(): Buffer;
    }
    function jsonFromAccountLockBody(alb: AccountLockBody): object;
    function getLockedTransferData(lockEpoch: number, releaseEpoch: number, fromAddr: string, toAddr: string, meterAmount: number | string, meterGovAmount: number | string, memo: string): Buffer;
    function getBucketID(owner: Buffer, nonce: number, timestamp: number): string;
}
