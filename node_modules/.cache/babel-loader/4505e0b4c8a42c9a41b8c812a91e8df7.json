{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.timeout = exports.concurrentValuesMap = exports.concurrentMap = exports.retryAsyncWithBackOffAndTimeout = exports.selectiveRetryAsyncWithBackOff = exports.retryAsyncWithBackOff = exports.retryAsync = exports.sleep = void 0;\nvar TAG = 'utils/src/async';\n/** Sleep for a number of milliseconds */\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, ms);\n  });\n}\n\nexports.sleep = sleep; // Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\n\nvar retryAsync = function (inFunction, tries, params, delay, logger) {\n  if (delay === void 0) {\n    delay = 100;\n  }\n\n  if (logger === void 0) {\n    logger = null;\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var saveError, i, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < tries)) return [3\n          /*break*/\n          , 7];\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 4,, 6]);\n\n          return [4\n          /*yield*/\n          , inFunction.apply(void 0, params)];\n\n        case 3:\n          // it awaits otherwise it'd always do all the retries\n          return [2\n          /*return*/\n          , _a.sent()];\n\n        case 4:\n          error_1 = _a.sent();\n          return [4\n          /*yield*/\n          , sleep(delay)];\n\n        case 5:\n          _a.sent();\n\n          saveError = error_1;\n\n          if (logger) {\n            logger(TAG + \"/@retryAsync, Failed to execute function on try #\" + i + \":\", error_1);\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 6:\n          i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 7:\n          throw saveError;\n      }\n    });\n  });\n};\n\nexports.retryAsync = retryAsync; // Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\n\nvar retryAsyncWithBackOff = function (inFunction, tries, params, delay, factor, logger) {\n  if (delay === void 0) {\n    delay = 100;\n  }\n\n  if (factor === void 0) {\n    factor = 1.5;\n  }\n\n  if (logger === void 0) {\n    logger = null;\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var saveError, i, error_2;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < tries)) return [3\n          /*break*/\n          , 7];\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 4,, 6]);\n\n          return [4\n          /*yield*/\n          , inFunction.apply(void 0, params)];\n\n        case 3:\n          // it awaits otherwise it'd always do all the retries\n          return [2\n          /*return*/\n          , _a.sent()];\n\n        case 4:\n          error_2 = _a.sent();\n          return [4\n          /*yield*/\n          , sleep(Math.pow(factor, i) * delay)];\n\n        case 5:\n          _a.sent();\n\n          saveError = error_2;\n\n          if (logger) {\n            logger(TAG + \"/@retryAsync, Failed to execute function on try #\" + i, error_2);\n          }\n\n          return [3\n          /*break*/\n          , 6];\n\n        case 6:\n          i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 7:\n          throw saveError;\n      }\n    });\n  });\n};\n\nexports.retryAsyncWithBackOff = retryAsyncWithBackOff; // Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\n// throws automatically on specified errors\n\nvar selectiveRetryAsyncWithBackOff = function (inFunction, tries, dontRetry, params, delay, factor, logger) {\n  if (delay === void 0) {\n    delay = 100;\n  }\n\n  if (factor === void 0) {\n    factor = 1.5;\n  }\n\n  if (logger === void 0) {\n    logger = null;\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    var saveError, i, error_3;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < tries)) return [3\n          /*break*/\n          , 8];\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2, 4,, 5]);\n\n          return [4\n          /*yield*/\n          , inFunction.apply(void 0, params)];\n\n        case 3:\n          // it awaits otherwise it'd always do all the retries\n          return [2\n          /*return*/\n          , _a.sent()];\n\n        case 4:\n          error_3 = _a.sent();\n\n          if (dontRetry.some(function (msg) {\n            return error_3.message.includes(msg);\n          })) {\n            throw error_3;\n          }\n\n          saveError = error_3;\n\n          if (logger) {\n            logger(TAG + \"/@retryAsync, Failed to execute function on try #\" + i, error_3);\n          }\n\n          return [3\n          /*break*/\n          , 5];\n\n        case 5:\n          if (!(i < tries - 1)) return [3\n          /*break*/\n          , 7];\n          return [4\n          /*yield*/\n          , sleep(Math.pow(factor, i) * delay)];\n\n        case 6:\n          _a.sent();\n\n          _a.label = 7;\n\n        case 7:\n          i++;\n          return [3\n          /*break*/\n          , 1];\n\n        case 8:\n          throw saveError;\n      }\n    });\n  });\n};\n\nexports.selectiveRetryAsyncWithBackOff = selectiveRetryAsyncWithBackOff; // Retries an async function when it raises an exeption\n// Terminates any ongoing request when the timeout is reached\n// if all the tries fail it raises the last thrown exeption\n\nvar retryAsyncWithBackOffAndTimeout = function (inFunction, tries, params, delayMs, factor, timeoutMs, logger) {\n  if (delayMs === void 0) {\n    delayMs = 100;\n  }\n\n  if (factor === void 0) {\n    factor = 1.5;\n  }\n\n  if (timeoutMs === void 0) {\n    timeoutMs = 2000;\n  }\n\n  if (logger === void 0) {\n    logger = null;\n  }\n\n  return __awaiter(void 0, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2\n      /*return*/\n      , (0, exports.timeout)(exports.retryAsyncWithBackOff, [inFunction, tries, params, delayMs, factor, logger], timeoutMs, new Error(\"Timed out after \" + timeoutMs + \"ms\"), TAG + \"/@retryAsyncWithBackOffAndTimeout, Timed out after \" + timeoutMs + \"ms\", logger)];\n    });\n  });\n};\n\nexports.retryAsyncWithBackOffAndTimeout = retryAsyncWithBackOffAndTimeout;\n/**\n * Map an async function over a list xs with a given concurrency level\n *\n * @param concurrency number of `mapFn` concurrent executions\n * @param xs list of value\n * @param mapFn mapping function\n */\n\nfunction concurrentMap(concurrency, xs, mapFn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var res, _loop_1, i;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          res = [];\n\n          _loop_1 = function (i) {\n            var remaining, sliceSize, slice, _b, _c;\n\n            return __generator(this, function (_d) {\n              switch (_d.label) {\n                case 0:\n                  remaining = xs.length - i;\n                  sliceSize = Math.min(remaining, concurrency);\n                  slice = xs.slice(i, i + sliceSize);\n                  _c = (_b = res).concat;\n                  return [4\n                  /*yield*/\n                  , Promise.all(slice.map(function (elem, index) {\n                    return mapFn(elem, i + index);\n                  }))];\n\n                case 1:\n                  res = _c.apply(_b, [_d.sent()]);\n                  return [2\n                  /*return*/\n                  ];\n              }\n            });\n          };\n\n          i = 0;\n          _a.label = 1;\n\n        case 1:\n          if (!(i < xs.length)) return [3\n          /*break*/\n          , 4];\n          return [5\n          /*yield**/\n          , _loop_1(i)];\n\n        case 2:\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          i += concurrency;\n          return [3\n          /*break*/\n          , 1];\n\n        case 4:\n          return [2\n          /*return*/\n          , res];\n      }\n    });\n  });\n}\n\nexports.concurrentMap = concurrentMap;\n/**\n * Map an async function over the values in Object x with a given concurrency level\n *\n * @param concurrency number of `mapFn` concurrent executions\n * @param x associative array of values\n * @param mapFn mapping function\n */\n\nfunction concurrentValuesMap(concurrency, x, mapFn) {\n  return __awaiter(this, void 0, void 0, function () {\n    var xk, xv, res;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          xk = Object.keys(x);\n          xv = [];\n          xk.forEach(function (k) {\n            return xv.push(x[k]);\n          });\n          return [4\n          /*yield*/\n          , concurrentMap(concurrency, xv, function (val, idx) {\n            return mapFn(val, xk[idx]);\n          })];\n\n        case 1:\n          res = _a.sent();\n          return [2\n          /*return*/\n          , res.reduce(function (output, value, index) {\n            output[xk[index]] = value;\n            return output;\n          }, {})];\n      }\n    });\n  });\n}\n\nexports.concurrentValuesMap = concurrentValuesMap;\n/**\n * Wraps an async function in a timeout before calling it.\n *\n * @param inFunction The async function to call\n * @param params The parameters of the async function\n * @param timeoutMs The timeout in milliseconds\n * @param timeoutError The value to which the returned Promise should reject to\n */\n\nvar timeout = function (inFunction, params, timeoutMs, timeoutError, timeoutLogMsg, logger) {\n  if (timeoutLogMsg === void 0) {\n    timeoutLogMsg = null;\n  }\n\n  if (logger === void 0) {\n    logger = null;\n  }\n\n  var timer;\n  return Promise.race([inFunction.apply(void 0, params), new Promise(function (_resolve, reject) {\n    timer = setTimeout(function () {\n      if (logger) {\n        logger(timeoutLogMsg || TAG + \"/@timeout Timed out after \" + timeoutMs + \"ms\");\n      }\n\n      reject(timeoutError);\n    }, timeoutMs);\n  })]).finally(function () {\n    clearTimeout(timer);\n  });\n};\n\nexports.timeout = timeout;","map":{"version":3,"sources":["../src/async.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.timeout = exports.concurrentValuesMap = exports.concurrentMap = exports.retryAsyncWithBackOffAndTimeout = exports.selectiveRetryAsyncWithBackOff = exports.retryAsyncWithBackOff = exports.retryAsync = exports.sleep = void 0;\nvar TAG = 'utils/src/async';\n/** Sleep for a number of milliseconds */\nfunction sleep(ms) {\n    return new Promise(function (resolve) { return setTimeout(resolve, ms); });\n}\nexports.sleep = sleep;\n// Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\nvar retryAsync = function (inFunction, tries, params, delay, logger) {\n    if (delay === void 0) { delay = 100; }\n    if (logger === void 0) { logger = null; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        var saveError, i, error_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    i = 0;\n                    _a.label = 1;\n                case 1:\n                    if (!(i < tries)) return [3 /*break*/, 7];\n                    _a.label = 2;\n                case 2:\n                    _a.trys.push([2, 4, , 6]);\n                    return [4 /*yield*/, inFunction.apply(void 0, params)];\n                case 3: \n                // it awaits otherwise it'd always do all the retries\n                return [2 /*return*/, _a.sent()];\n                case 4:\n                    error_1 = _a.sent();\n                    return [4 /*yield*/, sleep(delay)];\n                case 5:\n                    _a.sent();\n                    saveError = error_1;\n                    if (logger) {\n                        logger(TAG + \"/@retryAsync, Failed to execute function on try #\" + i + \":\", error_1);\n                    }\n                    return [3 /*break*/, 6];\n                case 6:\n                    i++;\n                    return [3 /*break*/, 1];\n                case 7: throw saveError;\n            }\n        });\n    });\n};\nexports.retryAsync = retryAsync;\n// Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\nvar retryAsyncWithBackOff = function (inFunction, tries, params, delay, factor, logger) {\n    if (delay === void 0) { delay = 100; }\n    if (factor === void 0) { factor = 1.5; }\n    if (logger === void 0) { logger = null; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        var saveError, i, error_2;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    i = 0;\n                    _a.label = 1;\n                case 1:\n                    if (!(i < tries)) return [3 /*break*/, 7];\n                    _a.label = 2;\n                case 2:\n                    _a.trys.push([2, 4, , 6]);\n                    return [4 /*yield*/, inFunction.apply(void 0, params)];\n                case 3: \n                // it awaits otherwise it'd always do all the retries\n                return [2 /*return*/, _a.sent()];\n                case 4:\n                    error_2 = _a.sent();\n                    return [4 /*yield*/, sleep(Math.pow(factor, i) * delay)];\n                case 5:\n                    _a.sent();\n                    saveError = error_2;\n                    if (logger) {\n                        logger(TAG + \"/@retryAsync, Failed to execute function on try #\" + i, error_2);\n                    }\n                    return [3 /*break*/, 6];\n                case 6:\n                    i++;\n                    return [3 /*break*/, 1];\n                case 7: throw saveError;\n            }\n        });\n    });\n};\nexports.retryAsyncWithBackOff = retryAsyncWithBackOff;\n// Retries an async function when it raises an exeption\n// if all the tries fail it raises the last thrown exeption\n// throws automatically on specified errors\nvar selectiveRetryAsyncWithBackOff = function (inFunction, tries, dontRetry, params, delay, factor, logger) {\n    if (delay === void 0) { delay = 100; }\n    if (factor === void 0) { factor = 1.5; }\n    if (logger === void 0) { logger = null; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        var saveError, i, error_3;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    i = 0;\n                    _a.label = 1;\n                case 1:\n                    if (!(i < tries)) return [3 /*break*/, 8];\n                    _a.label = 2;\n                case 2:\n                    _a.trys.push([2, 4, , 5]);\n                    return [4 /*yield*/, inFunction.apply(void 0, params)];\n                case 3: \n                // it awaits otherwise it'd always do all the retries\n                return [2 /*return*/, _a.sent()];\n                case 4:\n                    error_3 = _a.sent();\n                    if (dontRetry.some(function (msg) { return error_3.message.includes(msg); })) {\n                        throw error_3;\n                    }\n                    saveError = error_3;\n                    if (logger) {\n                        logger(TAG + \"/@retryAsync, Failed to execute function on try #\" + i, error_3);\n                    }\n                    return [3 /*break*/, 5];\n                case 5:\n                    if (!(i < tries - 1)) return [3 /*break*/, 7];\n                    return [4 /*yield*/, sleep(Math.pow(factor, i) * delay)];\n                case 6:\n                    _a.sent();\n                    _a.label = 7;\n                case 7:\n                    i++;\n                    return [3 /*break*/, 1];\n                case 8: throw saveError;\n            }\n        });\n    });\n};\nexports.selectiveRetryAsyncWithBackOff = selectiveRetryAsyncWithBackOff;\n// Retries an async function when it raises an exeption\n// Terminates any ongoing request when the timeout is reached\n// if all the tries fail it raises the last thrown exeption\nvar retryAsyncWithBackOffAndTimeout = function (inFunction, tries, params, delayMs, factor, timeoutMs, logger) {\n    if (delayMs === void 0) { delayMs = 100; }\n    if (factor === void 0) { factor = 1.5; }\n    if (timeoutMs === void 0) { timeoutMs = 2000; }\n    if (logger === void 0) { logger = null; }\n    return __awaiter(void 0, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            return [2 /*return*/, (0, exports.timeout)(exports.retryAsyncWithBackOff, [inFunction, tries, params, delayMs, factor, logger], timeoutMs, new Error(\"Timed out after \" + timeoutMs + \"ms\"), TAG + \"/@retryAsyncWithBackOffAndTimeout, Timed out after \" + timeoutMs + \"ms\", logger)];\n        });\n    });\n};\nexports.retryAsyncWithBackOffAndTimeout = retryAsyncWithBackOffAndTimeout;\n/**\n * Map an async function over a list xs with a given concurrency level\n *\n * @param concurrency number of `mapFn` concurrent executions\n * @param xs list of value\n * @param mapFn mapping function\n */\nfunction concurrentMap(concurrency, xs, mapFn) {\n    return __awaiter(this, void 0, void 0, function () {\n        var res, _loop_1, i;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    res = [];\n                    _loop_1 = function (i) {\n                        var remaining, sliceSize, slice, _b, _c;\n                        return __generator(this, function (_d) {\n                            switch (_d.label) {\n                                case 0:\n                                    remaining = xs.length - i;\n                                    sliceSize = Math.min(remaining, concurrency);\n                                    slice = xs.slice(i, i + sliceSize);\n                                    _c = (_b = res).concat;\n                                    return [4 /*yield*/, Promise.all(slice.map(function (elem, index) { return mapFn(elem, i + index); }))];\n                                case 1:\n                                    res = _c.apply(_b, [_d.sent()]);\n                                    return [2 /*return*/];\n                            }\n                        });\n                    };\n                    i = 0;\n                    _a.label = 1;\n                case 1:\n                    if (!(i < xs.length)) return [3 /*break*/, 4];\n                    return [5 /*yield**/, _loop_1(i)];\n                case 2:\n                    _a.sent();\n                    _a.label = 3;\n                case 3:\n                    i += concurrency;\n                    return [3 /*break*/, 1];\n                case 4: return [2 /*return*/, res];\n            }\n        });\n    });\n}\nexports.concurrentMap = concurrentMap;\n/**\n * Map an async function over the values in Object x with a given concurrency level\n *\n * @param concurrency number of `mapFn` concurrent executions\n * @param x associative array of values\n * @param mapFn mapping function\n */\nfunction concurrentValuesMap(concurrency, x, mapFn) {\n    return __awaiter(this, void 0, void 0, function () {\n        var xk, xv, res;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    xk = Object.keys(x);\n                    xv = [];\n                    xk.forEach(function (k) { return xv.push(x[k]); });\n                    return [4 /*yield*/, concurrentMap(concurrency, xv, function (val, idx) { return mapFn(val, xk[idx]); })];\n                case 1:\n                    res = _a.sent();\n                    return [2 /*return*/, res.reduce(function (output, value, index) {\n                            output[xk[index]] = value;\n                            return output;\n                        }, {})];\n            }\n        });\n    });\n}\nexports.concurrentValuesMap = concurrentValuesMap;\n/**\n * Wraps an async function in a timeout before calling it.\n *\n * @param inFunction The async function to call\n * @param params The parameters of the async function\n * @param timeoutMs The timeout in milliseconds\n * @param timeoutError The value to which the returned Promise should reject to\n */\nvar timeout = function (inFunction, params, timeoutMs, timeoutError, timeoutLogMsg, logger) {\n    if (timeoutLogMsg === void 0) { timeoutLogMsg = null; }\n    if (logger === void 0) { logger = null; }\n    var timer;\n    return Promise.race([\n        inFunction.apply(void 0, params),\n        new Promise(function (_resolve, reject) {\n            timer = setTimeout(function () {\n                if (logger) {\n                    logger(timeoutLogMsg || TAG + \"/@timeout Timed out after \" + timeoutMs + \"ms\");\n                }\n                reject(timeoutError);\n            }, timeoutMs);\n        }),\n    ]).finally(function () {\n        clearTimeout(timer);\n    });\n};\nexports.timeout = timeout;\n//# sourceMappingURL=async.js.map"]},"metadata":{},"sourceType":"script"}