{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/BloxEscape/Screen.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Bird from './components/Bird';\nimport Obstacles from './components/Obstacles';\nimport './App.css'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useWindowSize() {\n  _s();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\n_s(useWindowSize, \"WMqaMVAPr0u8CJVTsAIdEuYrbbM=\");\n\nconst Screen = props => {\n  _s2();\n\n  const {\n    width,\n    height\n  } = useWindowSize();\n  console.log(useWindowSize().width, \"width\");\n  console.log(useWindowSize().height, \"width\");\n  console.log(height, \"height\");\n  const screenWidth = useWindowSize().width;\n  const screenHeight = useWindowSize().height;\n  const birdLeft = screenWidth / 2;\n  const [birdBottom, setBirdBottom] = useState(height / 2);\n  console.log(birdBottom, \"birdBottom\");\n  const [obstaclesLeft, setObstaclesLeft] = useState(screenWidth);\n  const [obstaclesLeftTwo, setObstaclesLeftTwo] = useState(screenWidth + screenWidth / 2 + 30);\n  const [obstaclesNegHeight, setObstaclesNegHeight] = useState(0);\n  const [obstaclesNegHeightTwo, setObstaclesNegHeightTwo] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const gravity = 3;\n  let obstacleWidth = 60;\n  let obstacleHeight = 300;\n  let gap = 200;\n  let gameTimerId;\n  let obstaclesTimerId;\n  let obstaclesTimerIdTwo; // //start bird falling\n  //   useEffect(() => {\n  //     if (birdBottom > 0) {\n  //       gameTimerId = setInterval(() => {\n  //         setBirdBottom(birdBottom => birdBottom - gravity)\n  //       },30)\n  //\n  //       return () => {\n  //         clearInterval(gameTimerId)\n  //       }\n  //     }\n  //     //if i dont have birdBottom as a dependecy, it wont stop\n  //   }, [birdBottom])\n  //   console.log(birdBottom)\n  // const jump = () => {\n  //   if (!isGameOver && (birdBottom < screenHeight)) {\n  //     setBirdBottom(birdBottom => birdBottom + 50)\n  //     console.log('jumped')\n  //   }\n  // }\n  // //start first obstacle\n  // useEffect(() => {\n  //   if (obstaclesLeft > -60) {\n  //     obstaclesTimerId = setInterval(() => {\n  //       setObstaclesLeft(obstaclesLeft => obstaclesLeft - 5)\n  //     }, 30)\n  //     return () => {\n  //       clearInterval(obstaclesTimerId)\n  //     }\n  //   } else {\n  //     setScore(score => score +1)\n  //     setObstaclesLeft(screenWidth)\n  //     setObstaclesNegHeight( - Math.random() * 100)\n  //   }\n  // }, [obstaclesLeft])\n  // //start second obstacle\n  // useEffect(() => {\n  //   if (obstaclesLeftTwo > -60) {\n  //     obstaclesTimerIdTwo = setInterval(() => {\n  //       setObstaclesLeftTwo(obstaclesLeftTwo => obstaclesLeftTwo - 5)\n  //     }, 30)\n  //       return () => {\n  //         clearInterval(obstaclesTimerIdTwo)\n  //       }\n  //     } else {\n  //         setScore(score => score +1)\n  //         setObstaclesLeftTwo(screenWidth)\n  //         setObstaclesNegHeightTwo( - Math.random() * 100)\n  //       }\n  // }, [obstaclesLeftTwo])\n  // //check for collisions\n  // useEffect(() => {\n  //   console.log(obstaclesLeft)\n  //   console.log(screenWidth/2)\n  //   console.log(obstaclesLeft > screenWidth/2)\n  //   if (\n  //     ((birdBottom < (obstaclesNegHeight + obstacleHeight + 30) ||\n  //     birdBottom > (obstaclesNegHeight + obstacleHeight + gap -30)) &&\n  //     (obstaclesLeft > screenWidth/2 -30 && obstaclesLeft < screenWidth/2 + 30 )\n  //     )\n  //     ||\n  //     ((birdBottom < (obstaclesNegHeightTwo + obstacleHeight + 30) ||\n  //     birdBottom > (obstaclesNegHeightTwo + obstacleHeight + gap -30)) &&\n  //     (obstaclesLeftTwo > screenWidth/2 -30 && obstaclesLeftTwo < screenWidth/2 + 30 )\n  //     )\n  //     )\n  //     {\n  //     console.log('game over')\n  //     gameOver()\n  //   }\n  // })\n  // const gameOver = () => {\n  //   clearInterval(gameTimerId)\n  //   clearInterval(obstaclesTimerId)\n  //   clearInterval(obstaclesTimerIdTwo)\n  //   setIsGameOver(true)\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '30px'\n        },\n        children: score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Bird, {\n        birdBottom: birdBottom,\n        birdLeft: birdLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Screen, \"G7sC2J61WJ2NjaDLXb52++0hc50=\", false, function () {\n  return [useWindowSize, useWindowSize, useWindowSize, useWindowSize, useWindowSize];\n});\n\n_c = Screen;\nexport default Screen;\n\nvar _c;\n\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/BloxEscape/Screen.js"],"names":["React","useEffect","useState","Bird","Obstacles","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Screen","props","console","log","screenWidth","screenHeight","birdLeft","birdBottom","setBirdBottom","obstaclesLeft","setObstaclesLeft","obstaclesLeftTwo","setObstaclesLeftTwo","obstaclesNegHeight","setObstaclesNegHeight","obstaclesNegHeightTwo","setObstaclesNegHeightTwo","isGameOver","setIsGameOver","score","setScore","gravity","obstacleWidth","obstacleHeight","gap","gameTimerId","obstaclesTimerId","obstaclesTimerIdTwo","fontSize"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react';\nimport Bird from './components/Bird'\nimport Obstacles from './components/Obstacles'\nimport './App.css';\n\n// Hook\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\n\nconst Screen = (props) =>{\n  const { width, height } = useWindowSize();\nconsole.log(useWindowSize().width,\"width\")\nconsole.log(useWindowSize().height,\"width\")\n\nconsole.log(height,\"height\")\n\n  const screenWidth = useWindowSize().width;\n  const screenHeight = useWindowSize().height;\n  const birdLeft = screenWidth / 2\n  const [birdBottom, setBirdBottom]= useState(height / 2)\n\n  console.log(birdBottom,\"birdBottom\")\n  const [obstaclesLeft, setObstaclesLeft]= useState(screenWidth)\n  const [obstaclesLeftTwo, setObstaclesLeftTwo]= useState(screenWidth + screenWidth/2 + 30)\n  const [obstaclesNegHeight, setObstaclesNegHeight]= useState(0)\n  const [obstaclesNegHeightTwo, setObstaclesNegHeightTwo]= useState(0)\n  const [isGameOver, setIsGameOver]= useState(false)\n  const [score, setScore]= useState(0)\n  const gravity = 3\n  let obstacleWidth = 60\n  let obstacleHeight = 300\n  let gap = 200\n  let gameTimerId\n  let obstaclesTimerId\n  let obstaclesTimerIdTwo\n\n\n\n// //start bird falling\n//   useEffect(() => {\n//     if (birdBottom > 0) {\n//       gameTimerId = setInterval(() => {\n//         setBirdBottom(birdBottom => birdBottom - gravity)\n//       },30)\n//\n//       return () => {\n//         clearInterval(gameTimerId)\n//       }\n//     }\n//     //if i dont have birdBottom as a dependecy, it wont stop\n//   }, [birdBottom])\n//   console.log(birdBottom)\n\n  // const jump = () => {\n  //   if (!isGameOver && (birdBottom < screenHeight)) {\n  //     setBirdBottom(birdBottom => birdBottom + 50)\n  //     console.log('jumped')\n  //   }\n  // }\n\n  // //start first obstacle\n  // useEffect(() => {\n  //   if (obstaclesLeft > -60) {\n  //     obstaclesTimerId = setInterval(() => {\n  //       setObstaclesLeft(obstaclesLeft => obstaclesLeft - 5)\n  //     }, 30)\n  //     return () => {\n  //       clearInterval(obstaclesTimerId)\n  //     }\n  //   } else {\n  //     setScore(score => score +1)\n  //     setObstaclesLeft(screenWidth)\n  //     setObstaclesNegHeight( - Math.random() * 100)\n  //   }\n  // }, [obstaclesLeft])\n\n  // //start second obstacle\n  // useEffect(() => {\n  //   if (obstaclesLeftTwo > -60) {\n  //     obstaclesTimerIdTwo = setInterval(() => {\n  //       setObstaclesLeftTwo(obstaclesLeftTwo => obstaclesLeftTwo - 5)\n  //     }, 30)\n  //       return () => {\n  //         clearInterval(obstaclesTimerIdTwo)\n  //       }\n  //     } else {\n  //         setScore(score => score +1)\n  //         setObstaclesLeftTwo(screenWidth)\n  //         setObstaclesNegHeightTwo( - Math.random() * 100)\n  //       }\n  // }, [obstaclesLeftTwo])\n\n    // //check for collisions\n    // useEffect(() => {\n    //   console.log(obstaclesLeft)\n    //   console.log(screenWidth/2)\n    //   console.log(obstaclesLeft > screenWidth/2)\n    //   if (\n    //     ((birdBottom < (obstaclesNegHeight + obstacleHeight + 30) ||\n    //     birdBottom > (obstaclesNegHeight + obstacleHeight + gap -30)) &&\n    //     (obstaclesLeft > screenWidth/2 -30 && obstaclesLeft < screenWidth/2 + 30 )\n    //     )\n    //     ||\n    //     ((birdBottom < (obstaclesNegHeightTwo + obstacleHeight + 30) ||\n    //     birdBottom > (obstaclesNegHeightTwo + obstacleHeight + gap -30)) &&\n    //     (obstaclesLeftTwo > screenWidth/2 -30 && obstaclesLeftTwo < screenWidth/2 + 30 )\n    //     )\n    //     )\n    //     {\n    //     console.log('game over')\n    //     gameOver()\n    //   }\n    // })\n\n    // const gameOver = () => {\n    //   clearInterval(gameTimerId)\n    //   clearInterval(obstaclesTimerId)\n    //   clearInterval(obstaclesTimerIdTwo)\n    //   setIsGameOver(true)\n    // }\n\n\n  return (\n    <div >\n    <div >\n      {isGameOver && <div style={{fontSize: '30px'}}>{score}</div>}\n      <Bird\n        birdBottom = {birdBottom}\n        birdLeft = {birdLeft}\n      />\n\n\n    </div>\n    </div>\n  );\n}\n\nexport default Screen;\n"]},"metadata":{},"sourceType":"module"}