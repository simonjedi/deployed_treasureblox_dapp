"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.State = void 0;
const tslib_1 = require("tslib");
const events_1 = require("events");
const types_1 = require("@walletconnect/types");
const utils_1 = require("@walletconnect/utils");
const constants_1 = require("../constants");
const logger_1 = require("@walletconnect/logger");
class State extends types_1.IState {
    constructor(client, logger, name) {
        super(client, logger, name);
        this.client = client;
        this.logger = logger;
        this.name = name;
        this.sequences = new Map();
        this.events = new events_1.EventEmitter();
        this.cached = [];
        this.logger = logger_1.generateChildLogger(logger, this.name);
        this.registerEventListeners();
    }
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.logger.trace(`Initialized`);
            yield this.initialize();
        });
    }
    get context() {
        return logger_1.getLoggerContext(this.logger);
    }
    get length() {
        return this.sequences.size;
    }
    get topics() {
        return Array.from(this.sequences.keys());
    }
    get values() {
        return Array.from(this.sequences.values());
    }
    set(topic, sequence) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.isInitialized();
            if (this.sequences.has(topic)) {
                this.update(topic, sequence);
            }
            else {
                this.logger.debug(`Setting sequence`);
                this.logger.trace({ type: "method", method: "set", topic, sequence });
                this.sequences.set(topic, sequence);
                this.events.emit(constants_1.STATE_EVENTS.created, {
                    topic,
                    sequence,
                });
            }
        });
    }
    get(topic) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.isInitialized();
            this.logger.debug(`Getting sequence`);
            this.logger.trace({ type: "method", method: "get", topic });
            const sequence = yield this.getState(topic);
            return sequence;
        });
    }
    update(topic, update) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.isInitialized();
            this.logger.debug(`Updating sequence`);
            this.logger.trace({ type: "method", method: "update", topic, update });
            const sequence = Object.assign(Object.assign({}, (yield this.getState(topic))), update);
            this.sequences.set(topic, sequence);
            this.events.emit(constants_1.STATE_EVENTS.updated, {
                topic,
                sequence,
                update,
            });
        });
    }
    delete(topic, reason) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.isInitialized();
            if (!this.sequences.has(topic))
                return;
            this.logger.debug(`Deleting sequence`);
            this.logger.trace({ type: "method", method: "delete", topic, reason });
            const sequence = yield this.getState(topic);
            this.sequences.delete(topic);
            this.events.emit(constants_1.STATE_EVENTS.deleted, {
                topic,
                sequence,
                reason,
            });
        });
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.once(event, listener);
    }
    off(event, listener) {
        this.events.off(event, listener);
    }
    removeListener(event, listener) {
        this.events.removeListener(event, listener);
    }
    getState(topic) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.isInitialized();
            const sequence = this.sequences.get(topic);
            if (!sequence) {
                const error = utils_1.ERROR.NO_MATCHING_TOPIC.format({
                    context: utils_1.formatMessageContext(this.context),
                    topic,
                });
                this.logger.error(error.message);
                throw new Error(error.message);
            }
            return sequence;
        });
    }
    persist() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.client.storage.setSequenceState(this.context, this.values);
            this.events.emit(constants_1.STATE_EVENTS.sync);
        });
    }
    restore() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const persisted = yield this.client.storage.getSequenceState(this.context);
                if (typeof persisted === "undefined")
                    return;
                if (!persisted.length)
                    return;
                if (this.sequences.size) {
                    const error = utils_1.ERROR.RESTORE_WILL_OVERRIDE.format({
                        context: utils_1.formatMessageContext(this.context),
                    });
                    this.logger.error(error.message);
                    throw new Error(error.message);
                }
                this.cached = persisted;
                this.logger.debug(`Successfully Restored sequences for ${utils_1.formatMessageContext(this.context)}`);
                this.logger.trace({ type: "method", method: "restore", sequences: this.values });
            }
            catch (e) {
                this.logger.debug(`Failed to Restore sequences for ${utils_1.formatMessageContext(this.context)}`);
                this.logger.error(e);
            }
        });
    }
    initialize() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.restore();
            this.reset();
            this.onInit();
        });
    }
    reset() {
        this.cached.forEach(sequence => this.sequences.set(sequence.topic, sequence));
    }
    onInit() {
        this.cached = [];
        this.events.emit(constants_1.STATE_EVENTS.init);
    }
    isInitialized() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.cached.length)
                return;
            return new Promise(resolve => {
                this.events.once(constants_1.STATE_EVENTS.init, () => resolve());
            });
        });
    }
    registerEventListeners() {
        this.events.on(constants_1.STATE_EVENTS.created, (createdEvent) => {
            const eventName = constants_1.STATE_EVENTS.created;
            this.logger.info(`Emitting ${eventName}`);
            this.logger.debug({ type: "event", event: eventName, data: createdEvent });
            this.persist();
        });
        this.events.on(constants_1.STATE_EVENTS.updated, (updatedEvent) => {
            const eventName = constants_1.STATE_EVENTS.updated;
            this.logger.info(`Emitting ${eventName}`);
            this.logger.debug({ type: "event", event: eventName, data: updatedEvent });
            this.persist();
        });
        this.events.on(constants_1.STATE_EVENTS.deleted, (deletedEvent) => {
            const eventName = constants_1.STATE_EVENTS.deleted;
            this.logger.info(`Emitting ${eventName}`);
            this.logger.debug({ type: "event", event: eventName, data: deletedEvent });
            this.persist();
        });
    }
}
exports.State = State;
//# sourceMappingURL=state.js.map