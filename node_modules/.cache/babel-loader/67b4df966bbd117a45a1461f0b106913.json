{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/Connection.js\",\n    _s = $RefreshSig$();\n\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport { useWallet, UseWalletProvider, ConnectionRejectedError } from 'use-wallet';\nimport { Button } from 'react-bootstrap';\nimport MyNav from \"./MyNav\";\nimport App from \"./App\";\nimport getWeb3 from \"./getWeb3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Connection = props => {\n  _s();\n\n  const wallet = useWallet();\n  const blockNumber = wallet.getBlockNumber();\n\n  const activate = connector => wallet.connect(connector);\n\n  const [firstPartAddress, setFirstPartAddress] = useState('Connect Wallet');\n  const [secondPartAddress, setSecondPartAddress] = useState('');\n  useEffect(() => {\n    const init = async () => {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const usersAccount = accounts[0];\n      const stringOfUsersAccount = new String(usersAccount);\n      console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n\n      setFirstPartAddress(stringOfUsersAccount.slice(0, 5));\n      setSecondPartAddress('____' + stringOfUsersAccount.slice(37, 42));\n    };\n\n    init();\n  });\n\n  const connectWallet = async e => {\n    await wallet.connect();\n    const usersAccount = props.accounts;\n    const stringOfUsersAccount = new String(usersAccount);\n    console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n\n    setFirstPartAddress('Welcome');\n    setSecondPartAddress('');\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: connectWallet,\n      id: \"wallet-button\",\n      className: \"customButton enableEthereumButton\",\n      children: [firstPartAddress, secondPartAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"use-wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this), (() => {\n        var _wallet$error;\n\n        if ((_wallet$error = wallet.error) === null || _wallet$error === void 0 ? void 0 : _wallet$error.name) {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: wallet.error instanceof ConnectionRejectedError ? 'Connection error: the user rejected the activation' : wallet.error.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => wallet.reset(),\n              children: \"retry\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this);\n        }\n\n        if (wallet.status === 'connecting') {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Connecting to \", wallet.connector, \"\\u2026\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => wallet.reset(),\n              children: \"cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this);\n        }\n\n        if (wallet.status === 'connected') {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: \"Connected.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => wallet.reset(),\n              children: \"disconnect\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this);\n        }\n\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"connect\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connect-label\",\n            children: \"Connect:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"connect-buttons\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => activate('injected'),\n              children: \"injected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => activate('frame'),\n              children: \"frame\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => activate('portis'),\n              children: \"portis\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => activate('fortmatic'),\n              children: \"fortmatic\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => activate('torus'),\n              children: \"torus\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => activate('walletconnect'),\n              children: \"walletconnect\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => activate('walletlink'),\n              children: \"walletlink\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this);\n      })(), wallet.status === 'connected' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Account:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: wallet.account\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this)\n      }, void 0, false), wallet.account && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Balance:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this), wallet.status === 'connected' && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"Block:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: blockNumber || 'â€¦'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 31\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}; // Wrap everything in <UseWalletProvider />\n\n\n_s(Connection, \"xg0lUAxmWKC4h1FC8bHTNYHpH0w=\", false, function () {\n  return [useWallet];\n});\n\n_c = Connection;\nexport default (props => /*#__PURE__*/_jsxDEV(UseWalletProvider, {\n  autoConnect: true,\n  connectors: {\n    injected: {\n      //allows you to connect and switch between mainnet and rinkeby within Metamask.\n      chainId: [1, 4]\n    },\n    fortmatic: {\n      chainId: [1],\n      apiKey: ''\n    },\n    portis: {\n      dAppId: '',\n      chainId: [1]\n    },\n    walletconnect: {\n      rpc: {\n        1: 'https://mainnet.infura.io/v3/a0d8c94ba9a946daa5ee149e52fa5ff1',\n        4: 'https://rinkeby.infura.io/v3/a0d8c94ba9a946daa5ee149e52fa5ff1'\n      },\n      bridge: 'https://bridge.walletconnect.org',\n      pollingInterval: 12000\n    },\n    walletlink: {\n      chainId: [1],\n      url: 'https://mainnet.eth.aragon.network/'\n    }\n  },\n  children: /*#__PURE__*/_jsxDEV(Connection, {\n    accounts: props.accounts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 137,\n  columnNumber: 3\n}, this));\n\nvar _c;\n\n$RefreshReg$(_c, \"Connection\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/Connection.js"],"names":["React","useState","useEffect","useWallet","UseWalletProvider","ConnectionRejectedError","Button","MyNav","App","getWeb3","Connection","props","wallet","blockNumber","getBlockNumber","activate","connector","connect","firstPartAddress","setFirstPartAddress","secondPartAddress","setSecondPartAddress","init","web3","accounts","eth","getAccounts","usersAccount","stringOfUsersAccount","String","console","log","slice","connectWallet","e","window","location","reload","error","name","reset","status","account","injected","chainId","fortmatic","apiKey","portis","dAppId","walletconnect","rpc","bridge","pollingInterval","walletlink","url"],"mappings":"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","sourcesContent":["// App.js\n\nimport React, {useState, useEffect} from 'react'\nimport { useWallet, UseWalletProvider,ConnectionRejectedError } from 'use-wallet'\nimport { Button } from 'react-bootstrap';\n\nimport MyNav from \"./MyNav\";\nimport App from \"./App\";\nimport getWeb3 from \"./getWeb3\";\n\n\n\n\nconst Connection = (props) =>  {\n\n\n\n  const wallet = useWallet()\n  const blockNumber = wallet.getBlockNumber()\n  const activate = (connector) => wallet.connect(connector)\n\n  const [firstPartAddress, setFirstPartAddress] = useState('Connect Wallet');\n  const [secondPartAddress, setSecondPartAddress] = useState('');\n\n  useEffect(() => {\n\n     const init = async() => {\n       const web3 = await getWeb3();\n       const accounts = await web3.eth.getAccounts();\n       const usersAccount = accounts[0];\n       const stringOfUsersAccount = new String(usersAccount)\n       console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n       setFirstPartAddress(stringOfUsersAccount.slice(0, 5));\n       setSecondPartAddress('____'+stringOfUsersAccount.slice(37, 42));\n\n     }\n     init()\n   });\n\n  const connectWallet = async(e) => {\n    await wallet.connect()\n    const usersAccount = props.accounts;\n    const stringOfUsersAccount = new String(usersAccount)\n    console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n    setFirstPartAddress('Welcome');\n    setSecondPartAddress('');\n    window.location.reload();\n\n  }\n\n  return(\n    <div>\n      <Button onClick={connectWallet} id=\"wallet-button\" className=\"customButton enableEthereumButton\">{firstPartAddress}{secondPartAddress}</Button>\n      <>\n      <h1>use-wallet</h1>\n\n      {(() => {\n        if (wallet.error?.name) {\n          return (\n            <p>\n              <span>\n                {wallet.error instanceof ConnectionRejectedError\n                  ? 'Connection error: the user rejected the activation'\n                  : wallet.error.name}\n              </span>\n              <button onClick={() => wallet.reset()}>retry</button>\n            </p>\n          )\n        }\n\n        if (wallet.status === 'connecting') {\n          return (\n            <p>\n              <span>Connecting to {wallet.connector}â€¦</span>\n              <button onClick={() => wallet.reset()}>cancel</button>\n            </p>\n          )\n        }\n\n        if (wallet.status === 'connected') {\n          return (\n            <p>\n              <span>Connected.</span>\n              <button onClick={() => wallet.reset()}>disconnect</button>\n            </p>\n          )\n        }\n\n        return (\n          <div className=\"connect\">\n            <div className=\"connect-label\">Connect:</div>\n            <div className=\"connect-buttons\">\n              <button onClick={() => activate('injected')}>injected</button>\n              <button onClick={() => activate('frame')}>frame</button>\n              <button onClick={() => activate('portis')}>portis</button>\n              <button onClick={() => activate('fortmatic')}>fortmatic</button>\n              <button onClick={() => activate('torus')}>torus</button>\n              <button onClick={() => activate('walletconnect')}>\n                walletconnect\n              </button>\n              <button onClick={() => activate('walletlink')}>walletlink</button>\n            </div>\n          </div>\n        )\n      })()}\n\n      {wallet.status === 'connected' && (\n        <>\n          <p>\n            <span>Account:</span>\n            <span>{wallet.account}</span>\n          </p>\n        </>\n      )}\n\n      {wallet.account && (\n        <p>\n          <span>Balance:</span>\n          <span>\n\n          </span>\n        </p>\n      )}\n\n      {wallet.status === 'connected' && (\n        <p>\n          <span>Block:</span> <span>{blockNumber || 'â€¦'}</span>\n        </p>\n      )}\n    </>\n    </div>\n  )\n}\n\n// Wrap everything in <UseWalletProvider />\nexport default (props) => (\n  <UseWalletProvider\n\n  autoConnect\n  connectors={{\n    injected: {\n      //allows you to connect and switch between mainnet and rinkeby within Metamask.\n      chainId: [1, 4],\n    },\n    fortmatic: {\n      chainId: [1],\n      apiKey: '',\n    },\n    portis: {\n      dAppId: '',\n      chainId: [1],\n    },\n    walletconnect: {\n      rpc: {\n        1: 'https://mainnet.infura.io/v3/a0d8c94ba9a946daa5ee149e52fa5ff1',\n        4: 'https://rinkeby.infura.io/v3/a0d8c94ba9a946daa5ee149e52fa5ff1',\n      },\n      bridge: 'https://bridge.walletconnect.org',\n      pollingInterval: 12000,\n    },\n    walletlink: {\n      chainId: [1],\n      url: 'https://mainnet.eth.aragon.network/',\n    },\n  }}\n\n    >\n\n\n\n\n\n\n\n    <Connection accounts={props.accounts}/>\n\n\n  </UseWalletProvider>\n)\n"]},"metadata":{},"sourceType":"module"}