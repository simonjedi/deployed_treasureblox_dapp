{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extendAccounts = void 0;\n\nconst debug = require('debug')('meter:injector');\n\nconst devkit_1 = require(\"@meterio/devkit\");\n\nconst utils = require(\"../utils\");\n\nconst extendAccounts = function (web3) {\n  const web3Utils = web3.utils; // signTransaction supports both callback and promise style\n\n  web3.eth.accounts.signTransaction = function signTransaction(ethTx, privateKey, callback) {\n    debug(\"tx to sign: %O\", ethTx);\n\n    const sign = function (tx) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (!tx.chainTag) {\n          const chainTag = yield web3.eth.getChainTag();\n\n          if (chainTag) {\n            tx.chainTag = chainTag;\n          } else {\n            throw new Error(\"error getting chainTag\");\n          }\n        }\n\n        if (!tx.blockRef) {\n          const blockRef = yield web3.eth.getBlockRef();\n\n          if (blockRef) {\n            tx.blockRef = blockRef;\n          } else {\n            throw new Error(\"error getting blockRef\");\n          }\n        } // take the token type if there is \n\n\n        let token = 0;\n\n        if (tx.data && tx.data.length >= 10) {\n          if (tx.data.startsWith('0x')) {\n            // remove 0x prefix\n            tx.data = tx.data.substring(2, tx.data.length);\n          }\n\n          let tokenStr = tx.data.substring(0, 8);\n\n          if (tx.to != null && tokenStr === \"00000000\") {\n            // if tx.data startswith 00000000, this is a special prefix for token data\n            // the 5th byte will indicate whether it's a MTR (0) clause or MTRG (1) clause\n            token = Number(tx.data.substring(8, 10)) > 0 ? 1 : 0;\n            tx.data = tx.data.substring(10, tx.data.length);\n          }\n        }\n\n        if (tx.data && utils.isHex(tx.data)) {\n          tx.data = utils.toPrefixedHex(tx.data);\n        } else if (tx.data) {\n          throw new Error(\"Data must be valid hex\");\n        } else {\n          tx.data = \"0x\";\n        }\n\n        if (!tx.gas) {\n          const pubKey = devkit_1.cry.secp256k1.derivePublicKey(Buffer.from(utils.sanitizeHex(privateKey), 'hex'));\n          const from = '0x' + devkit_1.cry.publicKeyToAddress(pubKey).toString('hex');\n          const gas = yield web3.eth.estimateGas({\n            from,\n            to: tx.to ? tx.to : '',\n            value: tx.value ? tx.value : 0,\n            data: tx.data,\n            token\n          });\n          tx.gas = gas;\n        }\n\n        if (!tx.nonce) {\n          tx.nonce = utils.newNonce();\n        }\n\n        const clause = {\n          value: tx.value || 0,\n          to: tx.to || null,\n          data: tx.data,\n          token: token\n        };\n        const body = {\n          chainTag: utils.validNumberOrDefault(tx.chainTag, 0),\n          blockRef: tx.blockRef,\n          gas: tx.gas,\n          expiration: utils.validNumberOrDefault(tx.expiration, utils.params.defaultExpiration),\n          gasPriceCoef: utils.validNumberOrDefault(tx.gasPriceCoef, utils.params.defaultGasPriceCoef),\n          dependsOn: !tx.dependsOn ? null : tx.dependsOn,\n          nonce: typeof tx.nonce === \"string\" ? utils.toPrefixedHex(tx.nonce) : tx.nonce,\n          clauses: [clause]\n        };\n        debug(\"body: %O\", body);\n        const MeterTx = new devkit_1.Transaction(body);\n        const priKey = Buffer.from(utils.sanitizeHex(privateKey), \"hex\");\n        const signingHash = devkit_1.cry.blake2b256(MeterTx.encode());\n        MeterTx.signature = devkit_1.cry.secp256k1.sign(signingHash, priKey);\n        const result = {\n          rawTransaction: utils.toPrefixedHex(MeterTx.encode().toString(\"hex\")),\n          messageHash: signingHash\n        };\n        return result;\n      });\n    }; // for supporting both callback and promise\n\n\n    if (callback instanceof Function) {\n      sign(ethTx).then(ret => {\n        return callback(null, ret);\n      }).catch(e => {\n        return callback(e);\n      });\n    } else {\n      return sign(ethTx);\n    }\n  };\n\n  web3.eth.accounts.recoverTransaction = function recoverTransaction(encodedRawTx) {\n    const decoded = devkit_1.Transaction.decode(Buffer.from(utils.sanitizeHex(encodedRawTx), 'hex'));\n    return decoded.origin;\n  };\n\n  web3.eth.accounts.hashMessage = function hashMessage(data) {\n    const message = web3Utils.isHexStrict(data) ? web3Utils.hexToBytes(data) : data;\n    const messageBuffer = Buffer.from(message);\n    const prefix = '\\u0019Meter Signed Message:\\n' + message.length.toString();\n    const prefixBuffer = Buffer.from(prefix);\n    const prefixedMessage = Buffer.concat([prefixBuffer, messageBuffer]);\n    return utils.toPrefixedHex(devkit_1.cry.blake2b256(prefixedMessage).toString('hex'));\n  };\n\n  web3.eth.accounts.sign = function sign(data, privateKey) {\n    const hash = this.hashMessage(data);\n    const hashBuffer = Buffer.from(utils.sanitizeHex(hash), 'hex');\n    const privateKeyBuffer = Buffer.from(utils.sanitizeHex(privateKey), 'hex');\n    const signature = devkit_1.cry.secp256k1.sign(hashBuffer, privateKeyBuffer).toString('hex');\n    return {\n      message: data,\n      messageHash: utils.toPrefixedHex(hash),\n      signature: utils.toPrefixedHex(signature)\n    };\n  };\n\n  web3.eth.accounts.recover = function recover(message, signature, preFixed) {\n    if (utils.isObject(message)) {\n      return this.recover(message.messageHash, message.signature, true);\n    }\n\n    if (!preFixed) {\n      message = this.hashMessage(message);\n    }\n\n    const hexBuffer = Buffer.from(utils.sanitizeHex(message), \"hex\");\n    const signatureBuffer = Buffer.from(utils.sanitizeHex(signature), \"hex\");\n    const pubKey = devkit_1.cry.secp256k1.recover(hexBuffer, signatureBuffer);\n    const address = devkit_1.cry.publicKeyToAddress(pubKey);\n    return utils.toPrefixedHex(address.toString(\"hex\"));\n  };\n};\n\nexports.extendAccounts = extendAccounts;","map":{"version":3,"sources":["../../src/extend/accounts.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extendAccounts = void 0;\nconst debug = require('debug')('meter:injector');\nconst devkit_1 = require(\"@meterio/devkit\");\nconst utils = require(\"../utils\");\nconst extendAccounts = function (web3) {\n    const web3Utils = web3.utils;\n    // signTransaction supports both callback and promise style\n    web3.eth.accounts.signTransaction = function signTransaction(ethTx, privateKey, callback) {\n        debug(\"tx to sign: %O\", ethTx);\n        const sign = function (tx) {\n            return __awaiter(this, void 0, void 0, function* () {\n                if (!tx.chainTag) {\n                    const chainTag = yield web3.eth.getChainTag();\n                    if (chainTag) {\n                        tx.chainTag = chainTag;\n                    }\n                    else {\n                        throw new Error(\"error getting chainTag\");\n                    }\n                }\n                if (!tx.blockRef) {\n                    const blockRef = yield web3.eth.getBlockRef();\n                    if (blockRef) {\n                        tx.blockRef = blockRef;\n                    }\n                    else {\n                        throw new Error(\"error getting blockRef\");\n                    }\n                }\n                // take the token type if there is \n                let token = 0;\n                if (tx.data && tx.data.length >= 10) {\n                    if (tx.data.startsWith('0x')) {\n                        // remove 0x prefix\n                        tx.data = tx.data.substring(2, tx.data.length);\n                    }\n                    let tokenStr = tx.data.substring(0, 8);\n                    if (tx.to != null && tokenStr === \"00000000\") {\n                        // if tx.data startswith 00000000, this is a special prefix for token data\n                        // the 5th byte will indicate whether it's a MTR (0) clause or MTRG (1) clause\n                        token = Number(tx.data.substring(8, 10)) > 0 ? 1 : 0;\n                        tx.data = tx.data.substring(10, tx.data.length);\n                    }\n                }\n                if (tx.data && utils.isHex(tx.data)) {\n                    tx.data = utils.toPrefixedHex(tx.data);\n                }\n                else if (tx.data) {\n                    throw new Error(\"Data must be valid hex\");\n                }\n                else {\n                    tx.data = \"0x\";\n                }\n                if (!tx.gas) {\n                    const pubKey = devkit_1.cry.secp256k1.derivePublicKey(Buffer.from(utils.sanitizeHex(privateKey), 'hex'));\n                    const from = '0x' + devkit_1.cry.publicKeyToAddress(pubKey).toString('hex');\n                    const gas = yield web3.eth.estimateGas({\n                        from,\n                        to: tx.to ? tx.to : '',\n                        value: tx.value ? tx.value : 0,\n                        data: tx.data,\n                        token,\n                    });\n                    tx.gas = gas;\n                }\n                if (!tx.nonce) {\n                    tx.nonce = utils.newNonce();\n                }\n                const clause = {\n                    value: tx.value || 0,\n                    to: tx.to || null,\n                    data: tx.data,\n                    token: token\n                };\n                const body = {\n                    chainTag: utils.validNumberOrDefault(tx.chainTag, 0),\n                    blockRef: tx.blockRef,\n                    gas: tx.gas,\n                    expiration: utils.validNumberOrDefault(tx.expiration, utils.params.defaultExpiration),\n                    gasPriceCoef: utils.validNumberOrDefault(tx.gasPriceCoef, utils.params.defaultGasPriceCoef),\n                    dependsOn: !tx.dependsOn ? null : tx.dependsOn,\n                    nonce: typeof tx.nonce === \"string\"\n                        ? utils.toPrefixedHex(tx.nonce)\n                        : tx.nonce,\n                    clauses: [clause]\n                };\n                debug(\"body: %O\", body);\n                const MeterTx = new devkit_1.Transaction(body);\n                const priKey = Buffer.from(utils.sanitizeHex(privateKey), \"hex\");\n                const signingHash = devkit_1.cry.blake2b256(MeterTx.encode());\n                MeterTx.signature = devkit_1.cry.secp256k1.sign(signingHash, priKey);\n                const result = {\n                    rawTransaction: utils.toPrefixedHex(MeterTx.encode().toString(\"hex\")),\n                    messageHash: signingHash\n                };\n                return result;\n            });\n        };\n        // for supporting both callback and promise\n        if (callback instanceof Function) {\n            sign(ethTx)\n                .then(ret => {\n                return callback(null, ret);\n            })\n                .catch(e => {\n                return callback(e);\n            });\n        }\n        else {\n            return sign(ethTx);\n        }\n    };\n    web3.eth.accounts.recoverTransaction = function recoverTransaction(encodedRawTx) {\n        const decoded = devkit_1.Transaction.decode(Buffer.from(utils.sanitizeHex(encodedRawTx), 'hex'));\n        return decoded.origin;\n    };\n    web3.eth.accounts.hashMessage = function hashMessage(data) {\n        const message = web3Utils.isHexStrict(data) ? web3Utils.hexToBytes(data) : data;\n        const messageBuffer = Buffer.from(message);\n        const prefix = '\\u0019Meter Signed Message:\\n' + message.length.toString();\n        const prefixBuffer = Buffer.from(prefix);\n        const prefixedMessage = Buffer.concat([prefixBuffer, messageBuffer]);\n        return utils.toPrefixedHex(devkit_1.cry.blake2b256(prefixedMessage).toString('hex'));\n    };\n    web3.eth.accounts.sign = function sign(data, privateKey) {\n        const hash = this.hashMessage(data);\n        const hashBuffer = Buffer.from(utils.sanitizeHex(hash), 'hex');\n        const privateKeyBuffer = Buffer.from(utils.sanitizeHex(privateKey), 'hex');\n        const signature = devkit_1.cry.secp256k1.sign(hashBuffer, privateKeyBuffer).toString('hex');\n        return {\n            message: data,\n            messageHash: utils.toPrefixedHex(hash),\n            signature: utils.toPrefixedHex(signature)\n        };\n    };\n    web3.eth.accounts.recover = function recover(message, signature, preFixed) {\n        if (utils.isObject(message)) {\n            return this.recover(message.messageHash, message.signature, true);\n        }\n        if (!preFixed) {\n            message = this.hashMessage(message);\n        }\n        const hexBuffer = Buffer.from(utils.sanitizeHex(message), \"hex\");\n        const signatureBuffer = Buffer.from(utils.sanitizeHex(signature), \"hex\");\n        const pubKey = devkit_1.cry.secp256k1.recover(hexBuffer, signatureBuffer);\n        const address = devkit_1.cry.publicKeyToAddress(pubKey);\n        return utils.toPrefixedHex(address.toString(\"hex\"));\n    };\n};\nexports.extendAccounts = extendAccounts;\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"script"}