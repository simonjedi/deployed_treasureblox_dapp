{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/LightsOutMain/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport lightsmusic from './assets/lightsmusic.mp4';\nimport ReactAudioPlayer from 'react-audio-player';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Board extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n  /* creates a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  createBoard() {\n    let board = []; // creates an array-of-arrays of true/false values\n\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  }\n  /* handles changing a cell: update board & determine if winner */\n\n\n  flipCellsAround(coord) {\n    let {\n      ncols,\n      nrows\n    } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    } // flips this cell and the cells around it\n\n\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y - 1, x);\n    flipCell(y + 1, x); // wins when every cell is turned off\n    // determines is the game has been won\n\n    let hasWon = board.every(row => row.every(cell => !cell));\n    this.setState({\n      board: board,\n      hasWon: hasWon\n    });\n  }\n  /* Renders game board or winning message. */\n\n\n  render() {\n    // if the game is won, shows a winning msg & render nothing else\n    if (this.state.hasWon) {\n      return /*#__PURE__*/_jsxDEV(\"center\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"Board-title d-none d-lg-block\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"winner\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"neon-orange\",\n              children: \"YOU\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"neon-blue\",\n              children: \"WON!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Redirect, {\n            to: \"/Game2MoreGame1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this);\n    } // makes table board\n\n\n    let tblBoard = [];\n\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n\n      for (let x = 0; x < this.props.ncols; x++) {\n        let c = `${y}-${x}`;\n        row.push( /*#__PURE__*/_jsxDEV(Cell, {\n          isLit: this.state.board[y][x],\n          flipCellsAroundMe: () => this.flipCellsAround(c)\n        }, c, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 18\n        }, this));\n      }\n\n      tblBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row\n      }, y, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Board-title d-none d-lg-block\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"neon-orange \",\n          children: \"Blox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"neon-blue \",\n          children: \" Lights Out\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"siteTitle\",\n        children: \"Simply turn out the lights!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Board\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 16\n          }, this), tblBoard]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/LightsOutMain/Board.js"],"names":["React","Component","Cell","lightsmusic","ReactAudioPlayer","BrowserRouter","Router","Switch","Route","Link","Redirect","Board","constructor","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","flipCellsAround","coord","split","map","Number","flipCell","every","cell","setState","render","tblBoard","c","defaultProps"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport lightsmusic from './assets/lightsmusic.mp4';\nimport ReactAudioPlayer from 'react-audio-player';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nclass Board extends Component {\n\n\n\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  /* creates a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let board = [];\n    // creates an array-of-arrays of true/false values\n    for(let y = 0; y < this.props.nrows; y++){\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++){\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }\n      board.push(row);\n    }\n    return board\n  }\n\n\n  /* handles changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // flips this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y - 1, x);\n    flipCell(y + 1, x);\n\n    // wins when every cell is turned off\n    // determines is the game has been won\n    let hasWon = board.every(row => row.every(cell => !cell));\n    this.setState({board: board, hasWon: hasWon});\n  }\n\n\n\n  /* Renders game board or winning message. */\n  render() {\n\n    // if the game is won, shows a winning msg & render nothing else\n    if(this.state.hasWon){\n      return(\n        <center>\n          <div className='Board-title d-none d-lg-block'>\n            <div className='winner'>\n              <span className='neon-orange'>YOU</span>\n              <span className='neon-blue'>WON!</span>\n            </div>\n\n            <Redirect to=\"/Game2MoreGame1\"/>\n\n          </div>\n        </center>\n      )\n    }\n\n    // makes table board\n    let tblBoard = [];\n    for(let y = 0; y < this.props.nrows; y++){\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++){\n        let c = `${y}-${x}`;\n        row.push(<Cell\n            key={c}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={() => this.flipCellsAround(c)}\n        />)\n      }\n      tblBoard.push(<tr key={y}>{row}</tr>)\n    }\n\n\n\n\n    return(\n      <div>\n\n\n\n        <div className='Board-title d-none d-lg-block'>\n          <div className='neon-orange '>Blox</div>\n          <div className='neon-blue '> Lights Out</div>\n        </div>\n        <br/><br/>\n        <div className=\"siteTitle\">Simply turn out the lights!</div>\n\n\n        <table className='Board'>\n\n          <tbody>\n\n          <br/><br/>\n\n            {tblBoard}\n          </tbody>\n        </table>\n      </div>\n\n    )\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}