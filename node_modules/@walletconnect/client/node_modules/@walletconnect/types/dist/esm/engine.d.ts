import { JsonRpcPayload } from "@walletconnect/jsonrpc-types";
import { RelayerTypes } from "./relayer";
import { ISequence, SequenceTypes } from "./sequence";
export declare abstract class IEngine<Pending = SequenceTypes.Pending, Settled = SequenceTypes.Settled, Upgrade = SequenceTypes.Upgrade, Update = SequenceTypes.Update, CreateParams = SequenceTypes.CreateParams, RespondParams = SequenceTypes.RespondParams, RequestParams = SequenceTypes.RequestParams, UpgradeParams = SequenceTypes.UpgradeParams, UpdateParams = SequenceTypes.UpdateParams, DeleteParams = SequenceTypes.DeleteParams, ProposeParams = SequenceTypes.ProposeParams, SettleParams = SequenceTypes.SettleParams, NotifyParams = SequenceTypes.NotifyParams, Participant = SequenceTypes.Participant, Permissions = SequenceTypes.Permissions> {
    sequence: ISequence;
    constructor(sequence: ISequence);
    abstract find(permissions: Partial<Permissions>): Promise<Settled[]>;
    abstract ping(topic: string, timeout?: number): Promise<void>;
    abstract send(topic: string, payload: JsonRpcPayload, chainId?: string): Promise<void>;
    abstract create(params?: CreateParams): Promise<Settled>;
    abstract respond(params: RespondParams): Promise<Pending>;
    abstract upgrade(params: UpgradeParams): Promise<Settled>;
    abstract update(params: UpdateParams): Promise<Settled>;
    abstract request(params: RequestParams): Promise<any>;
    abstract delete(params: DeleteParams): Promise<void>;
    abstract notify(params: NotifyParams): Promise<void>;
    protected abstract propose(params?: ProposeParams): Promise<Pending>;
    protected abstract settle(params: SettleParams): Promise<Settled>;
    protected abstract onResponse(payloadEvent: RelayerTypes.PayloadEvent): Promise<void>;
    protected abstract onAcknowledge(payloadEvent: RelayerTypes.PayloadEvent): Promise<void>;
    protected abstract onMessage(payloadEvent: RelayerTypes.PayloadEvent): Promise<void>;
    protected abstract onPayload(payloadEvent: RelayerTypes.PayloadEvent): Promise<void>;
    protected abstract onUpdate(payloadEvent: RelayerTypes.PayloadEvent): Promise<void>;
    protected abstract onUpgrade(payloadEvent: RelayerTypes.PayloadEvent): Promise<void>;
    protected abstract onNotification(payloadEvent: RelayerTypes.PayloadEvent): Promise<void>;
    protected abstract handleUpdate(topic: string, params: Update, participant: Participant): Promise<Update>;
    protected abstract handleUpgrade(topic: string, params: Upgrade, participant: Participant): Promise<Upgrade>;
}
//# sourceMappingURL=engine.d.ts.map