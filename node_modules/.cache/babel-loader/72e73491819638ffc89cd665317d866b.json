{"ast":null,"code":"const Hash = require(\"./hash\");\n\nconst Bytes = require(\"./bytes\");\n\nconst Desubits = require(\"./desubits\"); // Bytes -> Bytes\n\n\nconst bytesAddChecksum = bytes => {\n  const hash = Hash.keccak256(bytes);\n  const sum = Bytes.slice(0, 1, hash);\n  return Bytes.concat(bytes, sum);\n}; // Bytes -> Bool\n\n\nconst bytesChecksum = bytes => {\n  const length = Bytes.length(bytes);\n  const prefix = Bytes.slice(0, length - 1, bytes);\n  return bytesAddChecksum(prefix) === bytes;\n}; // () ~> Passphrase\n\n\nconst create = () => {\n  const bytes = bytesAddChecksum(Bytes.random(11));\n  const seed = Desubits.fromBytes(bytes);\n  const passphrase = seed.replace(/([a-z]{8})/g, \"$1 \");\n  return passphrase;\n}; // Passphrase -> Bytes\n\n\nconst toBytes = passphrase => {\n  const seed = passphrase.replace(/ /g, \"\");\n  const bytes = Desubits.toBytes(passphrase);\n  return bytes;\n}; // Passphrase -> Bool\n\n\nconst checksum = passphrase => bytesChecksum(toBytes(passphrase)); // Passphrase -> Bytes\n\n\nconst toMasterKey = passphrase => {\n  let hash = Hash.keccak256;\n  let bytes = toBytes(passphrase);\n\n  for (let i = 0, l = Math.pow(2, 12); i < l; ++i) bytes = hash(bytes);\n\n  return bytes;\n};\n\nmodule.exports = {\n  create,\n  checksum,\n  toMasterKey\n};","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/node_modules/@celo/wallet-base/node_modules/eth-lib/lib/passphrase.js"],"names":["Hash","require","Bytes","Desubits","bytesAddChecksum","bytes","hash","keccak256","sum","slice","concat","bytesChecksum","length","prefix","create","random","seed","fromBytes","passphrase","replace","toBytes","checksum","toMasterKey","i","l","Math","pow","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAArB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,YAAD,CAAxB,C,CAEA;;;AACA,MAAMG,gBAAgB,GAAGC,KAAK,IAAI;AAChC,QAAMC,IAAI,GAAGN,IAAI,CAACO,SAAL,CAAeF,KAAf,CAAb;AACA,QAAMG,GAAG,GAAGN,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAe,CAAf,EAAkBH,IAAlB,CAAZ;AACA,SAAOJ,KAAK,CAACQ,MAAN,CAAaL,KAAb,EAAoBG,GAApB,CAAP;AACD,CAJD,C,CAMA;;;AACA,MAAMG,aAAa,GAAGN,KAAK,IAAI;AAC7B,QAAMO,MAAM,GAAGV,KAAK,CAACU,MAAN,CAAaP,KAAb,CAAf;AACA,QAAMQ,MAAM,GAAGX,KAAK,CAACO,KAAN,CAAY,CAAZ,EAAeG,MAAM,GAAG,CAAxB,EAA2BP,KAA3B,CAAf;AACA,SAAOD,gBAAgB,CAACS,MAAD,CAAhB,KAA6BR,KAApC;AACD,CAJD,C,CAMA;;;AACA,MAAMS,MAAM,GAAG,MAAM;AACnB,QAAMT,KAAK,GAAGD,gBAAgB,CAACF,KAAK,CAACa,MAAN,CAAa,EAAb,CAAD,CAA9B;AACA,QAAMC,IAAI,GAAGb,QAAQ,CAACc,SAAT,CAAmBZ,KAAnB,CAAb;AACA,QAAMa,UAAU,GAAGF,IAAI,CAACG,OAAL,CAAa,aAAb,EAA4B,KAA5B,CAAnB;AACA,SAAOD,UAAP;AACD,CALD,C,CAOA;;;AACA,MAAME,OAAO,GAAGF,UAAU,IAAI;AAC5B,QAAMF,IAAI,GAAGE,UAAU,CAACC,OAAX,CAAmB,IAAnB,EAAyB,EAAzB,CAAb;AACA,QAAMd,KAAK,GAAGF,QAAQ,CAACiB,OAAT,CAAiBF,UAAjB,CAAd;AACA,SAAOb,KAAP;AACD,CAJD,C,CAMA;;;AACA,MAAMgB,QAAQ,GAAGH,UAAU,IAAIP,aAAa,CAACS,OAAO,CAACF,UAAD,CAAR,CAA5C,C,CAEA;;;AACA,MAAMI,WAAW,GAAGJ,UAAU,IAAI;AAChC,MAAIZ,IAAI,GAAGN,IAAI,CAACO,SAAhB;AACA,MAAIF,KAAK,GAAGe,OAAO,CAACF,UAAD,CAAnB;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAY,EAAZ,CAApB,EAAqCH,CAAC,GAAGC,CAAzC,EAA4C,EAAED,CAA9C,EAAiDlB,KAAK,GAAGC,IAAI,CAACD,KAAD,CAAZ;;AACjD,SAAOA,KAAP;AACD,CALD;;AAOAsB,MAAM,CAACC,OAAP,GAAiB;AACfd,EAAAA,MADe;AAEfO,EAAAA,QAFe;AAGfC,EAAAA;AAHe,CAAjB","sourcesContent":["const Hash = require(\"./hash\");\nconst Bytes = require(\"./bytes\");\nconst Desubits = require(\"./desubits\");\n\n// Bytes -> Bytes\nconst bytesAddChecksum = bytes => {\n  const hash = Hash.keccak256(bytes);\n  const sum = Bytes.slice(0, 1, hash);\n  return Bytes.concat(bytes, sum);\n};\n\n// Bytes -> Bool\nconst bytesChecksum = bytes => {\n  const length = Bytes.length(bytes);\n  const prefix = Bytes.slice(0, length - 1, bytes);\n  return bytesAddChecksum(prefix) === bytes;\n};\n\n// () ~> Passphrase\nconst create = () => {\n  const bytes = bytesAddChecksum(Bytes.random(11));\n  const seed = Desubits.fromBytes(bytes);\n  const passphrase = seed.replace(/([a-z]{8})/g, \"$1 \");\n  return passphrase;\n};\n\n// Passphrase -> Bytes\nconst toBytes = passphrase => {\n  const seed = passphrase.replace(/ /g, \"\");\n  const bytes = Desubits.toBytes(passphrase);\n  return bytes;\n};\n\n// Passphrase -> Bool\nconst checksum = passphrase => bytesChecksum(toBytes(passphrase));\n\n// Passphrase -> Bytes\nconst toMasterKey = passphrase => {\n  let hash = Hash.keccak256;\n  let bytes = toBytes(passphrase);\n  for (let i = 0, l = Math.pow(2, 12); i < l; ++i) bytes = hash(bytes);\n  return bytes;\n};\n\nmodule.exports = {\n  create,\n  checksum,\n  toMasterKey\n};"]},"metadata":{},"sourceType":"script"}