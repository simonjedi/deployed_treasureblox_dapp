{"ast":null,"code":"\"use strict\";\n/**\n * var basex = require('base-x');\n *\n * This implementation is heavily based on base-x. The main reason to\n * deviate was to prevent the dependency of Buffer.\n *\n * Contributors:\n *\n * base-x encoding\n * Forked from https://github.com/cryptocoinjs/bs58\n * Originally written by Mike Hearn for BitcoinJ\n * Copyright (c) 2011 Google Inc\n * Ported to JavaScript by Stefan Thomas\n * Merged Buffer refactorings from base58-native by Stephen Pair\n * Copyright (c) 2013 BitPay Inc\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bytes_1 = require(\"./bytes\");\n\nvar properties_1 = require(\"./properties\");\n\nvar BaseX = function () {\n  function BaseX(alphabet) {\n    properties_1.defineReadOnly(this, \"alphabet\", alphabet);\n    properties_1.defineReadOnly(this, \"base\", alphabet.length);\n    properties_1.defineReadOnly(this, \"_alphabetMap\", {});\n    properties_1.defineReadOnly(this, \"_leader\", alphabet.charAt(0)); // pre-compute lookup table\n\n    for (var i = 0; i < alphabet.length; i++) {\n      this._alphabetMap[alphabet.charAt(i)] = i;\n    }\n  }\n\n  BaseX.prototype.encode = function (value) {\n    var source = bytes_1.arrayify(value);\n\n    if (source.length === 0) {\n      return '';\n    }\n\n    var digits = [0];\n\n    for (var i = 0; i < source.length; ++i) {\n      var carry = source[i];\n\n      for (var j = 0; j < digits.length; ++j) {\n        carry += digits[j] << 8;\n        digits[j] = carry % this.base;\n        carry = carry / this.base | 0;\n      }\n\n      while (carry > 0) {\n        digits.push(carry % this.base);\n        carry = carry / this.base | 0;\n      }\n    }\n\n    var string = ''; // deal with leading zeros\n\n    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n      string += this._leader;\n    } // convert digits to a string\n\n\n    for (var q = digits.length - 1; q >= 0; --q) {\n      string += this.alphabet[digits[q]];\n    }\n\n    return string;\n  };\n\n  BaseX.prototype.decode = function (value) {\n    if (typeof value !== 'string') {\n      throw new TypeError('Expected String');\n    }\n\n    var bytes = [];\n\n    if (value.length === 0) {\n      return new Uint8Array(bytes);\n    }\n\n    bytes.push(0);\n\n    for (var i = 0; i < value.length; i++) {\n      var byte = this._alphabetMap[value[i]];\n\n      if (byte === undefined) {\n        throw new Error('Non-base' + this.base + ' character');\n      }\n\n      var carry = byte;\n\n      for (var j = 0; j < bytes.length; ++j) {\n        carry += bytes[j] * this.base;\n        bytes[j] = carry & 0xff;\n        carry >>= 8;\n      }\n\n      while (carry > 0) {\n        bytes.push(carry & 0xff);\n        carry >>= 8;\n      }\n    } // deal with leading zeros\n\n\n    for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n      bytes.push(0);\n    }\n\n    return bytes_1.arrayify(new Uint8Array(bytes.reverse()));\n  };\n\n  return BaseX;\n}();\n\nexports.BaseX = BaseX;\nvar Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nexports.Base32 = Base32;\nvar Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\nexports.Base58 = Base58; //console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/node_modules/@meterio/ethers/utils/basex.js"],"names":["Object","defineProperty","exports","value","bytes_1","require","properties_1","BaseX","alphabet","defineReadOnly","length","charAt","i","_alphabetMap","prototype","encode","source","arrayify","digits","carry","j","base","push","string","k","_leader","q","decode","TypeError","bytes","Uint8Array","byte","undefined","Error","reverse","Base32","Base58"],"mappings":"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","sourcesContent":["\"use strict\";\n/**\n * var basex = require('base-x');\n *\n * This implementation is heavily based on base-x. The main reason to\n * deviate was to prevent the dependency of Buffer.\n *\n * Contributors:\n *\n * base-x encoding\n * Forked from https://github.com/cryptocoinjs/bs58\n * Originally written by Mike Hearn for BitcoinJ\n * Copyright (c) 2011 Google Inc\n * Ported to JavaScript by Stefan Thomas\n * Merged Buffer refactorings from base58-native by Stephen Pair\n * Copyright (c) 2013 BitPay Inc\n *\n * The MIT License (MIT)\n *\n * Copyright base-x contributors (c) 2016\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bytes_1 = require(\"./bytes\");\nvar properties_1 = require(\"./properties\");\nvar BaseX = /** @class */ (function () {\n    function BaseX(alphabet) {\n        properties_1.defineReadOnly(this, \"alphabet\", alphabet);\n        properties_1.defineReadOnly(this, \"base\", alphabet.length);\n        properties_1.defineReadOnly(this, \"_alphabetMap\", {});\n        properties_1.defineReadOnly(this, \"_leader\", alphabet.charAt(0));\n        // pre-compute lookup table\n        for (var i = 0; i < alphabet.length; i++) {\n            this._alphabetMap[alphabet.charAt(i)] = i;\n        }\n    }\n    BaseX.prototype.encode = function (value) {\n        var source = bytes_1.arrayify(value);\n        if (source.length === 0) {\n            return '';\n        }\n        var digits = [0];\n        for (var i = 0; i < source.length; ++i) {\n            var carry = source[i];\n            for (var j = 0; j < digits.length; ++j) {\n                carry += digits[j] << 8;\n                digits[j] = carry % this.base;\n                carry = (carry / this.base) | 0;\n            }\n            while (carry > 0) {\n                digits.push(carry % this.base);\n                carry = (carry / this.base) | 0;\n            }\n        }\n        var string = '';\n        // deal with leading zeros\n        for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) {\n            string += this._leader;\n        }\n        // convert digits to a string\n        for (var q = digits.length - 1; q >= 0; --q) {\n            string += this.alphabet[digits[q]];\n        }\n        return string;\n    };\n    BaseX.prototype.decode = function (value) {\n        if (typeof (value) !== 'string') {\n            throw new TypeError('Expected String');\n        }\n        var bytes = [];\n        if (value.length === 0) {\n            return new Uint8Array(bytes);\n        }\n        bytes.push(0);\n        for (var i = 0; i < value.length; i++) {\n            var byte = this._alphabetMap[value[i]];\n            if (byte === undefined) {\n                throw new Error('Non-base' + this.base + ' character');\n            }\n            var carry = byte;\n            for (var j = 0; j < bytes.length; ++j) {\n                carry += bytes[j] * this.base;\n                bytes[j] = carry & 0xff;\n                carry >>= 8;\n            }\n            while (carry > 0) {\n                bytes.push(carry & 0xff);\n                carry >>= 8;\n            }\n        }\n        // deal with leading zeros\n        for (var k = 0; value[k] === this._leader && k < value.length - 1; ++k) {\n            bytes.push(0);\n        }\n        return bytes_1.arrayify(new Uint8Array(bytes.reverse()));\n    };\n    return BaseX;\n}());\nexports.BaseX = BaseX;\nvar Base32 = new BaseX(\"abcdefghijklmnopqrstuvwxyz234567\");\nexports.Base32 = Base32;\nvar Base58 = new BaseX(\"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\");\nexports.Base58 = Base58;\n//console.log(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\"))\n//console.log(Base58.encode(Base58.decode(\"Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj\")))\n"]},"metadata":{},"sourceType":"script"}