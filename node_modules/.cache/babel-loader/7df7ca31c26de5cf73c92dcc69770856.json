{"ast":null,"code":"/**\r\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\r\n *\r\n * @version 0.6.1\r\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\r\n * @copyright Chen, Yi-Cyuan 2015-2017\r\n * @license MIT\r\n */\n\n/*jslint bitwise: true */\n(function () {\n  'use strict';\n\n  var root = typeof window === 'object' ? window : {};\n  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\n\n  if (NODE_JS) {\n    root = global;\n  }\n\n  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;\n  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\n  var HEX_CHARS = '0123456789abcdef'.split('');\n  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\n  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\n  var KECCAK_PADDING = [1, 256, 65536, 16777216];\n  var PADDING = [6, 1536, 393216, 100663296];\n  var SHIFT = [0, 8, 16, 24];\n  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\n  var BITS = [224, 256, 384, 512];\n  var SHAKE_BITS = [128, 256];\n  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];\n  var CSHAKE_BYTEPAD = {\n    '128': 168,\n    '256': 136\n  };\n\n  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\n    Array.isArray = function (obj) {\n      return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n  }\n\n  var createOutputMethod = function (bits, padding, outputType) {\n    return function (message) {\n      return new Keccak(bits, padding, bits).update(message)[outputType]();\n    };\n  };\n\n  var createShakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits) {\n      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\n    };\n  };\n\n  var createCshakeOutputMethod = function (bits, padding, outputType) {\n    return function (message, outputBits, n, s) {\n      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\n    };\n  };\n\n  var createKmacOutputMethod = function (bits, padding, outputType) {\n    return function (key, message, outputBits, s) {\n      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\n    };\n  };\n\n  var createOutputMethods = function (method, createMethod, bits, padding) {\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\n      var type = OUTPUT_TYPES[i];\n      method[type] = createMethod(bits, padding, type);\n    }\n\n    return method;\n  };\n\n  var createMethod = function (bits, padding) {\n    var method = createOutputMethod(bits, padding, 'hex');\n\n    method.create = function () {\n      return new Keccak(bits, padding, bits);\n    };\n\n    method.update = function (message) {\n      return method.create().update(message);\n    };\n\n    return createOutputMethods(method, createOutputMethod, bits, padding);\n  };\n\n  var createShakeMethod = function (bits, padding) {\n    var method = createShakeOutputMethod(bits, padding, 'hex');\n\n    method.create = function (outputBits) {\n      return new Keccak(bits, padding, outputBits);\n    };\n\n    method.update = function (message, outputBits) {\n      return method.create(outputBits).update(message);\n    };\n\n    return createOutputMethods(method, createShakeOutputMethod, bits, padding);\n  };\n\n  var createCshakeMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createCshakeOutputMethod(bits, padding, 'hex');\n\n    method.create = function (outputBits, n, s) {\n      if (!n && !s) {\n        return methods['shake' + bits].create(outputBits);\n      } else {\n        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\n      }\n    };\n\n    method.update = function (message, outputBits, n, s) {\n      return method.create(outputBits, n, s).update(message);\n    };\n\n    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\n  };\n\n  var createKmacMethod = function (bits, padding) {\n    var w = CSHAKE_BYTEPAD[bits];\n    var method = createKmacOutputMethod(bits, padding, 'hex');\n\n    method.create = function (key, outputBits, s) {\n      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\n    };\n\n    method.update = function (key, message, outputBits, s) {\n      return method.create(key, outputBits, s).update(message);\n    };\n\n    return createOutputMethods(method, createKmacOutputMethod, bits, padding);\n  };\n\n  var algorithms = [{\n    name: 'keccak',\n    padding: KECCAK_PADDING,\n    bits: BITS,\n    createMethod: createMethod\n  }, {\n    name: 'sha3',\n    padding: PADDING,\n    bits: BITS,\n    createMethod: createMethod\n  }, {\n    name: 'shake',\n    padding: SHAKE_PADDING,\n    bits: SHAKE_BITS,\n    createMethod: createShakeMethod\n  }, {\n    name: 'cshake',\n    padding: CSHAKE_PADDING,\n    bits: SHAKE_BITS,\n    createMethod: createCshakeMethod\n  }, {\n    name: 'kmac',\n    padding: CSHAKE_PADDING,\n    bits: SHAKE_BITS,\n    createMethod: createKmacMethod\n  }];\n  var methods = {},\n      methodNames = [];\n\n  for (var i = 0; i < algorithms.length; ++i) {\n    var algorithm = algorithms[i];\n    var bits = algorithm.bits;\n\n    for (var j = 0; j < bits.length; ++j) {\n      var methodName = algorithm.name + '_' + bits[j];\n      methodNames.push(methodName);\n      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\n\n      if (algorithm.name !== 'sha3') {\n        var newMethodName = algorithm.name + bits[j];\n        methodNames.push(newMethodName);\n        methods[newMethodName] = methods[methodName];\n      }\n    }\n  }\n\n  function Keccak(bits, padding, outputBits) {\n    this.blocks = [];\n    this.s = [];\n    this.padding = padding;\n    this.outputBits = outputBits;\n    this.reset = true;\n    this.block = 0;\n    this.start = 0;\n    this.blockCount = 1600 - (bits << 1) >> 5;\n    this.byteCount = this.blockCount << 2;\n    this.outputBlocks = outputBits >> 5;\n    this.extraBytes = (outputBits & 31) >> 3;\n\n    for (var i = 0; i < 50; ++i) {\n      this.s[i] = 0;\n    }\n  }\n\n  Keccak.prototype.update = function (message) {\n    var notString = typeof message !== 'string';\n\n    if (notString && message.constructor === root.ArrayBuffer) {\n      message = new Uint8Array(message);\n    }\n\n    var length = message.length;\n\n    if (notString) {\n      if (typeof length !== 'number' || !Array.isArray(message) && !(ARRAY_BUFFER && ArrayBuffer.isView(message))) {\n        throw 'input is invalid type';\n      }\n    }\n\n    var blocks = this.blocks,\n        byteCount = this.byteCount,\n        blockCount = this.blockCount,\n        index = 0,\n        s = this.s,\n        i,\n        code;\n\n    while (index < length) {\n      if (this.reset) {\n        this.reset = false;\n        blocks[0] = this.block;\n\n        for (i = 1; i < blockCount + 1; ++i) {\n          blocks[i] = 0;\n        }\n      }\n\n      if (notString) {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\n        }\n      } else {\n        for (i = this.start; index < length && i < byteCount; ++index) {\n          code = message.charCodeAt(index);\n\n          if (code < 0x80) {\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\n          } else if (code < 0x800) {\n            blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n          } else if (code < 0xd800 || code >= 0xe000) {\n            blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n          } else {\n            code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);\n            blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[i++ & 3];\n            blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[i++ & 3];\n          }\n        }\n      }\n\n      this.lastByteIndex = i;\n\n      if (i >= byteCount) {\n        this.start = i - byteCount;\n        this.block = blocks[blockCount];\n\n        for (i = 0; i < blockCount; ++i) {\n          s[i] ^= blocks[i];\n        }\n\n        f(s);\n        this.reset = true;\n      } else {\n        this.start = i;\n      }\n    }\n\n    return this;\n  };\n\n  Keccak.prototype.encode = function (x, right) {\n    var o = x & 255,\n        n = 1;\n    var bytes = [o];\n    x = x >> 8;\n    o = x & 255;\n\n    while (o > 0) {\n      bytes.unshift(o);\n      x = x >> 8;\n      o = x & 255;\n      ++n;\n    }\n\n    if (right) {\n      bytes.push(n);\n    } else {\n      bytes.unshift(n);\n    }\n\n    this.update(bytes);\n    return bytes.length;\n  };\n\n  Keccak.prototype.encodeString = function (str) {\n    str = str || '';\n    var notString = typeof str !== 'string';\n\n    if (notString && str.constructor === root.ArrayBuffer) {\n      str = new Uint8Array(str);\n    }\n\n    var length = str.length;\n\n    if (notString) {\n      if (typeof length !== 'number' || !Array.isArray(str) && !(ARRAY_BUFFER && ArrayBuffer.isView(str))) {\n        throw 'input is invalid type';\n      }\n    }\n\n    var bytes = 0;\n\n    if (notString) {\n      bytes = length;\n    } else {\n      for (var i = 0; i < str.length; ++i) {\n        var code = str.charCodeAt(i);\n\n        if (code < 0x80) {\n          bytes += 1;\n        } else if (code < 0x800) {\n          bytes += 2;\n        } else if (code < 0xd800 || code >= 0xe000) {\n          bytes += 3;\n        } else {\n          code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++i) & 0x3ff);\n          bytes += 4;\n        }\n      }\n    }\n\n    bytes += this.encode(bytes * 8);\n    this.update(str);\n    return bytes;\n  };\n\n  Keccak.prototype.bytepad = function (strs, w) {\n    var bytes = this.encode(w);\n\n    for (var i = 0; i < strs.length; ++i) {\n      bytes += this.encodeString(strs[i]);\n    }\n\n    var paddingBytes = w - bytes % w;\n    var zeros = [];\n    zeros.length = paddingBytes;\n    this.update(zeros);\n    return this;\n  };\n\n  Keccak.prototype.finalize = function () {\n    var blocks = this.blocks,\n        i = this.lastByteIndex,\n        blockCount = this.blockCount,\n        s = this.s;\n    blocks[i >> 2] |= this.padding[i & 3];\n\n    if (this.lastByteIndex === this.byteCount) {\n      blocks[0] = blocks[blockCount];\n\n      for (i = 1; i < blockCount + 1; ++i) {\n        blocks[i] = 0;\n      }\n    }\n\n    blocks[blockCount - 1] |= 0x80000000;\n\n    for (i = 0; i < blockCount; ++i) {\n      s[i] ^= blocks[i];\n    }\n\n    f(s);\n  };\n\n  Keccak.prototype.toString = Keccak.prototype.hex = function () {\n    this.finalize();\n    var blockCount = this.blockCount,\n        s = this.s,\n        outputBlocks = this.outputBlocks,\n        extraBytes = this.extraBytes,\n        i = 0,\n        j = 0;\n    var hex = '',\n        block;\n\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        block = s[i];\n        hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];\n      }\n\n      if (j % blockCount === 0) {\n        f(s);\n        i = 0;\n      }\n    }\n\n    if (extraBytes) {\n      block = s[i];\n\n      if (extraBytes > 0) {\n        hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F];\n      }\n\n      if (extraBytes > 1) {\n        hex += HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F];\n      }\n\n      if (extraBytes > 2) {\n        hex += HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F];\n      }\n    }\n\n    return hex;\n  };\n\n  Keccak.prototype.arrayBuffer = function () {\n    this.finalize();\n    var blockCount = this.blockCount,\n        s = this.s,\n        outputBlocks = this.outputBlocks,\n        extraBytes = this.extraBytes,\n        i = 0,\n        j = 0;\n    var bytes = this.outputBits >> 3;\n    var buffer;\n\n    if (extraBytes) {\n      buffer = new ArrayBuffer(outputBlocks + 1 << 2);\n    } else {\n      buffer = new ArrayBuffer(bytes);\n    }\n\n    var array = new Uint32Array(buffer);\n\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        array[j] = s[i];\n      }\n\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n\n    if (extraBytes) {\n      array[i] = s[i];\n      buffer = buffer.slice(0, bytes);\n    }\n\n    return buffer;\n  };\n\n  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\n\n  Keccak.prototype.digest = Keccak.prototype.array = function () {\n    this.finalize();\n    var blockCount = this.blockCount,\n        s = this.s,\n        outputBlocks = this.outputBlocks,\n        extraBytes = this.extraBytes,\n        i = 0,\n        j = 0;\n    var array = [],\n        offset,\n        block;\n\n    while (j < outputBlocks) {\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\n        offset = j << 2;\n        block = s[i];\n        array[offset] = block & 0xFF;\n        array[offset + 1] = block >> 8 & 0xFF;\n        array[offset + 2] = block >> 16 & 0xFF;\n        array[offset + 3] = block >> 24 & 0xFF;\n      }\n\n      if (j % blockCount === 0) {\n        f(s);\n      }\n    }\n\n    if (extraBytes) {\n      offset = j << 2;\n      block = s[i];\n\n      if (extraBytes > 0) {\n        array[offset] = block & 0xFF;\n      }\n\n      if (extraBytes > 1) {\n        array[offset + 1] = block >> 8 & 0xFF;\n      }\n\n      if (extraBytes > 2) {\n        array[offset + 2] = block >> 16 & 0xFF;\n      }\n    }\n\n    return array;\n  };\n\n  function Kmac(bits, padding, outputBits) {\n    Keccak.call(this, bits, padding, outputBits);\n  }\n\n  Kmac.prototype = new Keccak();\n\n  Kmac.prototype.finalize = function () {\n    this.encode(this.outputBits, true);\n    return Keccak.prototype.finalize.call(this);\n  };\n\n  var f = function (s) {\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\n\n    for (n = 0; n < 48; n += 2) {\n      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\n      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\n      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\n      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\n      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\n      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\n      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\n      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\n      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\n      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\n      h = c8 ^ (c2 << 1 | c3 >>> 31);\n      l = c9 ^ (c3 << 1 | c2 >>> 31);\n      s[0] ^= h;\n      s[1] ^= l;\n      s[10] ^= h;\n      s[11] ^= l;\n      s[20] ^= h;\n      s[21] ^= l;\n      s[30] ^= h;\n      s[31] ^= l;\n      s[40] ^= h;\n      s[41] ^= l;\n      h = c0 ^ (c4 << 1 | c5 >>> 31);\n      l = c1 ^ (c5 << 1 | c4 >>> 31);\n      s[2] ^= h;\n      s[3] ^= l;\n      s[12] ^= h;\n      s[13] ^= l;\n      s[22] ^= h;\n      s[23] ^= l;\n      s[32] ^= h;\n      s[33] ^= l;\n      s[42] ^= h;\n      s[43] ^= l;\n      h = c2 ^ (c6 << 1 | c7 >>> 31);\n      l = c3 ^ (c7 << 1 | c6 >>> 31);\n      s[4] ^= h;\n      s[5] ^= l;\n      s[14] ^= h;\n      s[15] ^= l;\n      s[24] ^= h;\n      s[25] ^= l;\n      s[34] ^= h;\n      s[35] ^= l;\n      s[44] ^= h;\n      s[45] ^= l;\n      h = c4 ^ (c8 << 1 | c9 >>> 31);\n      l = c5 ^ (c9 << 1 | c8 >>> 31);\n      s[6] ^= h;\n      s[7] ^= l;\n      s[16] ^= h;\n      s[17] ^= l;\n      s[26] ^= h;\n      s[27] ^= l;\n      s[36] ^= h;\n      s[37] ^= l;\n      s[46] ^= h;\n      s[47] ^= l;\n      h = c6 ^ (c0 << 1 | c1 >>> 31);\n      l = c7 ^ (c1 << 1 | c0 >>> 31);\n      s[8] ^= h;\n      s[9] ^= l;\n      s[18] ^= h;\n      s[19] ^= l;\n      s[28] ^= h;\n      s[29] ^= l;\n      s[38] ^= h;\n      s[39] ^= l;\n      s[48] ^= h;\n      s[49] ^= l;\n      b0 = s[0];\n      b1 = s[1];\n      b32 = s[11] << 4 | s[10] >>> 28;\n      b33 = s[10] << 4 | s[11] >>> 28;\n      b14 = s[20] << 3 | s[21] >>> 29;\n      b15 = s[21] << 3 | s[20] >>> 29;\n      b46 = s[31] << 9 | s[30] >>> 23;\n      b47 = s[30] << 9 | s[31] >>> 23;\n      b28 = s[40] << 18 | s[41] >>> 14;\n      b29 = s[41] << 18 | s[40] >>> 14;\n      b20 = s[2] << 1 | s[3] >>> 31;\n      b21 = s[3] << 1 | s[2] >>> 31;\n      b2 = s[13] << 12 | s[12] >>> 20;\n      b3 = s[12] << 12 | s[13] >>> 20;\n      b34 = s[22] << 10 | s[23] >>> 22;\n      b35 = s[23] << 10 | s[22] >>> 22;\n      b16 = s[33] << 13 | s[32] >>> 19;\n      b17 = s[32] << 13 | s[33] >>> 19;\n      b48 = s[42] << 2 | s[43] >>> 30;\n      b49 = s[43] << 2 | s[42] >>> 30;\n      b40 = s[5] << 30 | s[4] >>> 2;\n      b41 = s[4] << 30 | s[5] >>> 2;\n      b22 = s[14] << 6 | s[15] >>> 26;\n      b23 = s[15] << 6 | s[14] >>> 26;\n      b4 = s[25] << 11 | s[24] >>> 21;\n      b5 = s[24] << 11 | s[25] >>> 21;\n      b36 = s[34] << 15 | s[35] >>> 17;\n      b37 = s[35] << 15 | s[34] >>> 17;\n      b18 = s[45] << 29 | s[44] >>> 3;\n      b19 = s[44] << 29 | s[45] >>> 3;\n      b10 = s[6] << 28 | s[7] >>> 4;\n      b11 = s[7] << 28 | s[6] >>> 4;\n      b42 = s[17] << 23 | s[16] >>> 9;\n      b43 = s[16] << 23 | s[17] >>> 9;\n      b24 = s[26] << 25 | s[27] >>> 7;\n      b25 = s[27] << 25 | s[26] >>> 7;\n      b6 = s[36] << 21 | s[37] >>> 11;\n      b7 = s[37] << 21 | s[36] >>> 11;\n      b38 = s[47] << 24 | s[46] >>> 8;\n      b39 = s[46] << 24 | s[47] >>> 8;\n      b30 = s[8] << 27 | s[9] >>> 5;\n      b31 = s[9] << 27 | s[8] >>> 5;\n      b12 = s[18] << 20 | s[19] >>> 12;\n      b13 = s[19] << 20 | s[18] >>> 12;\n      b44 = s[29] << 7 | s[28] >>> 25;\n      b45 = s[28] << 7 | s[29] >>> 25;\n      b26 = s[38] << 8 | s[39] >>> 24;\n      b27 = s[39] << 8 | s[38] >>> 24;\n      b8 = s[48] << 14 | s[49] >>> 18;\n      b9 = s[49] << 14 | s[48] >>> 18;\n      s[0] = b0 ^ ~b2 & b4;\n      s[1] = b1 ^ ~b3 & b5;\n      s[10] = b10 ^ ~b12 & b14;\n      s[11] = b11 ^ ~b13 & b15;\n      s[20] = b20 ^ ~b22 & b24;\n      s[21] = b21 ^ ~b23 & b25;\n      s[30] = b30 ^ ~b32 & b34;\n      s[31] = b31 ^ ~b33 & b35;\n      s[40] = b40 ^ ~b42 & b44;\n      s[41] = b41 ^ ~b43 & b45;\n      s[2] = b2 ^ ~b4 & b6;\n      s[3] = b3 ^ ~b5 & b7;\n      s[12] = b12 ^ ~b14 & b16;\n      s[13] = b13 ^ ~b15 & b17;\n      s[22] = b22 ^ ~b24 & b26;\n      s[23] = b23 ^ ~b25 & b27;\n      s[32] = b32 ^ ~b34 & b36;\n      s[33] = b33 ^ ~b35 & b37;\n      s[42] = b42 ^ ~b44 & b46;\n      s[43] = b43 ^ ~b45 & b47;\n      s[4] = b4 ^ ~b6 & b8;\n      s[5] = b5 ^ ~b7 & b9;\n      s[14] = b14 ^ ~b16 & b18;\n      s[15] = b15 ^ ~b17 & b19;\n      s[24] = b24 ^ ~b26 & b28;\n      s[25] = b25 ^ ~b27 & b29;\n      s[34] = b34 ^ ~b36 & b38;\n      s[35] = b35 ^ ~b37 & b39;\n      s[44] = b44 ^ ~b46 & b48;\n      s[45] = b45 ^ ~b47 & b49;\n      s[6] = b6 ^ ~b8 & b0;\n      s[7] = b7 ^ ~b9 & b1;\n      s[16] = b16 ^ ~b18 & b10;\n      s[17] = b17 ^ ~b19 & b11;\n      s[26] = b26 ^ ~b28 & b20;\n      s[27] = b27 ^ ~b29 & b21;\n      s[36] = b36 ^ ~b38 & b30;\n      s[37] = b37 ^ ~b39 & b31;\n      s[46] = b46 ^ ~b48 & b40;\n      s[47] = b47 ^ ~b49 & b41;\n      s[8] = b8 ^ ~b0 & b2;\n      s[9] = b9 ^ ~b1 & b3;\n      s[18] = b18 ^ ~b10 & b12;\n      s[19] = b19 ^ ~b11 & b13;\n      s[28] = b28 ^ ~b20 & b22;\n      s[29] = b29 ^ ~b21 & b23;\n      s[38] = b38 ^ ~b30 & b32;\n      s[39] = b39 ^ ~b31 & b33;\n      s[48] = b48 ^ ~b40 & b42;\n      s[49] = b49 ^ ~b41 & b43;\n      s[0] ^= RC[n];\n      s[1] ^= RC[n + 1];\n    }\n  };\n\n  if (COMMON_JS) {\n    module.exports = methods;\n  } else {\n    for (var i = 0; i < methodNames.length; ++i) {\n      root[methodNames[i]] = methods[methodNames[i]];\n    }\n  }\n})();","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/treasure-blox/node_modules/browserify-sha3/node_modules/js-sha3/src/sha3.js"],"names":["root","window","NODE_JS","JS_SHA3_NO_NODE_JS","process","versions","node","global","COMMON_JS","JS_SHA3_NO_COMMON_JS","module","exports","ARRAY_BUFFER","JS_SHA3_NO_ARRAY_BUFFER","ArrayBuffer","HEX_CHARS","split","SHAKE_PADDING","CSHAKE_PADDING","KECCAK_PADDING","PADDING","SHIFT","RC","BITS","SHAKE_BITS","OUTPUT_TYPES","CSHAKE_BYTEPAD","Array","isArray","obj","Object","prototype","toString","call","createOutputMethod","bits","padding","outputType","message","Keccak","update","createShakeOutputMethod","outputBits","createCshakeOutputMethod","n","s","methods","createKmacOutputMethod","key","createOutputMethods","method","createMethod","i","length","type","create","createShakeMethod","createCshakeMethod","w","bytepad","createKmacMethod","Kmac","algorithms","name","methodNames","algorithm","j","methodName","push","newMethodName","blocks","reset","block","start","blockCount","byteCount","outputBlocks","extraBytes","notString","constructor","Uint8Array","isView","index","code","charCodeAt","lastByteIndex","f","encode","x","right","o","bytes","unshift","encodeString","str","strs","paddingBytes","zeros","finalize","hex","arrayBuffer","buffer","array","Uint32Array","slice","digest","offset","h","l","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","b16","b17","b18","b19","b20","b21","b22","b23","b24","b25","b26","b27","b28","b29","b30","b31","b32","b33","b34","b35","b36","b37","b38","b39","b40","b41","b42","b43","b44","b45","b46","b47","b48","b49"],"mappings":"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","sourcesContent":["/**\r\n * [js-sha3]{@link https://github.com/emn178/js-sha3}\r\n *\r\n * @version 0.6.1\r\n * @author Chen, Yi-Cyuan [emn178@gmail.com]\r\n * @copyright Chen, Yi-Cyuan 2015-2017\r\n * @license MIT\r\n */\r\n/*jslint bitwise: true */\r\n(function () {\r\n  'use strict';\r\n\r\n  var root = typeof window === 'object' ? window : {};\r\n  var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\r\n  if (NODE_JS) {\r\n    root = global;\r\n  }\r\n  var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === 'object' && module.exports;\r\n  var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\r\n  var HEX_CHARS = '0123456789abcdef'.split('');\r\n  var SHAKE_PADDING = [31, 7936, 2031616, 520093696];\r\n  var CSHAKE_PADDING = [4, 1024, 262144, 67108864];\r\n  var KECCAK_PADDING = [1, 256, 65536, 16777216];\r\n  var PADDING = [6, 1536, 393216, 100663296];\r\n  var SHIFT = [0, 8, 16, 24];\r\n  var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,\r\n            0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,\r\n            2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,\r\n            2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,\r\n            2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];\r\n  var BITS = [224, 256, 384, 512];\r\n  var SHAKE_BITS = [128, 256];\r\n  var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array'];\r\n  var CSHAKE_BYTEPAD = {\r\n    '128': 168,\r\n    '256': 136\r\n  };\r\n\r\n  if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {\r\n    Array.isArray = function (obj) {\r\n      return Object.prototype.toString.call(obj) === '[object Array]';\r\n    };\r\n  }\r\n\r\n  var createOutputMethod = function (bits, padding, outputType) {\r\n    return function (message) {\r\n      return new Keccak(bits, padding, bits).update(message)[outputType]();\r\n    };\r\n  };\r\n\r\n  var createShakeOutputMethod = function (bits, padding, outputType) {\r\n    return function (message, outputBits) {\r\n      return new Keccak(bits, padding, outputBits).update(message)[outputType]();\r\n    };\r\n  };\r\n\r\n  var createCshakeOutputMethod = function (bits, padding, outputType) {\r\n    return function (message, outputBits, n, s) {\r\n      return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();\r\n    };\r\n  };\r\n\r\n  var createKmacOutputMethod = function (bits, padding, outputType) {\r\n    return function (key, message, outputBits, s) {\r\n      return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();\r\n    };\r\n  };\r\n\r\n  var createOutputMethods = function (method, createMethod, bits, padding) {\r\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\r\n      var type = OUTPUT_TYPES[i];\r\n      method[type] = createMethod(bits, padding, type);\r\n    }\r\n    return method;\r\n  };\r\n\r\n  var createMethod = function (bits, padding) {\r\n    var method = createOutputMethod(bits, padding, 'hex');\r\n    method.create = function () {\r\n      return new Keccak(bits, padding, bits);\r\n    };\r\n    method.update = function (message) {\r\n      return method.create().update(message);\r\n    };\r\n    return createOutputMethods(method, createOutputMethod, bits, padding);\r\n  };\r\n\r\n  var createShakeMethod = function (bits, padding) {\r\n    var method = createShakeOutputMethod(bits, padding, 'hex');\r\n    method.create = function (outputBits) {\r\n      return new Keccak(bits, padding, outputBits);\r\n    };\r\n    method.update = function (message, outputBits) {\r\n      return method.create(outputBits).update(message);\r\n    };\r\n    return createOutputMethods(method, createShakeOutputMethod, bits, padding);\r\n  };\r\n\r\n  var createCshakeMethod = function (bits, padding) {\r\n    var w = CSHAKE_BYTEPAD[bits];\r\n    var method = createCshakeOutputMethod(bits, padding, 'hex');\r\n    method.create = function (outputBits, n, s) {\r\n      if (!n && !s) {\r\n        return methods['shake' + bits].create(outputBits);\r\n      } else {\r\n        return new Keccak(bits, padding, outputBits).bytepad([n, s], w);\r\n      }\r\n    };\r\n    method.update = function (message, outputBits, n, s) {\r\n      return method.create(outputBits, n, s).update(message);\r\n    };\r\n    return createOutputMethods(method, createCshakeOutputMethod, bits, padding);\r\n  };\r\n\r\n  var createKmacMethod = function (bits, padding) {\r\n    var w = CSHAKE_BYTEPAD[bits];\r\n    var method = createKmacOutputMethod(bits, padding, 'hex');\r\n    method.create = function (key, outputBits, s) {\r\n      return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);\r\n    };\r\n    method.update = function (key, message, outputBits, s) {\r\n      return method.create(key, outputBits, s).update(message);\r\n    };\r\n    return createOutputMethods(method, createKmacOutputMethod, bits, padding);\r\n  };\r\n\r\n  var algorithms = [\r\n    {name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod},\r\n    {name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod},\r\n    {name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod},\r\n    {name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod},\r\n    {name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod}\r\n  ];\r\n\r\n  var methods = {}, methodNames = [];\r\n\r\n  for (var i = 0; i < algorithms.length; ++i) {\r\n    var algorithm = algorithms[i];\r\n    var bits  = algorithm.bits;\r\n    for (var j = 0; j < bits.length; ++j) {\r\n      var methodName = algorithm.name + '_' + bits[j];\r\n      methodNames.push(methodName);\r\n      methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);\r\n      if (algorithm.name !== 'sha3') {\r\n        var newMethodName = algorithm.name + bits[j];\r\n        methodNames.push(newMethodName);\r\n        methods[newMethodName] = methods[methodName];\r\n      }\r\n    }\r\n  }\r\n\r\n  function Keccak(bits, padding, outputBits) {\r\n    this.blocks = [];\r\n    this.s = [];\r\n    this.padding = padding;\r\n    this.outputBits = outputBits;\r\n    this.reset = true;\r\n    this.block = 0;\r\n    this.start = 0;\r\n    this.blockCount = (1600 - (bits << 1)) >> 5;\r\n    this.byteCount = this.blockCount << 2;\r\n    this.outputBlocks = outputBits >> 5;\r\n    this.extraBytes = (outputBits & 31) >> 3;\r\n\r\n    for (var i = 0; i < 50; ++i) {\r\n      this.s[i] = 0;\r\n    }\r\n  }\r\n\r\n  Keccak.prototype.update = function (message) {\r\n    var notString = typeof message !== 'string';\r\n    if (notString && message.constructor === root.ArrayBuffer) {\r\n      message = new Uint8Array(message);\r\n    }\r\n    var length = message.length;\r\n    if (notString) {\r\n      if (typeof length !== 'number' ||\r\n        !Array.isArray(message) && \r\n        !(ARRAY_BUFFER && ArrayBuffer.isView(message))) {\r\n        throw 'input is invalid type';\r\n      }\r\n    }\r\n    var blocks = this.blocks, byteCount = this.byteCount,\r\n      blockCount = this.blockCount, index = 0, s = this.s, i, code;\r\n\r\n    while (index < length) {\r\n      if (this.reset) {\r\n        this.reset = false;\r\n        blocks[0] = this.block;\r\n        for (i = 1; i < blockCount + 1; ++i) {\r\n          blocks[i] = 0;\r\n        }\r\n      }\r\n      if (notString) {\r\n        for (i = this.start; index < length && i < byteCount; ++index) {\r\n          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\r\n        }\r\n      } else {\r\n        for (i = this.start; index < length && i < byteCount; ++index) {\r\n          code = message.charCodeAt(index);\r\n          if (code < 0x80) {\r\n            blocks[i >> 2] |= code << SHIFT[i++ & 3];\r\n          } else if (code < 0x800) {\r\n            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          } else if (code < 0xd800 || code >= 0xe000) {\r\n            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          } else {\r\n            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n          }\r\n        }\r\n      }\r\n      this.lastByteIndex = i;\r\n      if (i >= byteCount) {\r\n        this.start = i - byteCount;\r\n        this.block = blocks[blockCount];\r\n        for (i = 0; i < blockCount; ++i) {\r\n          s[i] ^= blocks[i];\r\n        }\r\n        f(s);\r\n        this.reset = true;\r\n      } else {\r\n        this.start = i;\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  Keccak.prototype.encode = function (x, right) {\r\n    var o = x & 255, n = 1;\r\n    var bytes = [o];\r\n    x = x >> 8;\r\n    o = x & 255;\r\n    while (o > 0) {\r\n      bytes.unshift(o);\r\n      x = x >> 8;\r\n      o = x & 255;\r\n      ++n;\r\n    }\r\n    if (right) {\r\n      bytes.push(n);\r\n    } else {\r\n      bytes.unshift(n);\r\n    }\r\n    this.update(bytes);\r\n    return bytes.length;\r\n  };\r\n\r\n  Keccak.prototype.encodeString = function (str) {\r\n    str = str || '';\r\n    var notString = typeof str !== 'string';\r\n    if (notString && str.constructor === root.ArrayBuffer) {\r\n      str = new Uint8Array(str);\r\n    }\r\n    var length = str.length;\r\n    if (notString) {\r\n      if (typeof length !== 'number' ||\r\n        !Array.isArray(str) && \r\n        !(ARRAY_BUFFER && ArrayBuffer.isView(str))) {\r\n        throw 'input is invalid type';\r\n      }\r\n    }\r\n    var bytes = 0;\r\n    if (notString) {\r\n      bytes = length;\r\n    } else {\r\n      for (var i = 0; i < str.length; ++i) {\r\n        var code = str.charCodeAt(i);\r\n        if (code < 0x80) {\r\n          bytes += 1;\r\n        } else if (code < 0x800) {\r\n          bytes += 2;\r\n        } else if (code < 0xd800 || code >= 0xe000) {\r\n          bytes += 3;\r\n        } else {\r\n          code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));\r\n          bytes += 4;\r\n        }\r\n      }\r\n    }\r\n    bytes += this.encode(bytes * 8);\r\n    this.update(str);\r\n    return bytes;\r\n  };\r\n\r\n  Keccak.prototype.bytepad = function (strs, w) {\r\n    var bytes = this.encode(w);\r\n    for (var i = 0;i < strs.length;++i) {\r\n      bytes += this.encodeString(strs[i]);\r\n    }\r\n    var paddingBytes = w - bytes % w;\r\n    var zeros = [];\r\n    zeros.length = paddingBytes;\r\n    this.update(zeros);\r\n    return this;\r\n  };\r\n\r\n  Keccak.prototype.finalize = function () {\r\n    var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;\r\n    blocks[i >> 2] |= this.padding[i & 3];\r\n    if (this.lastByteIndex === this.byteCount) {\r\n      blocks[0] = blocks[blockCount];\r\n      for (i = 1; i < blockCount + 1; ++i) {\r\n        blocks[i] = 0;\r\n      }\r\n    }\r\n    blocks[blockCount - 1] |= 0x80000000;\r\n    for (i = 0; i < blockCount; ++i) {\r\n      s[i] ^= blocks[i];\r\n    }\r\n    f(s);\r\n  };\r\n\r\n  Keccak.prototype.toString = Keccak.prototype.hex = function () {\r\n    this.finalize();\r\n\r\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\r\n        extraBytes = this.extraBytes, i = 0, j = 0;\r\n    var hex = '', block;\r\n    while (j < outputBlocks) {\r\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\r\n        block = s[i];\r\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +\r\n               HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +\r\n               HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +\r\n               HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];\r\n      }\r\n      if (j % blockCount === 0) {\r\n        f(s);\r\n        i = 0;\r\n      }\r\n    }\r\n    if (extraBytes) {\r\n      block = s[i];\r\n      if (extraBytes > 0) {\r\n        hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];\r\n      }\r\n      if (extraBytes > 1) {\r\n        hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];\r\n      }\r\n      if (extraBytes > 2) {\r\n        hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];\r\n      }\r\n    }\r\n    return hex;\r\n  };\r\n\r\n  Keccak.prototype.arrayBuffer = function () {\r\n    this.finalize();\r\n\r\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\r\n        extraBytes = this.extraBytes, i = 0, j = 0;\r\n    var bytes = this.outputBits >> 3;\r\n    var buffer;\r\n    if (extraBytes) {\r\n      buffer = new ArrayBuffer((outputBlocks + 1) << 2);\r\n    } else {\r\n      buffer = new ArrayBuffer(bytes);\r\n    }\r\n    var array = new Uint32Array(buffer);\r\n    while (j < outputBlocks) {\r\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\r\n        array[j] = s[i];\r\n      }\r\n      if (j % blockCount === 0) {\r\n        f(s);\r\n      }\r\n    }\r\n    if (extraBytes) {\r\n      array[i] = s[i];\r\n      buffer = buffer.slice(0, bytes);\r\n    }\r\n    return buffer;\r\n  };\r\n\r\n  Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;\r\n\r\n  Keccak.prototype.digest = Keccak.prototype.array = function () {\r\n    this.finalize();\r\n\r\n    var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,\r\n        extraBytes = this.extraBytes, i = 0, j = 0;\r\n    var array = [], offset, block;\r\n    while (j < outputBlocks) {\r\n      for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {\r\n        offset = j << 2;\r\n        block = s[i];\r\n        array[offset] = block & 0xFF;\r\n        array[offset + 1] = (block >> 8) & 0xFF;\r\n        array[offset + 2] = (block >> 16) & 0xFF;\r\n        array[offset + 3] = (block >> 24) & 0xFF;\r\n      }\r\n      if (j % blockCount === 0) {\r\n        f(s);\r\n      }\r\n    }\r\n    if (extraBytes) {\r\n      offset = j << 2;\r\n      block = s[i];\r\n      if (extraBytes > 0) {\r\n        array[offset] = block & 0xFF;\r\n      }\r\n      if (extraBytes > 1) {\r\n        array[offset + 1] = (block >> 8) & 0xFF;\r\n      }\r\n      if (extraBytes > 2) {\r\n        array[offset + 2] = (block >> 16) & 0xFF;\r\n      }\r\n    }\r\n    return array;\r\n  };\r\n\r\n  function Kmac(bits, padding, outputBits) {\r\n    Keccak.call(this, bits, padding, outputBits);\r\n  }\r\n\r\n  Kmac.prototype = new Keccak();\r\n\r\n  Kmac.prototype.finalize = function () {\r\n    this.encode(this.outputBits, true);\r\n    return Keccak.prototype.finalize.call(this);\r\n  };\r\n\r\n  var f = function (s) {\r\n    var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,\r\n        b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,\r\n        b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,\r\n        b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;\r\n    for (n = 0; n < 48; n += 2) {\r\n      c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];\r\n      c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];\r\n      c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];\r\n      c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];\r\n      c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];\r\n      c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];\r\n      c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];\r\n      c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];\r\n      c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];\r\n      c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];\r\n\r\n      h = c8 ^ ((c2 << 1) | (c3 >>> 31));\r\n      l = c9 ^ ((c3 << 1) | (c2 >>> 31));\r\n      s[0] ^= h;\r\n      s[1] ^= l;\r\n      s[10] ^= h;\r\n      s[11] ^= l;\r\n      s[20] ^= h;\r\n      s[21] ^= l;\r\n      s[30] ^= h;\r\n      s[31] ^= l;\r\n      s[40] ^= h;\r\n      s[41] ^= l;\r\n      h = c0 ^ ((c4 << 1) | (c5 >>> 31));\r\n      l = c1 ^ ((c5 << 1) | (c4 >>> 31));\r\n      s[2] ^= h;\r\n      s[3] ^= l;\r\n      s[12] ^= h;\r\n      s[13] ^= l;\r\n      s[22] ^= h;\r\n      s[23] ^= l;\r\n      s[32] ^= h;\r\n      s[33] ^= l;\r\n      s[42] ^= h;\r\n      s[43] ^= l;\r\n      h = c2 ^ ((c6 << 1) | (c7 >>> 31));\r\n      l = c3 ^ ((c7 << 1) | (c6 >>> 31));\r\n      s[4] ^= h;\r\n      s[5] ^= l;\r\n      s[14] ^= h;\r\n      s[15] ^= l;\r\n      s[24] ^= h;\r\n      s[25] ^= l;\r\n      s[34] ^= h;\r\n      s[35] ^= l;\r\n      s[44] ^= h;\r\n      s[45] ^= l;\r\n      h = c4 ^ ((c8 << 1) | (c9 >>> 31));\r\n      l = c5 ^ ((c9 << 1) | (c8 >>> 31));\r\n      s[6] ^= h;\r\n      s[7] ^= l;\r\n      s[16] ^= h;\r\n      s[17] ^= l;\r\n      s[26] ^= h;\r\n      s[27] ^= l;\r\n      s[36] ^= h;\r\n      s[37] ^= l;\r\n      s[46] ^= h;\r\n      s[47] ^= l;\r\n      h = c6 ^ ((c0 << 1) | (c1 >>> 31));\r\n      l = c7 ^ ((c1 << 1) | (c0 >>> 31));\r\n      s[8] ^= h;\r\n      s[9] ^= l;\r\n      s[18] ^= h;\r\n      s[19] ^= l;\r\n      s[28] ^= h;\r\n      s[29] ^= l;\r\n      s[38] ^= h;\r\n      s[39] ^= l;\r\n      s[48] ^= h;\r\n      s[49] ^= l;\r\n\r\n      b0 = s[0];\r\n      b1 = s[1];\r\n      b32 = (s[11] << 4) | (s[10] >>> 28);\r\n      b33 = (s[10] << 4) | (s[11] >>> 28);\r\n      b14 = (s[20] << 3) | (s[21] >>> 29);\r\n      b15 = (s[21] << 3) | (s[20] >>> 29);\r\n      b46 = (s[31] << 9) | (s[30] >>> 23);\r\n      b47 = (s[30] << 9) | (s[31] >>> 23);\r\n      b28 = (s[40] << 18) | (s[41] >>> 14);\r\n      b29 = (s[41] << 18) | (s[40] >>> 14);\r\n      b20 = (s[2] << 1) | (s[3] >>> 31);\r\n      b21 = (s[3] << 1) | (s[2] >>> 31);\r\n      b2 = (s[13] << 12) | (s[12] >>> 20);\r\n      b3 = (s[12] << 12) | (s[13] >>> 20);\r\n      b34 = (s[22] << 10) | (s[23] >>> 22);\r\n      b35 = (s[23] << 10) | (s[22] >>> 22);\r\n      b16 = (s[33] << 13) | (s[32] >>> 19);\r\n      b17 = (s[32] << 13) | (s[33] >>> 19);\r\n      b48 = (s[42] << 2) | (s[43] >>> 30);\r\n      b49 = (s[43] << 2) | (s[42] >>> 30);\r\n      b40 = (s[5] << 30) | (s[4] >>> 2);\r\n      b41 = (s[4] << 30) | (s[5] >>> 2);\r\n      b22 = (s[14] << 6) | (s[15] >>> 26);\r\n      b23 = (s[15] << 6) | (s[14] >>> 26);\r\n      b4 = (s[25] << 11) | (s[24] >>> 21);\r\n      b5 = (s[24] << 11) | (s[25] >>> 21);\r\n      b36 = (s[34] << 15) | (s[35] >>> 17);\r\n      b37 = (s[35] << 15) | (s[34] >>> 17);\r\n      b18 = (s[45] << 29) | (s[44] >>> 3);\r\n      b19 = (s[44] << 29) | (s[45] >>> 3);\r\n      b10 = (s[6] << 28) | (s[7] >>> 4);\r\n      b11 = (s[7] << 28) | (s[6] >>> 4);\r\n      b42 = (s[17] << 23) | (s[16] >>> 9);\r\n      b43 = (s[16] << 23) | (s[17] >>> 9);\r\n      b24 = (s[26] << 25) | (s[27] >>> 7);\r\n      b25 = (s[27] << 25) | (s[26] >>> 7);\r\n      b6 = (s[36] << 21) | (s[37] >>> 11);\r\n      b7 = (s[37] << 21) | (s[36] >>> 11);\r\n      b38 = (s[47] << 24) | (s[46] >>> 8);\r\n      b39 = (s[46] << 24) | (s[47] >>> 8);\r\n      b30 = (s[8] << 27) | (s[9] >>> 5);\r\n      b31 = (s[9] << 27) | (s[8] >>> 5);\r\n      b12 = (s[18] << 20) | (s[19] >>> 12);\r\n      b13 = (s[19] << 20) | (s[18] >>> 12);\r\n      b44 = (s[29] << 7) | (s[28] >>> 25);\r\n      b45 = (s[28] << 7) | (s[29] >>> 25);\r\n      b26 = (s[38] << 8) | (s[39] >>> 24);\r\n      b27 = (s[39] << 8) | (s[38] >>> 24);\r\n      b8 = (s[48] << 14) | (s[49] >>> 18);\r\n      b9 = (s[49] << 14) | (s[48] >>> 18);\r\n\r\n      s[0] = b0 ^ (~b2 & b4);\r\n      s[1] = b1 ^ (~b3 & b5);\r\n      s[10] = b10 ^ (~b12 & b14);\r\n      s[11] = b11 ^ (~b13 & b15);\r\n      s[20] = b20 ^ (~b22 & b24);\r\n      s[21] = b21 ^ (~b23 & b25);\r\n      s[30] = b30 ^ (~b32 & b34);\r\n      s[31] = b31 ^ (~b33 & b35);\r\n      s[40] = b40 ^ (~b42 & b44);\r\n      s[41] = b41 ^ (~b43 & b45);\r\n      s[2] = b2 ^ (~b4 & b6);\r\n      s[3] = b3 ^ (~b5 & b7);\r\n      s[12] = b12 ^ (~b14 & b16);\r\n      s[13] = b13 ^ (~b15 & b17);\r\n      s[22] = b22 ^ (~b24 & b26);\r\n      s[23] = b23 ^ (~b25 & b27);\r\n      s[32] = b32 ^ (~b34 & b36);\r\n      s[33] = b33 ^ (~b35 & b37);\r\n      s[42] = b42 ^ (~b44 & b46);\r\n      s[43] = b43 ^ (~b45 & b47);\r\n      s[4] = b4 ^ (~b6 & b8);\r\n      s[5] = b5 ^ (~b7 & b9);\r\n      s[14] = b14 ^ (~b16 & b18);\r\n      s[15] = b15 ^ (~b17 & b19);\r\n      s[24] = b24 ^ (~b26 & b28);\r\n      s[25] = b25 ^ (~b27 & b29);\r\n      s[34] = b34 ^ (~b36 & b38);\r\n      s[35] = b35 ^ (~b37 & b39);\r\n      s[44] = b44 ^ (~b46 & b48);\r\n      s[45] = b45 ^ (~b47 & b49);\r\n      s[6] = b6 ^ (~b8 & b0);\r\n      s[7] = b7 ^ (~b9 & b1);\r\n      s[16] = b16 ^ (~b18 & b10);\r\n      s[17] = b17 ^ (~b19 & b11);\r\n      s[26] = b26 ^ (~b28 & b20);\r\n      s[27] = b27 ^ (~b29 & b21);\r\n      s[36] = b36 ^ (~b38 & b30);\r\n      s[37] = b37 ^ (~b39 & b31);\r\n      s[46] = b46 ^ (~b48 & b40);\r\n      s[47] = b47 ^ (~b49 & b41);\r\n      s[8] = b8 ^ (~b0 & b2);\r\n      s[9] = b9 ^ (~b1 & b3);\r\n      s[18] = b18 ^ (~b10 & b12);\r\n      s[19] = b19 ^ (~b11 & b13);\r\n      s[28] = b28 ^ (~b20 & b22);\r\n      s[29] = b29 ^ (~b21 & b23);\r\n      s[38] = b38 ^ (~b30 & b32);\r\n      s[39] = b39 ^ (~b31 & b33);\r\n      s[48] = b48 ^ (~b40 & b42);\r\n      s[49] = b49 ^ (~b41 & b43);\r\n\r\n      s[0] ^= RC[n];\r\n      s[1] ^= RC[n + 1];\r\n    }\r\n  };\r\n\r\n  if (COMMON_JS) {\r\n    module.exports = methods;\r\n  } else {\r\n    for (var i = 0; i < methodNames.length; ++i) {\r\n      root[methodNames[i]] = methods[methodNames[i]];\r\n    }\r\n  }\r\n})();\r\n"]},"metadata":{},"sourceType":"script"}