import { IEvents } from "@walletconnect/jsonrpc-types";
import { Logger } from "pino";
import { IClient } from "./client";
import { Reason } from "./misc";
export declare namespace StateEvent {
    interface Created<T> {
        topic: string;
        sequence: T;
    }
    interface Updated<T> {
        topic: string;
        sequence: T;
        update: Partial<T>;
    }
    interface Deleted<T> {
        topic: string;
        sequence: T;
        reason: Reason;
    }
}
export declare abstract class IState<Sequence> extends IEvents {
    client: IClient;
    logger: Logger;
    name: string;
    abstract sequences: Map<string, Sequence>;
    abstract readonly context: string;
    abstract readonly length: number;
    abstract readonly topics: string[];
    abstract readonly values: Sequence[];
    constructor(client: IClient, logger: Logger, name: string);
    abstract init(): Promise<void>;
    abstract set(topic: string, sequence: Sequence): Promise<void>;
    abstract get(topic: string): Promise<Sequence>;
    abstract update(topic: string, update: Partial<Sequence>): Promise<void>;
    abstract delete(topic: string, reason: Reason): Promise<void>;
}
//# sourceMappingURL=state.d.ts.map