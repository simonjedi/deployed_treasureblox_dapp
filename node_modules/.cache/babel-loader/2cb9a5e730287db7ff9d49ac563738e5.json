{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/treasure-blox/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'; // first we'll require web3\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar Web3 = require('web3'); // next we'll create a new instance of web3.\n\n\nvar web3 = new Web3(); // get accounts\n\nconst accounts = await web3.eth.getAccounts(); // Set the provider\n\nweb3.setProvider(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n\nconst abi = require('./TreasureBlox.abi.json');\n\nconst mepAddress = '0xd9145CCE52D386f254917e481eB44e9943F39138';\nconst contract = new web3.eth.Contract(abi, mepAddress);\n\nrunExample = async () => {\n  const {\n    accounts,\n    contract\n  } = this.state; // Stores a given value, 5 by default.\n\n  await contract.methods.set(5).send({\n    from: accounts[0]\n  }); // Get the value from the contract to prove it worked.\n\n  const response = await contract.methods.get().call();\n  const decimals = await contract.methods.decimals().call().then(console.log('Yes'));\n  const bal = await contract.methods.balanceOf(accounts[0]).call();\n  const owner = await contract.methods._owner().call();\n  const marketingWallet = await contract.methods.marketingWallet().call().then(console.log('marketing Wallet Complete'));\n  const games = await contract.methods.Games(1).call().then(console.log('games check complete')); // const games = await contract.methods.Games(1).call();\n  // Update state with the result.\n\n  this.setState({\n    storageValue: response,\n    account: accounts[0],\n    decimals: decimals,\n    bal: bal,\n    owner: owner,\n    marketingWallet: marketingWallet,\n    games: games\n  });\n};\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 66,\n  columnNumber: 3\n}, this), document.getElementById('root')); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/treasure-blox/src/index.js"],"names":["React","ReactDOM","App","reportWebVitals","Web3","require","web3","accounts","eth","getAccounts","setProvider","providers","WebsocketProvider","abi","mepAddress","contract","Contract","runExample","state","methods","set","send","from","response","get","call","decimals","then","console","log","bal","balanceOf","owner","_owner","marketingWallet","games","Games","setState","storageValue","account","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAO,sCAAP,C,CAEA;;;;AACA,IAAIC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB,C,CAEA;;;AACA,IAAIC,IAAI,GAAG,IAAIF,IAAJ,EAAX,C,CAEA;;AACA,MAAMG,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,WAAT,EAAvB,C,CAEA;;AACAH,IAAI,CAACI,WAAL,CAAiB,IAAIN,IAAI,CAACO,SAAL,CAAeC,iBAAnB,CAAqC,qBAArC,CAAjB;;AAGA,MAAMC,GAAG,GAAGR,OAAO,CAAC,yBAAD,CAAnB;;AACA,MAAMS,UAAU,GAAG,4CAAnB;AAEA,MAAMC,QAAQ,GAAG,IAAIT,IAAI,CAACE,GAAL,CAASQ,QAAb,CAAsBH,GAAtB,EAA0BC,UAA1B,CAAjB;;AAGAG,UAAU,GAAG,YAAY;AACvB,QAAM;AAAEV,IAAAA,QAAF;AAAYQ,IAAAA;AAAZ,MAAyB,KAAKG,KAApC,CADuB,CAGvB;;AACA,QAAMH,QAAQ,CAACI,OAAT,CAAiBC,GAAjB,CAAqB,CAArB,EAAwBC,IAAxB,CAA6B;AAAEC,IAAAA,IAAI,EAAEf,QAAQ,CAAC,CAAD;AAAhB,GAA7B,CAAN,CAJuB,CAMvB;;AACA,QAAMgB,QAAQ,GAAG,MAAMR,QAAQ,CAACI,OAAT,CAAiBK,GAAjB,GAAuBC,IAAvB,EAAvB;AAEA,QAAMC,QAAQ,GAAG,MAAMX,QAAQ,CAACI,OAAT,CAAiBO,QAAjB,GAA4BD,IAA5B,GAAmCE,IAAnC,CAAwCC,OAAO,CAACC,GAAR,CAAY,KAAZ,CAAxC,CAAvB;AAEA,QAAMC,GAAG,GAAG,MAAMf,QAAQ,CAACI,OAAT,CAAiBY,SAAjB,CAA2BxB,QAAQ,CAAC,CAAD,CAAnC,EAAwCkB,IAAxC,EAAlB;AAEA,QAAMO,KAAK,GAAG,MAAMjB,QAAQ,CAACI,OAAT,CAAiBc,MAAjB,GAA0BR,IAA1B,EAApB;AAEA,QAAMS,eAAe,GAAG,MAAMnB,QAAQ,CAACI,OAAT,CAAiBe,eAAjB,GAAmCT,IAAnC,GAA0CE,IAA1C,CAA+CC,OAAO,CAACC,GAAR,CAAY,2BAAZ,CAA/C,CAA9B;AAEA,QAAMM,KAAK,GAAG,MAAMpB,QAAQ,CAACI,OAAT,CAAiBiB,KAAjB,CAAuB,CAAvB,EAA0BX,IAA1B,GAAiCE,IAAjC,CAAsCC,OAAO,CAACC,GAAR,CAAY,sBAAZ,CAAtC,CAApB,CAjBuB,CAqBvB;AAIA;;AACA,OAAKQ,QAAL,CAAc;AAAEC,IAAAA,YAAY,EAAEf,QAAhB;AACZgB,IAAAA,OAAO,EAAEhC,QAAQ,CAAC,CAAD,CADL;AAEZmB,IAAAA,QAAQ,EAACA,QAFG;AAGZI,IAAAA,GAAG,EAACA,GAHQ;AAIZE,IAAAA,KAAK,EAACA,KAJM;AAKZE,IAAAA,eAAe,EAACA,eALJ;AAMZC,IAAAA,KAAK,EAACA;AANM,GAAd;AAOD,CAjCD;;AAsCAlC,QAAQ,CAACuC,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF,E,CAOA;AACA;AACA;;AACAvC,eAAe","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n// first we'll require web3\nvar Web3 = require('web3');\n\n// next we'll create a new instance of web3.\nvar web3 = new Web3();\n\n// get accounts\nconst accounts = await web3.eth.getAccounts();\n\n// Set the provider\nweb3.setProvider(new Web3.providers.WebsocketProvider('ws://localhost:8545')\n);\n\nconst abi = require('./TreasureBlox.abi.json');\nconst mepAddress = '0xd9145CCE52D386f254917e481eB44e9943F39138';\n\nconst contract = new web3.eth.Contract(abi,mepAddress);\n\n\nrunExample = async () => {\n  const { accounts, contract } = this.state;\n\n  // Stores a given value, 5 by default.\n  await contract.methods.set(5).send({ from: accounts[0] });\n\n  // Get the value from the contract to prove it worked.\n  const response = await contract.methods.get().call();\n\n  const decimals = await contract.methods.decimals().call().then(console.log('Yes'));\n\n  const bal = await contract.methods.balanceOf(accounts[0]).call();\n\n  const owner = await contract.methods._owner().call();\n\n  const marketingWallet = await contract.methods.marketingWallet().call().then(console.log('marketing Wallet Complete'));\n\n  const games = await contract.methods.Games(1).call().then(console.log('games check complete'));\n\n\n\n  // const games = await contract.methods.Games(1).call();\n\n\n\n  // Update state with the result.\n  this.setState({ storageValue: response,\n    account: accounts[0],\n    decimals:decimals,\n    bal:bal,\n    owner:owner,\n    marketingWallet:marketingWallet,\n    games:games});\n};\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}