{"ast":null,"code":"// play.js - Marak Squires\n// MIT yo, copy paste us some credit\nif (typeof exports === 'undefined') {\n  /*  the browser version\n       assumes you have already embedded the audio file as an embed tag\n      <embed id = \"hat\" autostart = \"false\" src = \"./wavs/drums/tick.wav\"/>\n      <embed id = \"snare\" autostart = \"false\" src = \"./wavs/drums/snare.wav\"/>\n      <embed id = \"kick\" autostart = \"false\" src = \"./wavs/drums/kick.wav\"/>\n       play.sound('hat'); // plays tick.wav\n      play.sound('snare'); // plays snare.wav\n  */\n  var play = {\n    sound: function (wav) {\n      debug.log(wav);\n      var e = $('#' + wav);\n      debug.log(e);\n      $('#alarm').remove();\n      $(e).attr('autostart', true);\n      $('body').append(e);\n      return wav;\n    }\n  };\n} else {\n  // not the browser, worst env check ever\n  var colors = require('colors'),\n      child_p = require('child_process'),\n      exec = child_p.exec,\n      spawn = child_p.spawn,\n      ee = require('events'),\n      util = require('util'); // play is this\n\n\n  var Play = exports.Play = function Play() {\n    var self = this;\n\n    if (!(this instanceof Play)) {\n      return new Play();\n    }\n\n    ee.EventEmitter.call(this);\n    this.playerList = ['afplay', 'mplayer', 'mpg123', 'mpg321', 'play'];\n    this.playerName = false;\n    this.checked = 0;\n    var i = 0,\n        child; // a hack to check if we have any players available\n\n    for (i = 0, l = this.playerList.length; i < l; i++) {\n      if (!this.playerName) {\n        (function inner(name) {\n          child = exec(name, function (error, stdout, stderr) {\n            self.checked++;\n\n            if (!self.playerName && (error === null || error.code !== 127)) {\n              // if the command was successful, and we didn't have any players yet\n              self.playerName = name;\n              self.emit('checked');\n              return;\n            } // if we went through the last known player, but no match\n\n\n            if (name === self.playerList[self.playerList.length - 1]) {\n              // we are done checking then\n              self.emit('checked');\n            }\n          });\n        })(this.playerList[i]);\n      } // if we already have a player, quit\n      else {\n        break;\n      }\n    }\n  }; // initialize and inherit\n\n\n  util.inherits(Play, ee.EventEmitter); //\n  // Allows the user to manually set a player name\n  //\n\n  Play.prototype.usePlayer = function usePlayer(name) {\n    this.playerName = name;\n  }; //\n  // Have the user player the file, with a callback when it ends\n  //\n\n\n  Play.prototype.sound = function sound(file, callback) {\n    var callback = callback || function () {};\n\n    var self = this; // if there is no player, and we haven't finished checking\n    // wait for the ready, then start\n\n    if (!this.playerName && this.checked !== this.playerList.length) {\n      this.on('checked', function () {\n        self.sound.call(self, file, callback);\n      });\n      return false;\n    } // if we have checked all the players, and none of them were good\n\n\n    if (!this.playerName && this.checked === this.playerList.length) {\n      console.log('No suitable audio player could be found - exiting.'.red);\n      console.log('If you know other cmd line music player than these:'.red, this.playerList);\n      console.log('You can tell us, and will add them (or you can add them yourself)'.red);\n      this.emit('error', new Error('No Suitable Player Exists'.red, this.playerList));\n      return false;\n    } // we should have a valid player name, so we can call it\n\n\n    var command = [file],\n        child = this.player = spawn(this.playerName, command); // tell you what I am playing\n\n    console.log('playing'.magenta + '=>'.yellow + file.cyan); // A listener to handle callbacks, and any weird IO errors\n\n    child.on('exit', function (code, signal) {\n      if (code == null || signal != null || code === 1) {\n        console.log('couldnt play, had an error ' + '[code: ' + code + '] ' + '[signal: ' + signal + '] :' + this.playerName.cyan);\n        this.emit('error', code, signal);\n      } else if (code == 127) {\n        // a could not find command error\n        console.log(self.playerName.cyan + ' doesn\\'t exist!'.red);\n        this.emit('error', code, signal);\n      } else if (code == 2) {\n        // a file IO error\n        console.log(file.cyan + '=>'.yellow + 'could not be read by your player:'.red + self.playerName.cyan);\n        this.emit('error', code, signal);\n      } else if (code == 0) {\n        // exited correctly/completed without errors\n        console.log('completed'.green + '=>'.yellow + file.magenta);\n        callback();\n      } else {\n        // are there other errors?\n        console.log(self.playerName.cyan + ' has an odd error with '.yellow + file.cyan);\n        console.log(arguments);\n        emit('error');\n      }\n    });\n    this.emit('play', true);\n    return true;\n  };\n}","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/treasure-blox/src/play.js"],"names":["exports","play","sound","wav","debug","log","e","$","remove","attr","append","colors","require","child_p","exec","spawn","ee","util","Play","self","EventEmitter","call","playerList","playerName","checked","i","child","l","length","inner","name","error","stdout","stderr","code","emit","inherits","prototype","usePlayer","file","callback","on","console","red","Error","command","player","magenta","yellow","cyan","signal","green","arguments"],"mappings":"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","sourcesContent":["// play.js - Marak Squires\n// MIT yo, copy paste us some credit\n\nif(typeof exports === 'undefined'){\n\n  /*  the browser version\n\n      assumes you have already embedded the audio file as an embed tag\n      <embed id = \"hat\" autostart = \"false\" src = \"./wavs/drums/tick.wav\"/>\n      <embed id = \"snare\" autostart = \"false\" src = \"./wavs/drums/snare.wav\"/>\n      <embed id = \"kick\" autostart = \"false\" src = \"./wavs/drums/kick.wav\"/>\n\n      play.sound('hat'); // plays tick.wav\n      play.sound('snare'); // plays snare.wav\n  */\n  var play = {\n    sound: function ( wav ) {\n      debug.log(wav);\n\n      var e = $('#' + wav);\n      debug.log(e);\n      $('#alarm').remove();\n\n      $(e).attr('autostart',true);\n      $('body').append(e);\n\n\n      return wav;\n    }\n  };\n}\nelse{\n\n  // not the browser, worst env check ever\n  var colors = require('colors'),\n      child_p = require('child_process'),\n      exec = child_p.exec,\n      spawn = child_p.spawn,\n      ee = require('events'),\n      util = require('util');\n\n  // play is this\n  var Play = exports.Play = function Play() {\n    var self = this;\n\n    if (!(this instanceof Play)) {\n      return new Play();\n    }\n\n    ee.EventEmitter.call(this);\n\n    this.playerList = [\n      'afplay',\n      'mplayer',\n      'mpg123',\n      'mpg321',\n      'play',\n    ];\n\n    this.playerName = false;\n    this.checked = 0;\n\n    var i = 0, child;\n\n    // a hack to check if we have any players available\n    for (i = 0, l = this.playerList.length; i < l; i++) {\n      if (!this.playerName) {\n        (function inner (name) {\n        child = exec(name, function (error, stdout, stderr) {\n          self.checked++;\n          if (!self.playerName && (error === null || error.code !== 127 )) {\n            // if the command was successful, and we didn't have any players yet\n            self.playerName = name;\n            self.emit('checked');\n            return;\n          }\n          // if we went through the last known player, but no match\n          if (name === self.playerList[self.playerList.length-1]) {\n            // we are done checking then\n            self.emit('checked');\n          }\n        });\n        })(this.playerList[i]);\n      }\n      // if we already have a player, quit\n      else {\n        break;\n      }\n    }\n  };\n\n  // initialize and inherit\n  util.inherits(Play, ee.EventEmitter);\n\n  //\n  // Allows the user to manually set a player name\n  //\n  Play.prototype.usePlayer = function usePlayer (name) {\n    this.playerName = name;\n  }\n\n\n  //\n  // Have the user player the file, with a callback when it ends\n  //\n  Play.prototype.sound = function sound (file, callback) {\n    var callback = callback || function () {};\n\n    var self = this;\n    // if there is no player, and we haven't finished checking\n    // wait for the ready, then start\n    if (!this.playerName && this.checked !== this.playerList.length) {\n      this.on('checked', function () {\n        self.sound.call(self, file, callback);\n      });\n      return false;\n    }\n\n    // if we have checked all the players, and none of them were good\n    if (!this.playerName && this.checked === this.playerList.length) {\n      console.log('No suitable audio player could be found - exiting.'.red);\n      console.log('If you know other cmd line music player than these:'.red, this.playerList);\n      console.log('You can tell us, and will add them (or you can add them yourself)'.red);\n      this.emit('error', new Error('No Suitable Player Exists'.red, this.playerList));\n      return false;\n    }\n\n    // we should have a valid player name, so we can call it\n    var command = [file],\n        child = this.player = spawn(this.playerName, command);\n\n    // tell you what I am playing\n    console.log('playing'.magenta + '=>'.yellow + file.cyan);\n\n    // A listener to handle callbacks, and any weird IO errors\n    child.on('exit', function (code, signal) {\n      if(code == null || signal != null || code === 1) {\n        console.log('couldnt play, had an error ' + '[code: '+ code + '] ' + '[signal: ' + signal + '] :' + this.playerName.cyan);\n        this.emit('error', code, signal);\n      }\n      else if ( code == 127 ) {\n        // a could not find command error\n        console.log( self.playerName.cyan + ' doesn\\'t exist!'.red );\n        this.emit('error', code, signal);\n      }\n      else if (code == 2) {\n        // a file IO error\n        console.log(file.cyan + '=>'.yellow + 'could not be read by your player:'.red + self.playerName.cyan)\n        this.emit('error', code, signal);\n      }\n      else if (code == 0) {\n        // exited correctly/completed without errors\n        console.log( 'completed'.green + '=>'.yellow + file.magenta);\n        callback();\n      }\n      else {\n        // are there other errors?\n        console.log( self.playerName.cyan + ' has an odd error with '.yellow + file.cyan);\n        console.log(arguments);\n        emit('error');\n      }\n    });\n    this.emit('play', true);\n    return true;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module"}