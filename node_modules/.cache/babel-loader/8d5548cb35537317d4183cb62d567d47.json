{"ast":null,"code":"import Web3 from \"web3\";\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n      const Moralis = require('moralis');\n\n      const users = new Web3(window.ethereum);\n      const web3 = await Moralis.users.authenticate({\n        provider: \"walletconnect\"\n      });\n\n      try {\n        // Request account access if needed\n        const user = await Moralis.web3.authenticate({\n          provider: \"walletconnect\"\n        });\n        const web3 = await Moralis.Web3.authenticate({\n          provider: \"walletconnect\"\n        }); // const web3 = await Moralis.enableWeb3({ provider: \"walletconnect\" });\n\n        await window.ethereum.enable(); // Accounts now exposed\n\n        resolve(web3);\n      } catch (error) {\n        reject(error);\n      }\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n      // Use Mist/MetaMask's provider.\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3);\n    } // Fallback to localhost; use dev console port by default...\n    else {\n      // const provider = new Web3.providers.HttpProvider('https://mainnet.meter.io:8667');\n      const provider = new Web3.providers.HttpProvider('https://data-seed-prebsc-1-s1.binance.org:8545/');\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n});\n\nexport default getWeb3;","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/getWeb3.js"],"names":["Web3","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","Moralis","require","users","web3","authenticate","provider","user","enable","error","console","log","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAIA,MAAMC,OAAO,GAAG,MACd,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C;AACA,QAAID,MAAM,CAACE,QAAX,EAAqB;AACnB,YAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,YAAMC,KAAK,GAAG,IAAIV,IAAJ,CAASK,MAAM,CAACE,QAAhB,CAAd;AACA,YAAMI,IAAI,GAAG,MAAMH,OAAO,CAACE,KAAR,CAAcE,YAAd,CAA2B;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAA3B,CAAnB;;AAGA,UAAI;AACF;AACA,cAAMC,IAAI,GAAG,MAAMN,OAAO,CAACG,IAAR,CAAaC,YAAb,CAA0B;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAA1B,CAAnB;AACA,cAAMF,IAAI,GAAG,MAAMH,OAAO,CAACR,IAAR,CAAaY,YAAb,CAA0B;AAAEC,UAAAA,QAAQ,EAAE;AAAZ,SAA1B,CAAnB,CAHE,CAKF;;AAEA,cAAMR,MAAM,CAACE,QAAP,CAAgBQ,MAAhB,EAAN,CAPE,CASF;;AACAZ,QAAAA,OAAO,CAACQ,IAAD,CAAP;AAED,OAZD,CAYE,OAAOK,KAAP,EAAc;AACdZ,QAAAA,MAAM,CAACY,KAAD,CAAN;AACD;AACF,KAtBD,CAuBA;AAvBA,SAwBK,IAAIX,MAAM,CAACM,IAAX,EAAiB;AACpB;AACA,YAAMA,IAAI,GAAGN,MAAM,CAACM,IAApB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAf,MAAAA,OAAO,CAACQ,IAAD,CAAP;AAED,KANI,CAOL;AAPK,SAQA;AAEH;AAEA,YAAME,QAAQ,GAAG,IAAIb,IAAI,CAACmB,SAAL,CAAeC,YAAnB,CAAgC,iDAAhC,CAAjB;AAEA,YAAMT,IAAI,GAAG,IAAIX,IAAJ,CAASa,QAAT,CAAb;AACAI,MAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAf,MAAAA,OAAO,CAACQ,IAAD,CAAP;AACD;AACF,GA5CD;AA6CD,CA/CD,CADF;;AAmDA,eAAeV,OAAf","sourcesContent":["import Web3 from \"web3\";\n\n\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const Moralis = require('moralis');\n\n        const users = new Web3(window.ethereum);\n        const web3 = await Moralis.users.authenticate({ provider: \"walletconnect\" });\n\n\n        try {\n          // Request account access if needed\n          const user = await Moralis.web3.authenticate({ provider: \"walletconnect\" });\n          const web3 = await Moralis.Web3.authenticate({ provider: \"walletconnect\" });\n\n          // const web3 = await Moralis.enableWeb3({ provider: \"walletconnect\" });\n\n          await window.ethereum.enable();\n\n          // Accounts now exposed\n          resolve(web3);\n\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n\n        // const provider = new Web3.providers.HttpProvider('https://mainnet.meter.io:8667');\n\n        const provider = new Web3.providers.HttpProvider('https://data-seed-prebsc-1-s1.binance.org:8545/');\n\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}