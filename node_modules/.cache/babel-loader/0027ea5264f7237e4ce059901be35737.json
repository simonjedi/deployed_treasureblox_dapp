{"ast":null,"code":"const THREE = require('three');\n\nconst config = require('./config');\n\nclass Block {\n  constructor(lastBlock = null, shouldReplace = false) {\n    this.MOVE_AMOUNT = 12;\n    this.dimension = {};\n    this.position = {};\n    let color = null;\n    let axis = null;\n    const blockConfig = config.block; // set the dimensions from the target block, or defaults.\n\n    let height, width, depth;\n    let x, y, z;\n\n    if (lastBlock) {\n      width = lastBlock.dimension.width;\n      height = lastBlock.dimension.height;\n      depth = lastBlock.dimension.depth;\n      x = lastBlock.position.x;\n      z = lastBlock.position.z;\n\n      if (shouldReplace === true) {\n        y = lastBlock.position.y;\n        color = lastBlock.color.getHex();\n        axis = lastBlock.axis;\n      } else {\n        y = lastBlock.position.y + blockConfig.initHeight;\n      }\n    } else {\n      width = blockConfig.initWidth;\n      height = blockConfig.initHeight;\n      depth = blockConfig.initDepth;\n      x = 0;\n      y = height;\n      z = 0;\n    }\n\n    this.dimension.width = width;\n    this.dimension.height = height;\n    this.dimension.depth = depth;\n    this.position.x = x;\n    this.position.y = y;\n    this.position.z = z;\n\n    if (axis === null) {\n      let random = Math.random();\n      axis = random < 0.5 ? 'x' : 'z';\n    }\n\n    this.axis = axis;\n\n    if (lastBlock && !shouldReplace) {\n      this.position[axis] = (Math.random() > 0.5 ? 1 : -1) * this.MOVE_AMOUNT;\n    }\n\n    this.colorOffset = Math.round(Math.random() * 100); // set color\n\n    this.color = new THREE.Color(color === null ? Math.random() * 0xffffff : color); // set direction\n\n    let speed = blockConfig.initSpeed + blockConfig.acceleration;\n    speed = Math.min(speed, blockConfig.maxSpeed);\n    this.speed = -speed;\n    this.direction = this.speed; // create block\n\n    let geometry = new THREE.BoxGeometry(this.dimension.width, this.dimension.height, this.dimension.depth);\n    geometry.applyMatrix(new THREE.Matrix4().makeTranslation(this.dimension.width / 2, this.dimension.height / 2, this.dimension.depth / 2));\n    this.material = new THREE.MeshToonMaterial({\n      color: this.color,\n      shading: THREE.FlatShading\n    });\n    this.mesh = new THREE.Mesh(geometry, this.material);\n    this.mesh.position.set(this.position.x, this.position.y, this.position.z);\n  }\n\n  getAxis() {\n    let dimensionAlongAxis = null;\n\n    switch (this.axis) {\n      case 'x':\n        dimensionAlongAxis = 'width';\n        break;\n\n      case 'z':\n        dimensionAlongAxis = 'depth';\n    }\n\n    return {\n      axis: this.axis,\n      dimensionAlongAxis\n    };\n  }\n\n}\n\nclass NormalBlock extends Block {\n  constructor(lastBlock, shouldReplace = false) {\n    super(lastBlock, shouldReplace);\n  }\n\n  reverseDirection() {\n    this.direction = this.direction > 0 ? this.speed : Math.abs(this.speed);\n  }\n\n  tick(speed = 0) {\n    let value = this.position[this.axis];\n\n    if (value > this.MOVE_AMOUNT || value < -this.MOVE_AMOUNT) {\n      this.reverseDirection();\n    }\n\n    this.position[this.axis] += this.direction + this.direction * speed;\n    this.mesh.position[this.axis] = this.position[this.axis];\n  }\n\n}\n\nclass FallingBlock extends Block {\n  constructor(lastBlock) {\n    super(lastBlock, true);\n    this.speed *= 2;\n    this.direction = this.speed;\n  }\n\n  tick() {\n    let value = this.position.y;\n    this.position.y -= Math.abs(this.direction);\n    this.mesh.rotation.z += this.direction / 6;\n    this.mesh.position.y = this.position.y;\n  }\n\n}\n\nmodule.exports = {\n  NormalBlock,\n  FallingBlock\n};","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/BloxStack/block.js"],"names":["THREE","require","config","Block","constructor","lastBlock","shouldReplace","MOVE_AMOUNT","dimension","position","color","axis","blockConfig","block","height","width","depth","x","y","z","getHex","initHeight","initWidth","initDepth","random","Math","colorOffset","round","Color","speed","initSpeed","acceleration","min","maxSpeed","direction","geometry","BoxGeometry","applyMatrix","Matrix4","makeTranslation","material","MeshToonMaterial","shading","FlatShading","mesh","Mesh","set","getAxis","dimensionAlongAxis","NormalBlock","reverseDirection","abs","tick","value","FallingBlock","rotation","module","exports"],"mappings":"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","sourcesContent":["const THREE = require('three');\n\nconst config = require('./config');\n\nclass Block {\n  constructor(lastBlock=null, shouldReplace=false) {\n    this.MOVE_AMOUNT = 12;\n\n    this.dimension = {};\n    this.position = {};\n    let color = null;\n    let axis = null;\n\n    const blockConfig = config.block;\n\n    // set the dimensions from the target block, or defaults.\n    let height, width, depth;\n    let x,y,z;\n\n    if (lastBlock){\n      width = lastBlock.dimension.width;\n      height = lastBlock.dimension.height;\n      depth = lastBlock.dimension.depth;\n\n      x = lastBlock.position.x;\n      z = lastBlock.position.z;\n\n      if (shouldReplace === true) {\n        y = lastBlock.position.y;\n\n        color = lastBlock.color.getHex();\n        axis = lastBlock.axis;\n      } else {\n        y = lastBlock.position.y + blockConfig.initHeight;\n      }\n\n    } else {\n      width = blockConfig.initWidth;\n      height = blockConfig.initHeight;\n      depth = blockConfig.initDepth;\n\n      x = 0;\n      y = height;\n      z = 0;\n    }\n    this.dimension.width = width;\n    this.dimension.height = height;\n    this.dimension.depth = depth;\n\n    this.position.x = x;\n    this.position.y = y;\n    this.position.z = z;\n\n    if (axis === null) {\n      let random = Math.random();\n      axis = random < 0.5 ? 'x': 'z';\n    }\n    this.axis = axis;\n\n    if (lastBlock && !shouldReplace) {\n      this.position[axis] = ((Math.random() > 0.5) ? 1 : -1) * this.MOVE_AMOUNT;\n    }\n\n    this.colorOffset = Math.round(Math.random() * 100);\n\n    // set color\n    this.color = new THREE.Color(\n      (color === null) ? (Math.random() * 0xffffff) : color\n    );\n\n    // set direction\n    let speed = blockConfig.initSpeed + blockConfig.acceleration;\n    speed = Math.min(speed, blockConfig.maxSpeed);\n    this.speed = -speed;\n    this.direction = this.speed;\n\n    // create block\n    let geometry = new THREE.BoxGeometry(this.dimension.width, this.dimension.height, this.dimension.depth);\n    geometry.applyMatrix(new THREE.Matrix4().makeTranslation(this.dimension.width / 2,\n      this.dimension.height / 2, this.dimension.depth / 2));\n    this.material = new THREE.MeshToonMaterial({\n      color: this.color,\n      shading: THREE.FlatShading\n    });\n    this.mesh = new THREE.Mesh(geometry, this.material);\n    this.mesh.position.set(this.position.x,\n      this.position.y, this.position.z);\n  }\n\n  getAxis() {\n    let dimensionAlongAxis = null;\n    switch (this.axis) {\n      case 'x':\n        dimensionAlongAxis = 'width';\n        break;\n      case 'z':\n        dimensionAlongAxis = 'depth';\n    }\n    return {\n      axis: this.axis,\n      dimensionAlongAxis,\n    }\n  }\n}\n\n\nclass NormalBlock extends Block {\n  constructor(lastBlock, shouldReplace=false) {\n    super(lastBlock, shouldReplace);\n  }\n\n  reverseDirection() {\n    this.direction = this.direction > 0 ? this.speed : Math.abs(this.speed);\n  }\n\n  tick(speed=0) {\n    let value = this.position[this.axis];\n    if (value > this.MOVE_AMOUNT || value < -this.MOVE_AMOUNT) {\n      this.reverseDirection();\n    }\n    this.position[this.axis] += this.direction + (this.direction * speed);\n    this.mesh.position[this.axis] = this.position[this.axis];\n  }\n}\n\nclass FallingBlock extends Block {\n  constructor(lastBlock) {\n    super(lastBlock, true);\n    this.speed *= 2;\n    this.direction = this.speed;\n  }\n\n  tick() {\n    let value = this.position.y;\n    this.position.y -= Math.abs(this.direction);\n    this.mesh.rotation.z += this.direction/6;\n    this.mesh.position.y = this.position.y;\n  }\n}\n\nmodule.exports = {\n  NormalBlock,\n  FallingBlock,\n}\n"]},"metadata":{},"sourceType":"module"}