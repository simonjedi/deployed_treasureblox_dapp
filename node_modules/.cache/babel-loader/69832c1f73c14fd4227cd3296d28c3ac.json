{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst hdnode_1 = require(\"@meterio/ethers/utils/hdnode\");\n\nconst crypto_1 = require(\"crypto\");\n\nvar mnemonic;\n\n(function (mnemonic) {\n  // see https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n  const VET_DERIVATION_PATH = `m/44'/818'/0'/0`;\n  /** generate BIP39 mnemonic words */\n\n  function generate() {\n    return hdnode_1.entropyToMnemonic(crypto_1.randomBytes(128 / 8)).split(' ');\n  }\n\n  mnemonic.generate = generate;\n  /**\n   * check if the given mnemonic words have valid checksum\n   * @param words mnemonic words\n   */\n\n  function validate(words) {\n    return hdnode_1.isValidMnemonic(words.join(' '));\n  }\n\n  mnemonic.validate = validate;\n  /**\n   * derive private key from mnemonic words according to BIP32.\n   * the derivation path is defined at https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n   */\n\n  function derivePrivateKey(words) {\n    const node = hdnode_1.fromMnemonic(words.join(' '));\n    return Buffer.from(node.derivePath(`${VET_DERIVATION_PATH}/0`).privateKey.slice(2), 'hex');\n  }\n\n  mnemonic.derivePrivateKey = derivePrivateKey;\n})(mnemonic = exports.mnemonic || (exports.mnemonic = {}));","map":{"version":3,"sources":["../../src/cry/mnemonic.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,QAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,IAAiB,QAAjB;;AAAA,CAAA,UAAiB,QAAjB,EAAyB;AACvB;AACA,QAAM,mBAAmB,GAAG,iBAA5B;AAEA;;AACA,WAAgB,QAAhB,GAAwB;AACtB,WAAO,QAAA,CAAA,iBAAA,CAAkB,QAAA,CAAA,WAAA,CAAY,MAAM,CAAlB,CAAlB,EAAwC,KAAxC,CAA8C,GAA9C,CAAP;AACD;;AAFe,EAAA,QAAA,CAAA,QAAA,GAAQ,QAAR;AAIhB;;;AAGG;;AACH,WAAgB,QAAhB,CAAyB,KAAzB,EAAwC;AACtC,WAAO,QAAA,CAAA,eAAA,CAAgB,KAAK,CAAC,IAAN,CAAW,GAAX,CAAhB,CAAP;AACD;;AAFe,EAAA,QAAA,CAAA,QAAA,GAAQ,QAAR;AAIhB;;;AAGG;;AACH,WAAgB,gBAAhB,CAAiC,KAAjC,EAAgD;AAC9C,UAAM,IAAI,GAAG,QAAA,CAAA,YAAA,CAAa,KAAK,CAAC,IAAN,CAAW,GAAX,CAAb,CAAb;AACA,WAAO,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,UAAL,CAAgB,GAAG,mBAAmB,IAAtC,EAA4C,UAA5C,CAAuD,KAAvD,CAA6D,CAA7D,CAAZ,EAA6E,KAA7E,CAAP;AACD;;AAHe,EAAA,QAAA,CAAA,gBAAA,GAAgB,gBAAhB;AAIjB,CAzBD,EAAiB,QAAQ,GAAR,OAAA,CAAA,QAAA,KAAA,OAAA,CAAA,QAAA,GAAQ,EAAR,CAAjB","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst hdnode_1 = require(\"@meterio/ethers/utils/hdnode\");\nconst crypto_1 = require(\"crypto\");\nvar mnemonic;\n(function (mnemonic) {\n    // see https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n    const VET_DERIVATION_PATH = `m/44'/818'/0'/0`;\n    /** generate BIP39 mnemonic words */\n    function generate() {\n        return hdnode_1.entropyToMnemonic(crypto_1.randomBytes(128 / 8)).split(' ');\n    }\n    mnemonic.generate = generate;\n    /**\n     * check if the given mnemonic words have valid checksum\n     * @param words mnemonic words\n     */\n    function validate(words) {\n        return hdnode_1.isValidMnemonic(words.join(' '));\n    }\n    mnemonic.validate = validate;\n    /**\n     * derive private key from mnemonic words according to BIP32.\n     * the derivation path is defined at https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n     */\n    function derivePrivateKey(words) {\n        const node = hdnode_1.fromMnemonic(words.join(' '));\n        return Buffer.from(node.derivePath(`${VET_DERIVATION_PATH}/0`).privateKey.slice(2), 'hex');\n    }\n    mnemonic.derivePrivateKey = derivePrivateKey;\n})(mnemonic = exports.mnemonic || (exports.mnemonic = {}));\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW5lbW9uaWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY3J5L21uZW1vbmljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseURBQWdHO0FBQ2hHLG1DQUFxQztBQUVyQyxJQUFpQixRQUFRLENBeUJ4QjtBQXpCRCxXQUFpQixRQUFRO0lBQ3ZCLG9FQUFvRTtJQUNwRSxNQUFNLG1CQUFtQixHQUFHLGlCQUFpQixDQUFDO0lBRTlDLG9DQUFvQztJQUNwQyxTQUFnQixRQUFRO1FBQ3RCLE9BQU8sMEJBQWlCLENBQUMsb0JBQVcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUZlLGlCQUFRLFdBRXZCLENBQUE7SUFFRDs7O09BR0c7SUFDSCxTQUFnQixRQUFRLENBQUMsS0FBZTtRQUN0QyxPQUFPLHdCQUFlLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFGZSxpQkFBUSxXQUV2QixDQUFBO0lBRUQ7OztPQUdHO0lBQ0gsU0FBZ0IsZ0JBQWdCLENBQUMsS0FBZTtRQUM5QyxNQUFNLElBQUksR0FBRyxxQkFBWSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUMzQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLG1CQUFtQixJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzdGLENBQUM7SUFIZSx5QkFBZ0IsbUJBRy9CLENBQUE7QUFDSCxDQUFDLEVBekJnQixRQUFRLEdBQVIsZ0JBQVEsS0FBUixnQkFBUSxRQXlCeEIifQ=="]},"metadata":{},"sourceType":"script"}