{"ast":null,"code":"import * as ecies25519 from \"@walletconnect/ecies-25519\";\nimport * as encoding from \"@walletconnect/encoding\";\nexport function generateKeyPair() {\n  const keyPair = ecies25519.generateKeyPair();\n  return {\n    privateKey: encoding.arrayToHex(keyPair.privateKey),\n    publicKey: encoding.arrayToHex(keyPair.publicKey)\n  };\n}\nexport function generateRandomBytes32() {\n  return encoding.arrayToHex(ecies25519.randomBytes(32));\n}\nexport function deriveSharedKey(privateKeyA, publicKeyB) {\n  const sharedKey = ecies25519.derive(encoding.hexToArray(privateKeyA), encoding.hexToArray(publicKeyB));\n  return encoding.arrayToHex(sharedKey);\n}\nexport async function sha256(msg) {\n  const hash = await ecies25519.sha256(encoding.hexToArray(msg));\n  return encoding.arrayToHex(hash);\n}\nexport async function encrypt(params) {\n  const msg = encoding.utf8ToArray(params.message);\n  const sharedKey = encoding.hexToArray(params.sharedKey);\n  const publicKey = encoding.hexToArray(params.publicKey);\n  const iv = typeof params.iv !== \"undefined\" ? encoding.hexToArray(params.iv) : undefined;\n  const encrypted = await ecies25519.encryptWithSharedKey(msg, sharedKey, publicKey, iv);\n  return encoding.arrayToHex(encrypted);\n}\nexport async function decrypt(params) {\n  const encrypted = encoding.hexToArray(params.encrypted);\n  const sharedKey = encoding.hexToArray(params.sharedKey);\n  const msg = await ecies25519.decryptWithSharedKey(encrypted, sharedKey);\n  return encoding.arrayToUtf8(msg);\n}","map":{"version":3,"sources":["../../src/crypto.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,UAAZ,MAA4B,4BAA5B;AACA,OAAO,KAAK,QAAZ,MAA0B,yBAA1B;AAEA,OAAM,SAAU,eAAV,GAAyB;AAC7B,QAAM,OAAO,GAAG,UAAU,CAAC,eAAX,EAAhB;AACA,SAAO;AACL,IAAA,UAAU,EAAE,QAAQ,CAAC,UAAT,CAAoB,OAAO,CAAC,UAA5B,CADP;AAEL,IAAA,SAAS,EAAE,QAAQ,CAAC,UAAT,CAAoB,OAAO,CAAC,SAA5B;AAFN,GAAP;AAID;AAED,OAAM,SAAU,qBAAV,GAA+B;AACnC,SAAO,QAAQ,CAAC,UAAT,CAAoB,UAAU,CAAC,WAAX,CAAuB,EAAvB,CAApB,CAAP;AACD;AAED,OAAM,SAAU,eAAV,CAA0B,WAA1B,EAA+C,UAA/C,EAAiE;AACrE,QAAM,SAAS,GAAG,UAAU,CAAC,MAAX,CAChB,QAAQ,CAAC,UAAT,CAAoB,WAApB,CADgB,EAEhB,QAAQ,CAAC,UAAT,CAAoB,UAApB,CAFgB,CAAlB;AAIA,SAAO,QAAQ,CAAC,UAAT,CAAoB,SAApB,CAAP;AACD;AAED,OAAO,eAAe,MAAf,CAAsB,GAAtB,EAAiC;AACtC,QAAM,IAAI,GAAG,MAAM,UAAU,CAAC,MAAX,CAAkB,QAAQ,CAAC,UAAT,CAAoB,GAApB,CAAlB,CAAnB;AACA,SAAO,QAAQ,CAAC,UAAT,CAAoB,IAApB,CAAP;AACD;AAED,OAAO,eAAe,OAAf,CAAuB,MAAvB,EAAwD;AAC7D,QAAM,GAAG,GAAG,QAAQ,CAAC,WAAT,CAAqB,MAAM,CAAC,OAA5B,CAAZ;AACA,QAAM,SAAS,GAAG,QAAQ,CAAC,UAAT,CAAoB,MAAM,CAAC,SAA3B,CAAlB;AACA,QAAM,SAAS,GAAG,QAAQ,CAAC,UAAT,CAAoB,MAAM,CAAC,SAA3B,CAAlB;AACA,QAAM,EAAE,GAAG,OAAO,MAAM,CAAC,EAAd,KAAqB,WAArB,GAAmC,QAAQ,CAAC,UAAT,CAAoB,MAAM,CAAC,EAA3B,CAAnC,GAAoE,SAA/E;AACA,QAAM,SAAS,GAAG,MAAM,UAAU,CAAC,oBAAX,CAAgC,GAAhC,EAAqC,SAArC,EAAgD,SAAhD,EAA2D,EAA3D,CAAxB;AACA,SAAO,QAAQ,CAAC,UAAT,CAAoB,SAApB,CAAP;AACD;AAED,OAAO,eAAe,OAAf,CAAuB,MAAvB,EAAwD;AAC7D,QAAM,SAAS,GAAG,QAAQ,CAAC,UAAT,CAAoB,MAAM,CAAC,SAA3B,CAAlB;AACA,QAAM,SAAS,GAAG,QAAQ,CAAC,UAAT,CAAoB,MAAM,CAAC,SAA3B,CAAlB;AACA,QAAM,GAAG,GAAG,MAAM,UAAU,CAAC,oBAAX,CAAgC,SAAhC,EAA2C,SAA3C,CAAlB;AACA,SAAO,QAAQ,CAAC,WAAT,CAAqB,GAArB,CAAP;AACD","sourceRoot":"","sourcesContent":["import * as ecies25519 from \"@walletconnect/ecies-25519\";\nimport * as encoding from \"@walletconnect/encoding\";\nexport function generateKeyPair() {\n    const keyPair = ecies25519.generateKeyPair();\n    return {\n        privateKey: encoding.arrayToHex(keyPair.privateKey),\n        publicKey: encoding.arrayToHex(keyPair.publicKey),\n    };\n}\nexport function generateRandomBytes32() {\n    return encoding.arrayToHex(ecies25519.randomBytes(32));\n}\nexport function deriveSharedKey(privateKeyA, publicKeyB) {\n    const sharedKey = ecies25519.derive(encoding.hexToArray(privateKeyA), encoding.hexToArray(publicKeyB));\n    return encoding.arrayToHex(sharedKey);\n}\nexport async function sha256(msg) {\n    const hash = await ecies25519.sha256(encoding.hexToArray(msg));\n    return encoding.arrayToHex(hash);\n}\nexport async function encrypt(params) {\n    const msg = encoding.utf8ToArray(params.message);\n    const sharedKey = encoding.hexToArray(params.sharedKey);\n    const publicKey = encoding.hexToArray(params.publicKey);\n    const iv = typeof params.iv !== \"undefined\" ? encoding.hexToArray(params.iv) : undefined;\n    const encrypted = await ecies25519.encryptWithSharedKey(msg, sharedKey, publicKey, iv);\n    return encoding.arrayToHex(encrypted);\n}\nexport async function decrypt(params) {\n    const encrypted = encoding.hexToArray(params.encrypted);\n    const sharedKey = encoding.hexToArray(params.sharedKey);\n    const msg = await ecies25519.decryptWithSharedKey(encrypted, sharedKey);\n    return encoding.arrayToUtf8(msg);\n}\n//# sourceMappingURL=crypto.js.map"]},"metadata":{},"sourceType":"module"}