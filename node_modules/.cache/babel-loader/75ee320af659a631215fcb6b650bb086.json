{"ast":null,"code":"'use strict';\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar elliptic_1 = require(\"elliptic\");\n\nvar address_1 = require(\"./address\");\n\nvar bytes_1 = require(\"./bytes\");\n\nvar hash_1 = require(\"./hash\");\n\nvar keccak256_1 = require(\"./keccak256\");\n\nvar properties_1 = require(\"./properties\");\n\nvar errors = __importStar(require(\"../errors\")); ///////////////////////////////\n\n\nvar _curve = null;\n\nfunction getCurve() {\n  if (!_curve) {\n    _curve = new elliptic_1.ec('secp256k1');\n  }\n\n  return _curve;\n}\n\nvar KeyPair = function () {\n  function KeyPair(privateKey) {\n    var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(privateKey));\n    properties_1.defineReadOnly(this, 'privateKey', bytes_1.hexlify(keyPair.priv.toArray('be', 32)));\n    properties_1.defineReadOnly(this, 'publicKey', '0x' + keyPair.getPublic(false, 'hex'));\n    properties_1.defineReadOnly(this, 'compressedPublicKey', '0x' + keyPair.getPublic(true, 'hex'));\n    properties_1.defineReadOnly(this, 'publicKeyBytes', keyPair.getPublic().encode(null, true));\n  }\n\n  KeyPair.prototype.sign = function (digest) {\n    var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(this.privateKey));\n    var signature = keyPair.sign(bytes_1.arrayify(digest), {\n      canonical: true\n    });\n    return {\n      recoveryParam: signature.recoveryParam,\n      r: bytes_1.hexZeroPad('0x' + signature.r.toString(16), 32),\n      s: bytes_1.hexZeroPad('0x' + signature.s.toString(16), 32),\n      v: 27 + signature.recoveryParam\n    };\n  };\n\n  KeyPair.prototype.computeSharedSecret = function (otherKey) {\n    var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(this.privateKey));\n    var otherKeyPair = getCurve().keyFromPublic(bytes_1.arrayify(computePublicKey(otherKey)));\n    return bytes_1.hexZeroPad('0x' + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n  };\n\n  KeyPair.prototype._addPoint = function (other) {\n    var p0 = getCurve().keyFromPublic(bytes_1.arrayify(this.publicKey));\n    var p1 = getCurve().keyFromPublic(bytes_1.arrayify(other));\n    return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n  };\n\n  return KeyPair;\n}();\n\nexports.KeyPair = KeyPair;\n\nfunction computePublicKey(key, compressed) {\n  var bytes = bytes_1.arrayify(key);\n\n  if (bytes.length === 32) {\n    var keyPair = new KeyPair(bytes);\n\n    if (compressed) {\n      return keyPair.compressedPublicKey;\n    }\n\n    return keyPair.publicKey;\n  } else if (bytes.length === 33) {\n    if (compressed) {\n      return bytes_1.hexlify(bytes);\n    }\n\n    return '0x' + getCurve().keyFromPublic(bytes).getPublic(false, 'hex');\n  } else if (bytes.length === 65) {\n    if (!compressed) {\n      return bytes_1.hexlify(bytes);\n    }\n\n    return '0x' + getCurve().keyFromPublic(bytes).getPublic(true, 'hex');\n  }\n\n  errors.throwError('invalid public or private key', errors.INVALID_ARGUMENT, {\n    arg: 'key',\n    value: '[REDACTED]'\n  });\n  return null;\n}\n\nexports.computePublicKey = computePublicKey;\n\nfunction computeAddress(key) {\n  // Strip off the leading \"0x04\"\n  var publicKey = '0x' + computePublicKey(key).slice(4);\n  return address_1.getAddress('0x' + keccak256_1.keccak256(publicKey).substring(26));\n}\n\nexports.computeAddress = computeAddress;\n\nfunction recoverPublicKey(digest, signature) {\n  var sig = bytes_1.splitSignature(signature);\n  var rs = {\n    r: bytes_1.arrayify(sig.r),\n    s: bytes_1.arrayify(sig.s)\n  };\n  return '0x' + getCurve().recoverPubKey(bytes_1.arrayify(digest), rs, sig.recoveryParam).encode('hex', false);\n}\n\nexports.recoverPublicKey = recoverPublicKey;\n\nfunction recoverAddress(digest, signature) {\n  return computeAddress(recoverPublicKey(bytes_1.arrayify(digest), signature));\n}\n\nexports.recoverAddress = recoverAddress;\n\nfunction verifyMessage(message, signature) {\n  return recoverAddress(hash_1.hashMessage(message), signature);\n}\n\nexports.verifyMessage = verifyMessage;","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/node_modules/@meterio/ethers/utils/secp256k1.js"],"names":["__importStar","mod","__esModule","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","elliptic_1","require","address_1","bytes_1","hash_1","keccak256_1","properties_1","errors","_curve","getCurve","ec","KeyPair","privateKey","keyPair","keyFromPrivate","arrayify","defineReadOnly","hexlify","priv","toArray","getPublic","encode","prototype","sign","digest","signature","canonical","recoveryParam","r","hexZeroPad","toString","s","v","computeSharedSecret","otherKey","otherKeyPair","keyFromPublic","computePublicKey","derive","_addPoint","other","p0","publicKey","p1","pub","add","encodeCompressed","key","compressed","bytes","length","compressedPublicKey","throwError","INVALID_ARGUMENT","arg","computeAddress","slice","getAddress","keccak256","substring","recoverPublicKey","sig","splitSignature","rs","recoverPubKey","recoverAddress","verifyMessage","message","hashMessage"],"mappings":"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","sourcesContent":["'use strict';\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar elliptic_1 = require(\"elliptic\");\nvar address_1 = require(\"./address\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\nvar keccak256_1 = require(\"./keccak256\");\nvar properties_1 = require(\"./properties\");\nvar errors = __importStar(require(\"../errors\"));\n///////////////////////////////\nvar _curve = null;\nfunction getCurve() {\n    if (!_curve) {\n        _curve = new elliptic_1.ec('secp256k1');\n    }\n    return _curve;\n}\nvar KeyPair = /** @class */ (function () {\n    function KeyPair(privateKey) {\n        var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(privateKey));\n        properties_1.defineReadOnly(this, 'privateKey', bytes_1.hexlify(keyPair.priv.toArray('be', 32)));\n        properties_1.defineReadOnly(this, 'publicKey', '0x' + keyPair.getPublic(false, 'hex'));\n        properties_1.defineReadOnly(this, 'compressedPublicKey', '0x' + keyPair.getPublic(true, 'hex'));\n        properties_1.defineReadOnly(this, 'publicKeyBytes', keyPair.getPublic().encode(null, true));\n    }\n    KeyPair.prototype.sign = function (digest) {\n        var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(this.privateKey));\n        var signature = keyPair.sign(bytes_1.arrayify(digest), { canonical: true });\n        return {\n            recoveryParam: signature.recoveryParam,\n            r: bytes_1.hexZeroPad('0x' + signature.r.toString(16), 32),\n            s: bytes_1.hexZeroPad('0x' + signature.s.toString(16), 32),\n            v: 27 + signature.recoveryParam\n        };\n    };\n    KeyPair.prototype.computeSharedSecret = function (otherKey) {\n        var keyPair = getCurve().keyFromPrivate(bytes_1.arrayify(this.privateKey));\n        var otherKeyPair = getCurve().keyFromPublic(bytes_1.arrayify(computePublicKey(otherKey)));\n        return bytes_1.hexZeroPad('0x' + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);\n    };\n    KeyPair.prototype._addPoint = function (other) {\n        var p0 = getCurve().keyFromPublic(bytes_1.arrayify(this.publicKey));\n        var p1 = getCurve().keyFromPublic(bytes_1.arrayify(other));\n        return \"0x\" + p0.pub.add(p1.pub).encodeCompressed(\"hex\");\n    };\n    return KeyPair;\n}());\nexports.KeyPair = KeyPair;\nfunction computePublicKey(key, compressed) {\n    var bytes = bytes_1.arrayify(key);\n    if (bytes.length === 32) {\n        var keyPair = new KeyPair(bytes);\n        if (compressed) {\n            return keyPair.compressedPublicKey;\n        }\n        return keyPair.publicKey;\n    }\n    else if (bytes.length === 33) {\n        if (compressed) {\n            return bytes_1.hexlify(bytes);\n        }\n        return '0x' + getCurve().keyFromPublic(bytes).getPublic(false, 'hex');\n    }\n    else if (bytes.length === 65) {\n        if (!compressed) {\n            return bytes_1.hexlify(bytes);\n        }\n        return '0x' + getCurve().keyFromPublic(bytes).getPublic(true, 'hex');\n    }\n    errors.throwError('invalid public or private key', errors.INVALID_ARGUMENT, { arg: 'key', value: '[REDACTED]' });\n    return null;\n}\nexports.computePublicKey = computePublicKey;\nfunction computeAddress(key) {\n    // Strip off the leading \"0x04\"\n    var publicKey = '0x' + computePublicKey(key).slice(4);\n    return address_1.getAddress('0x' + keccak256_1.keccak256(publicKey).substring(26));\n}\nexports.computeAddress = computeAddress;\nfunction recoverPublicKey(digest, signature) {\n    var sig = bytes_1.splitSignature(signature);\n    var rs = { r: bytes_1.arrayify(sig.r), s: bytes_1.arrayify(sig.s) };\n    return '0x' + getCurve().recoverPubKey(bytes_1.arrayify(digest), rs, sig.recoveryParam).encode('hex', false);\n}\nexports.recoverPublicKey = recoverPublicKey;\nfunction recoverAddress(digest, signature) {\n    return computeAddress(recoverPublicKey(bytes_1.arrayify(digest), signature));\n}\nexports.recoverAddress = recoverAddress;\nfunction verifyMessage(message, signature) {\n    return recoverAddress(hash_1.hashMessage(message), signature);\n}\nexports.verifyMessage = verifyMessage;\n"]},"metadata":{},"sourceType":"script"}