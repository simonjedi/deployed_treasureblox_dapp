{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateChildLogger = exports.formatChildLoggerContext = exports.getLoggerContext = exports.setBrowserLoggerContext = exports.getBrowserLoggerContext = exports.getDefaultLoggerOptions = void 0;\n\nconst constants_1 = require(\"./constants\");\n\nfunction getDefaultLoggerOptions(opts) {\n  return Object.assign(Object.assign({}, opts), {\n    level: (opts === null || opts === void 0 ? void 0 : opts.level) || constants_1.PINO_LOGGER_DEFAULTS.level,\n    prettyPrint: (opts === null || opts === void 0 ? void 0 : opts.prettyPrint) || constants_1.PINO_LOGGER_DEFAULTS.prettyPrint\n  });\n}\n\nexports.getDefaultLoggerOptions = getDefaultLoggerOptions;\n\nfunction getBrowserLoggerContext(logger, customContextKey = constants_1.PINO_CUSTOM_CONTEXT_KEY) {\n  return logger[customContextKey] || \"\";\n}\n\nexports.getBrowserLoggerContext = getBrowserLoggerContext;\n\nfunction setBrowserLoggerContext(logger, context, customContextKey = constants_1.PINO_CUSTOM_CONTEXT_KEY) {\n  logger[customContextKey] = context;\n  return logger;\n}\n\nexports.setBrowserLoggerContext = setBrowserLoggerContext;\n\nfunction getLoggerContext(logger, customContextKey = constants_1.PINO_CUSTOM_CONTEXT_KEY) {\n  let context = \"\";\n\n  if (typeof logger.bindings === \"undefined\") {\n    context = getBrowserLoggerContext(logger, customContextKey);\n  } else {\n    context = logger.bindings().context || \"\";\n  }\n\n  return context;\n}\n\nexports.getLoggerContext = getLoggerContext;\n\nfunction formatChildLoggerContext(logger, childContext, customContextKey = constants_1.PINO_CUSTOM_CONTEXT_KEY) {\n  const parentContext = getLoggerContext(logger, customContextKey);\n  const context = parentContext.trim() ? `${parentContext}/${childContext}` : childContext;\n  return context;\n}\n\nexports.formatChildLoggerContext = formatChildLoggerContext;\n\nfunction generateChildLogger(logger, childContext, customContextKey = constants_1.PINO_CUSTOM_CONTEXT_KEY) {\n  const context = formatChildLoggerContext(logger, childContext, customContextKey);\n  const child = logger.child({\n    context\n  });\n  return setBrowserLoggerContext(child, context, customContextKey);\n}\n\nexports.generateChildLogger = generateChildLogger;","map":{"version":3,"sources":["../../src/utils.ts"],"names":[],"mappings":";;;;;;;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,SAAgB,uBAAhB,CAAwC,IAAxC,EAA4D;AAC1D,SAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACK,IADL,CAAA,EACS;AACP,IAAA,KAAK,EAAE,CAAA,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,KAAN,KAAe,WAAA,CAAA,oBAAA,CAAqB,KADpC;AAEP,IAAA,WAAW,EAAE,CAAA,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,WAAN,KAAqB,WAAA,CAAA,oBAAA,CAAqB;AAFhD,GADT,CAAA;AAKD;;AAND,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AAQA,SAAgB,uBAAhB,CACE,MADF,EAEE,gBAAA,GAA2B,WAAA,CAAA,uBAF7B,EAEoD;AAElD,SAAQ,MAAc,CAAC,gBAAD,CAAd,IAAoC,EAA5C;AACD;;AALD,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AAOA,SAAgB,uBAAhB,CACE,MADF,EAEE,OAFF,EAGE,gBAAA,GAA2B,WAAA,CAAA,uBAH7B,EAGoD;AAEjD,EAAA,MAAc,CAAC,gBAAD,CAAd,GAAmC,OAAnC;AACD,SAAO,MAAP;AACD;;AAPD,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AASA,SAAgB,gBAAhB,CACE,MADF,EAEE,gBAAA,GAA2B,WAAA,CAAA,uBAF7B,EAEoD;AAElD,MAAI,OAAO,GAAG,EAAd;;AAEA,MAAI,OAAO,MAAM,CAAC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C,IAAA,OAAO,GAAG,uBAAuB,CAAC,MAAD,EAAS,gBAAT,CAAjC;AACD,GAFD,MAEO;AACL,IAAA,OAAO,GAAG,MAAM,CAAC,QAAP,GAAkB,OAAlB,IAA6B,EAAvC;AACD;;AACD,SAAO,OAAP;AACD;;AAZD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAcA,SAAgB,wBAAhB,CACE,MADF,EAEE,YAFF,EAGE,gBAAA,GAA2B,WAAA,CAAA,uBAH7B,EAGoD;AAElD,QAAM,aAAa,GAAG,gBAAgB,CAAC,MAAD,EAAS,gBAAT,CAAtC;AACA,QAAM,OAAO,GAAG,aAAa,CAAC,IAAd,KACZ,GAAG,aAAa,IAAI,YAAY,EADpB,GAEZ,YAFJ;AAGA,SAAO,OAAP;AACD;;AAVD,OAAA,CAAA,wBAAA,GAAA,wBAAA;;AAYA,SAAgB,mBAAhB,CACE,MADF,EAEE,YAFF,EAGE,gBAAA,GAA2B,WAAA,CAAA,uBAH7B,EAGoD;AAElD,QAAM,OAAO,GAAG,wBAAwB,CACtC,MADsC,EAEtC,YAFsC,EAGtC,gBAHsC,CAAxC;AAKA,QAAM,KAAK,GAAG,MAAM,CAAC,KAAP,CAAa;AAAE,IAAA;AAAF,GAAb,CAAd;AACA,SAAO,uBAAuB,CAAC,KAAD,EAAQ,OAAR,EAAiB,gBAAjB,CAA9B;AACD;;AAZD,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateChildLogger = exports.formatChildLoggerContext = exports.getLoggerContext = exports.setBrowserLoggerContext = exports.getBrowserLoggerContext = exports.getDefaultLoggerOptions = void 0;\nconst constants_1 = require(\"./constants\");\nfunction getDefaultLoggerOptions(opts) {\n    return Object.assign(Object.assign({}, opts), { level: (opts === null || opts === void 0 ? void 0 : opts.level) || constants_1.PINO_LOGGER_DEFAULTS.level, prettyPrint: (opts === null || opts === void 0 ? void 0 : opts.prettyPrint) || constants_1.PINO_LOGGER_DEFAULTS.prettyPrint });\n}\nexports.getDefaultLoggerOptions = getDefaultLoggerOptions;\nfunction getBrowserLoggerContext(logger, customContextKey = constants_1.PINO_CUSTOM_CONTEXT_KEY) {\n    return logger[customContextKey] || \"\";\n}\nexports.getBrowserLoggerContext = getBrowserLoggerContext;\nfunction setBrowserLoggerContext(logger, context, customContextKey = constants_1.PINO_CUSTOM_CONTEXT_KEY) {\n    logger[customContextKey] = context;\n    return logger;\n}\nexports.setBrowserLoggerContext = setBrowserLoggerContext;\nfunction getLoggerContext(logger, customContextKey = constants_1.PINO_CUSTOM_CONTEXT_KEY) {\n    let context = \"\";\n    if (typeof logger.bindings === \"undefined\") {\n        context = getBrowserLoggerContext(logger, customContextKey);\n    }\n    else {\n        context = logger.bindings().context || \"\";\n    }\n    return context;\n}\nexports.getLoggerContext = getLoggerContext;\nfunction formatChildLoggerContext(logger, childContext, customContextKey = constants_1.PINO_CUSTOM_CONTEXT_KEY) {\n    const parentContext = getLoggerContext(logger, customContextKey);\n    const context = parentContext.trim()\n        ? `${parentContext}/${childContext}`\n        : childContext;\n    return context;\n}\nexports.formatChildLoggerContext = formatChildLoggerContext;\nfunction generateChildLogger(logger, childContext, customContextKey = constants_1.PINO_CUSTOM_CONTEXT_KEY) {\n    const context = formatChildLoggerContext(logger, childContext, customContextKey);\n    const child = logger.child({ context });\n    return setBrowserLoggerContext(child, context, customContextKey);\n}\nexports.generateChildLogger = generateChildLogger;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}