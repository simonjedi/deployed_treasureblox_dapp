{"ast":null,"code":"var _classCallCheck = require(\"/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar EventEmitter = require('events');\n\nvar uuid = require('uuid/v4');\n\nvar dev = process.env.NODE_ENV === 'development';\nvar XHR;\n\nvar HTTPConnection = /*#__PURE__*/function (_EventEmitter) {\n  \"use strict\";\n\n  _inherits(HTTPConnection, _EventEmitter);\n\n  var _super = _createSuper(HTTPConnection);\n\n  function HTTPConnection(_XHR, url, options) {\n    var _this;\n\n    _classCallCheck(this, HTTPConnection);\n\n    _this = _super.call(this);\n    XHR = _XHR;\n    _this.connected = false;\n    _this.subscriptions = false;\n    _this.status = 'loading';\n    _this.url = url;\n    _this.pollId = uuid();\n    setTimeout(function () {\n      return _this.create();\n    }, 0);\n    return _this;\n  }\n\n  _createClass(HTTPConnection, [{\n    key: \"create\",\n    value: function create() {\n      var _this2 = this;\n\n      if (!XHR) return this.emit('error', new Error('No HTTP transport available'));\n      this.on('error', function () {\n        if (_this2.connected) _this2.close();\n      });\n      this.init();\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this3 = this;\n\n      this.send({\n        jsonrpc: '2.0',\n        method: 'eth_syncing',\n        params: [],\n        id: 1\n      }, function (err, response) {\n        if (err) return _this3.emit('error', err);\n\n        _this3.send({\n          jsonrpc: '2.0',\n          id: 1,\n          method: 'eth_pollSubscriptions',\n          params: [_this3.pollId, 'immediate']\n        }, function (err, response) {\n          if (!err) {\n            _this3.subscriptions = true;\n\n            _this3.pollSubscriptions();\n          }\n\n          _this3.connected = true;\n\n          _this3.emit('connect');\n        });\n      });\n    }\n  }, {\n    key: \"pollSubscriptions\",\n    value: function pollSubscriptions() {\n      var _this4 = this;\n\n      this.send({\n        jsonrpc: '2.0',\n        id: 1,\n        method: 'eth_pollSubscriptions',\n        params: [this.pollId]\n      }, function (err, result) {\n        if (err) {\n          _this4.subscriptionTimeout = setTimeout(function () {\n            return _this4.pollSubscriptions();\n          }, 10000);\n          return _this4.emit('error', err);\n        } else {\n          if (!_this4.closed) _this4.subscriptionTimeout = _this4.pollSubscriptions();\n\n          if (result) {\n            result.map(function (p) {\n              var parse;\n\n              try {\n                parse = JSON.parse(p);\n              } catch (e) {\n                parse = false;\n              }\n\n              return parse;\n            }).filter(function (n) {\n              return n;\n            }).forEach(function (p) {\n              return _this4.emit('payload', p);\n            });\n          }\n        }\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      if (dev) console.log('Closing HTTP connection');\n      this.closed = true;\n      this.emit('close');\n      clearTimeout(this.subscriptionTimeout);\n      this.removeAllListeners();\n    }\n  }, {\n    key: \"filterStatus\",\n    value: function filterStatus(res) {\n      if (res.status >= 200 && res.status < 300) return res;\n      var error = new Error(res.statusText);\n      error.res = res;\n      throw error.message;\n    }\n  }, {\n    key: \"error\",\n    value: function error(payload, message) {\n      var code = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      this.emit('payload', {\n        id: payload.id,\n        jsonrpc: payload.jsonrpc,\n        error: {\n          message: message,\n          code: code\n        }\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(payload, internal) {\n      var _this5 = this;\n\n      if (this.closed) return this.error(payload, 'Not connected');\n\n      if (payload.method === 'eth_subscribe') {\n        if (this.subscriptions) {\n          payload.pollId = this.pollId;\n        } else {\n          return this.error(payload, 'Subscriptions are not supported by this HTTP endpoint');\n        }\n      }\n\n      var xhr = new XHR();\n      var responded = false;\n\n      var res = function res(err, result) {\n        if (!responded) {\n          xhr.abort();\n          responded = true;\n\n          if (internal) {\n            internal(err, result);\n          } else {\n            var id = payload.id,\n                jsonrpc = payload.jsonrpc;\n            var load = err ? {\n              id: id,\n              jsonrpc: jsonrpc,\n              error: {\n                message: err.message,\n                code: err.code\n              }\n            } : {\n              id: id,\n              jsonrpc: jsonrpc,\n              result: result\n            };\n\n            _this5.emit('payload', load);\n          }\n        }\n      };\n\n      xhr.open('POST', this.url, true);\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      xhr.timeout = 60 * 1000;\n      xhr.onerror = res;\n      xhr.ontimeout = res;\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState === 4) {\n          try {\n            var response = JSON.parse(xhr.responseText);\n            res(response.error, response.result);\n          } catch (e) {\n            res(e);\n          }\n        }\n      };\n\n      xhr.send(JSON.stringify(payload));\n    }\n  }]);\n\n  return HTTPConnection;\n}(EventEmitter);\n\nmodule.exports = function (XHR) {\n  return function (url, options) {\n    return new HTTPConnection(XHR, url, options);\n  };\n};","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/eth-provider/connections/http.js"],"names":["EventEmitter","require","uuid","dev","process","env","NODE_ENV","XHR","HTTPConnection","_XHR","url","options","connected","subscriptions","status","pollId","setTimeout","create","emit","Error","on","close","init","send","jsonrpc","method","params","id","err","response","pollSubscriptions","result","subscriptionTimeout","closed","map","p","parse","JSON","e","filter","n","forEach","console","log","clearTimeout","removeAllListeners","res","error","statusText","message","payload","code","internal","xhr","responded","abort","load","open","setRequestHeader","timeout","onerror","ontimeout","onreadystatechange","readyState","responseText","stringify","module","exports"],"mappings":"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","sourcesContent":["const EventEmitter = require('events')\nconst uuid = require('uuid/v4')\n\nconst dev = process.env.NODE_ENV === 'development'\n\nlet XHR\n\nclass HTTPConnection extends EventEmitter {\n  constructor (_XHR, url, options) {\n    super()\n    XHR = _XHR\n    this.connected = false\n    this.subscriptions = false\n    this.status = 'loading'\n    this.url = url\n    this.pollId = uuid()\n    setTimeout(() => this.create(), 0)\n  }\n\n  create () {\n    if (!XHR) return this.emit('error', new Error('No HTTP transport available'))\n    this.on('error', () => { if (this.connected) this.close() })\n    this.init()\n  }\n\n  init () {\n    this.send({ jsonrpc: '2.0', method: 'eth_syncing', params: [], id: 1 }, (err, response) => {\n      if (err) return this.emit('error', err)\n      this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId, 'immediate'] }, (err, response) => {\n        if (!err) {\n          this.subscriptions = true\n          this.pollSubscriptions()\n        }\n        this.connected = true\n        this.emit('connect')\n      })\n    })\n  }\n\n  pollSubscriptions () {\n    this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId] }, (err, result) => {\n      if (err) {\n        this.subscriptionTimeout = setTimeout(() => this.pollSubscriptions(), 10000)\n        return this.emit('error', err)\n      } else {\n        if (!this.closed) this.subscriptionTimeout = this.pollSubscriptions()\n        if (result) {\n          result.map(p => {\n            let parse\n            try { parse = JSON.parse(p) } catch (e) { parse = false }\n            return parse\n          }).filter(n => n).forEach(p => this.emit('payload', p))\n        }\n      }\n    })\n  }\n\n  close () {\n    if (dev) console.log('Closing HTTP connection')\n    this.closed = true\n    this.emit('close')\n    clearTimeout(this.subscriptionTimeout)\n    this.removeAllListeners()\n  }\n\n  filterStatus (res) {\n    if (res.status >= 200 && res.status < 300) return res\n    const error = new Error(res.statusText)\n    error.res = res\n    throw error.message\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload, internal) {\n    if (this.closed) return this.error(payload, 'Not connected')\n    if (payload.method === 'eth_subscribe') {\n      if (this.subscriptions) {\n        payload.pollId = this.pollId\n      } else {\n        return this.error(payload, 'Subscriptions are not supported by this HTTP endpoint')\n      }\n    }\n    const xhr = new XHR()\n    let responded = false\n    const res = (err, result) => {\n      if (!responded) {\n        xhr.abort()\n        responded = true\n        if (internal) {\n          internal(err, result)\n        } else {\n          const { id, jsonrpc } = payload\n          const load = err ? { id, jsonrpc, error: { message: err.message, code: err.code } } : { id, jsonrpc, result }\n          this.emit('payload', load)\n        }\n      }\n    }\n    xhr.open('POST', this.url, true)\n    xhr.setRequestHeader('Content-Type', 'application/json')\n    xhr.timeout = 60 * 1000\n    xhr.onerror = res\n    xhr.ontimeout = res\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        try {\n          const response = JSON.parse(xhr.responseText)\n          res(response.error, response.result)\n        } catch (e) {\n          res(e)\n        }\n      }\n    }\n    xhr.send(JSON.stringify(payload))\n  }\n}\n\nmodule.exports = XHR => (url, options) => new HTTPConnection(XHR, url, options)\n"]},"metadata":{},"sourceType":"script"}