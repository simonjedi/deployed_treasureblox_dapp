{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _inherits = require(\"/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/@babel/runtime/helpers/createSuper\");\n\n// const EthQuery = require('ethjs-query')\nvar EthQuery = require('eth-query');\n\nvar EventEmitter = require('events');\n\nvar pify = require('pify');\n\nvar hexUtils = require('./hexUtils');\n\nvar incrementHexNumber = hexUtils.incrementHexNumber;\nvar sec = 1000;\nvar min = 60 * sec;\n\nvar RpcBlockTracker = /*#__PURE__*/function (_EventEmitter) {\n  \"use strict\";\n\n  _inherits(RpcBlockTracker, _EventEmitter);\n\n  var _super = _createSuper(RpcBlockTracker);\n\n  function RpcBlockTracker() {\n    var _this;\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, RpcBlockTracker);\n\n    _this = _super.call(this);\n    if (!opts.provider) throw new Error('RpcBlockTracker - no provider specified.');\n    _this._provider = opts.provider;\n    _this._query = new EthQuery(opts.provider); // config\n\n    _this._pollingInterval = opts.pollingInterval || 4 * sec;\n    _this._syncingTimeout = opts.syncingTimeout || 1 * min; // state\n\n    _this._trackingBlock = null;\n    _this._trackingBlockTimestamp = null;\n    _this._currentBlock = null;\n    _this._isRunning = false; // bind methods for cleaner syntax later\n\n    _this._performSync = _this._performSync.bind(_assertThisInitialized(_this));\n    _this._handleNewBlockNotification = _this._handleNewBlockNotification.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(RpcBlockTracker, [{\n    key: \"getTrackingBlock\",\n    value: function getTrackingBlock() {\n      return this._trackingBlock;\n    }\n  }, {\n    key: \"getCurrentBlock\",\n    value: function getCurrentBlock() {\n      return this._currentBlock;\n    }\n  }, {\n    key: \"awaitCurrentBlock\",\n    value: function () {\n      var _awaitCurrentBlock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this._currentBlock) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this._currentBlock);\n\n              case 2:\n                _context.next = 4;\n                return new Promise(function (resolve) {\n                  return _this2.once('latest', resolve);\n                });\n\n              case 4:\n                return _context.abrupt(\"return\", this._currentBlock);\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function awaitCurrentBlock() {\n        return _awaitCurrentBlock.apply(this, arguments);\n      }\n\n      return awaitCurrentBlock;\n    }()\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var opts,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                opts = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n\n                if (!this._isRunning) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                this._isRunning = true; // if this._currentBlock\n\n                if (!opts.fromBlock) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                _context2.t0 = this;\n                _context2.next = 8;\n                return this._fetchBlockByNumber(opts.fromBlock);\n\n              case 8:\n                _context2.t1 = _context2.sent;\n                _context2.next = 11;\n                return _context2.t0._setTrackingBlock.call(_context2.t0, _context2.t1);\n\n              case 11:\n                _context2.next = 19;\n                break;\n\n              case 13:\n                _context2.t2 = this;\n                _context2.next = 16;\n                return this._fetchLatestBlock();\n\n              case 16:\n                _context2.t3 = _context2.sent;\n                _context2.next = 19;\n                return _context2.t2._setTrackingBlock.call(_context2.t2, _context2.t3);\n\n              case 19:\n                if (!this._provider.on) {\n                  _context2.next = 24;\n                  break;\n                }\n\n                _context2.next = 22;\n                return this._initSubscription();\n\n              case 22:\n                _context2.next = 25;\n                break;\n\n              case 24:\n                this._performSync().catch(function (err) {\n                  if (err) console.error(err);\n                });\n\n              case 25:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function start() {\n        return _start.apply(this, arguments);\n      }\n\n      return start;\n    }()\n  }, {\n    key: \"stop\",\n    value: function () {\n      var _stop = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this._isRunning = false;\n\n                if (!this._provider.on) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                _context3.next = 4;\n                return this._removeSubscription();\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function stop() {\n        return _stop.apply(this, arguments);\n      }\n\n      return stop;\n    }() //\n    // private\n    //\n\n  }, {\n    key: \"_setTrackingBlock\",\n    value: function () {\n      var _setTrackingBlock2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(newBlock) {\n        var previous, now;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(this._trackingBlock && this._trackingBlock.hash === newBlock.hash)) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 2:\n                // check for large timestamp lapse\n                previous = this._trackingBlockTimestamp;\n                now = Date.now(); // check for desynchronization (computer sleep or no internet)\n\n                if (!(previous && now - previous > this._syncingTimeout)) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                this._trackingBlockTimestamp = null;\n                _context4.next = 8;\n                return this._warpToLatest();\n\n              case 8:\n                _context4.next = 13;\n                break;\n\n              case 10:\n                this._trackingBlock = newBlock;\n                this._trackingBlockTimestamp = now;\n                this.emit('block', newBlock);\n\n              case 13:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _setTrackingBlock(_x) {\n        return _setTrackingBlock2.apply(this, arguments);\n      }\n\n      return _setTrackingBlock;\n    }()\n  }, {\n    key: \"_setCurrentBlock\",\n    value: function () {\n      var _setCurrentBlock2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(newBlock) {\n        var oldBlock;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(this._currentBlock && this._currentBlock.hash === newBlock.hash)) {\n                  _context5.next = 2;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\");\n\n              case 2:\n                oldBlock = this._currentBlock;\n                this._currentBlock = newBlock;\n                this.emit('latest', newBlock);\n                this.emit('sync', {\n                  newBlock: newBlock,\n                  oldBlock: oldBlock\n                });\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _setCurrentBlock(_x2) {\n        return _setCurrentBlock2.apply(this, arguments);\n      }\n\n      return _setCurrentBlock;\n    }()\n  }, {\n    key: \"_warpToLatest\",\n    value: function () {\n      var _warpToLatest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.t0 = this;\n                _context6.next = 3;\n                return this._fetchLatestBlock();\n\n              case 3:\n                _context6.t1 = _context6.sent;\n                _context6.next = 6;\n                return _context6.t0._setTrackingBlock.call(_context6.t0, _context6.t1);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _warpToLatest() {\n        return _warpToLatest2.apply(this, arguments);\n      }\n\n      return _warpToLatest;\n    }()\n  }, {\n    key: \"_pollForNextBlock\",\n    value: function () {\n      var _pollForNextBlock2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var _this3 = this;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                setTimeout(function () {\n                  return _this3._performSync();\n                }, this._pollingInterval);\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _pollForNextBlock() {\n        return _pollForNextBlock2.apply(this, arguments);\n      }\n\n      return _pollForNextBlock;\n    }()\n  }, {\n    key: \"_performSync\",\n    value: function () {\n      var _performSync2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var trackingBlock, nextNumber, newBlock;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (this._isRunning) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\");\n\n              case 2:\n                trackingBlock = this.getTrackingBlock();\n\n                if (trackingBlock) {\n                  _context8.next = 5;\n                  break;\n                }\n\n                throw new Error('RpcBlockTracker - tracking block is missing');\n\n              case 5:\n                nextNumber = incrementHexNumber(trackingBlock.number);\n                _context8.prev = 6;\n                _context8.next = 9;\n                return this._fetchBlockByNumber(nextNumber);\n\n              case 9:\n                newBlock = _context8.sent;\n\n                if (!newBlock) {\n                  _context8.next = 16;\n                  break;\n                }\n\n                _context8.next = 13;\n                return this._setTrackingBlock(newBlock);\n\n              case 13:\n                // ask for next block\n                this._performSync();\n\n                _context8.next = 19;\n                break;\n\n              case 16:\n                _context8.next = 18;\n                return this._setCurrentBlock(trackingBlock);\n\n              case 18:\n                // setup poll for next block\n                this._pollForNextBlock();\n\n              case 19:\n                _context8.next = 31;\n                break;\n\n              case 21:\n                _context8.prev = 21;\n                _context8.t0 = _context8[\"catch\"](6);\n\n                if (!(_context8.t0.message.includes('index out of range') || _context8.t0.message.includes(\"Couldn't find block by reference\"))) {\n                  _context8.next = 29;\n                  break;\n                }\n\n                _context8.next = 26;\n                return this._setCurrentBlock(trackingBlock);\n\n              case 26:\n                // setup poll for next block\n                this._pollForNextBlock();\n\n                _context8.next = 31;\n                break;\n\n              case 29:\n                console.error(_context8.t0);\n\n                this._pollForNextBlock();\n\n              case 31:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[6, 21]]);\n      }));\n\n      function _performSync() {\n        return _performSync2.apply(this, arguments);\n      }\n\n      return _performSync;\n    }()\n  }, {\n    key: \"_handleNewBlockNotification\",\n    value: function () {\n      var _handleNewBlockNotification2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(err, notification) {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(notification.id != this._subscriptionId)) {\n                  _context9.next = 2;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\");\n\n              case 2:\n                if (!err) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                this.emit('error', err);\n                _context9.next = 6;\n                return this._removeSubscription();\n\n              case 6:\n                _context9.t0 = this;\n                _context9.next = 9;\n                return this._fetchBlockByNumber(notification.result.number);\n\n              case 9:\n                _context9.t1 = _context9.sent;\n                _context9.next = 12;\n                return _context9.t0._setTrackingBlock.call(_context9.t0, _context9.t1);\n\n              case 12:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function _handleNewBlockNotification(_x3, _x4) {\n        return _handleNewBlockNotification2.apply(this, arguments);\n      }\n\n      return _handleNewBlockNotification;\n    }()\n  }, {\n    key: \"_initSubscription\",\n    value: function () {\n      var _initSubscription2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                this._provider.on('data', this._handleNewBlockNotification);\n\n                _context10.next = 3;\n                return pify(this._provider.sendAsync || this._provider.send)({\n                  jsonrpc: '2.0',\n                  id: new Date().getTime(),\n                  method: 'eth_subscribe',\n                  params: ['newHeads']\n                });\n\n              case 3:\n                result = _context10.sent;\n                this._subscriptionId = result.result;\n\n              case 5:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function _initSubscription() {\n        return _initSubscription2.apply(this, arguments);\n      }\n\n      return _initSubscription;\n    }()\n  }, {\n    key: \"_removeSubscription\",\n    value: function () {\n      var _removeSubscription2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                if (this._subscriptionId) {\n                  _context11.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Not subscribed.\");\n\n              case 2:\n                this._provider.removeListener('data', this._handleNewBlockNotification);\n\n                _context11.next = 5;\n                return pify(this._provider.sendAsync || this._provider.send)({\n                  jsonrpc: '2.0',\n                  id: new Date().getTime(),\n                  method: 'eth_unsubscribe',\n                  params: [this._subscriptionId]\n                });\n\n              case 5:\n                delete this._subscriptionId;\n\n              case 6:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function _removeSubscription() {\n        return _removeSubscription2.apply(this, arguments);\n      }\n\n      return _removeSubscription;\n    }()\n  }, {\n    key: \"_fetchLatestBlock\",\n    value: function _fetchLatestBlock() {\n      return pify(this._query.getBlockByNumber).call(this._query, 'latest', true);\n    }\n  }, {\n    key: \"_fetchBlockByNumber\",\n    value: function _fetchBlockByNumber(hexNumber) {\n      var cleanHex = hexUtils.formatHex(hexNumber);\n      return pify(this._query.getBlockByNumber).call(this._query, cleanHex, true);\n    }\n  }]);\n\n  return RpcBlockTracker;\n}(EventEmitter);\n\nmodule.exports = RpcBlockTracker; // ├─ difficulty: 0x2892ddca\n// ├─ extraData: 0xd983010507846765746887676f312e372e348777696e646f7773\n// ├─ gasLimit: 0x47e7c4\n// ├─ gasUsed: 0x6384\n// ├─ hash: 0xf60903687b1559b9c80f2d935b4c4f468ad95c3076928c432ec34f2ef3d4eec9\n// ├─ logsBloom: 0xn// ├─ miner: 0x01711853335f857442ef6f349b2467c531731318\n// ├─ mixHash: 0xf0d9bec999600eec92e8e4da8fc1182e357468c9ed2f849aa17e0e900412b352\n// ├─ nonce: 0xd556d5a5504198e4\n// ├─ number: 0x72ac8\n// ├─ parentHash: 0xf5239c3ce1085194521435a5052494c02bbb1002b019684dcf368490ea6208e5\n// ├─ receiptsRoot: 0x78c6f8236094b392bcc43b47b0dc1ce93ecd2875bfb5e4e4c3431e5af698ff99\n// ├─ sha3Uncles: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\n// ├─ size: 0x2ad\n// ├─ stateRoot: 0x0554f145c481df2fa02ecd2da17071672740c3aa948c896f1465e6772f741ac6\n// ├─ timestamp: 0x58955844\n// ├─ totalDifficulty: 0x751d0dfa03c1\n// ├─ transactions\n// │  └─ 0\n// │     ├─ blockHash: 0xf60903687b1559b9c80f2d935b4c4f468ad95c3076928c432ec34f2ef3d4eec9\n// │     ├─ blockNumber: 0x72ac8\n// │     ├─ from: 0x201354729f8d0f8b64e9a0c353c672c6a66b3857\n// │     ├─ gas: 0x15f90\n// │     ├─ gasPrice: 0x4a817c800\n// │     ├─ hash: 0xd5a15d7c2449150db4f74f42a6ca0702150a24c46c5b406a7e1b3e44908ef44d\n// │     ├─ input: 0xe1fa8e849bc10d87fb03c6b0603b05a3e29043c7e0b7c927119576a4bec457e96c7d7cde\n// │     ├─ nonce: 0x323e\n// │     ├─ to: 0xd10e3be2bc8f959bc8c41cf65f60de721cf89adf\n// │     ├─ transactionIndex: 0x0\n// │     ├─ value: 0x0\n// │     ├─ v: 0x29\n// │     ├─ r: 0xf35f8ab241e6bb3ccaffd21b268dbfc7fcb5df1c1fb83ee5306207e4a1a3e954\n// │     └─ s: 0x1610cdac2782c91065fd43584cd8974f7f3b4e6d46a2aafe7b101788285bf3f2\n// ├─ transactionsRoot: 0xb090c32d840dec1e9752719f21bbae4a73e58333aecb89bc3b8ed559fb2712a3\n// └─ uncles","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/web3-provider-engine/node_modules/eth-block-tracker/src/index.js"],"names":["EthQuery","require","EventEmitter","pify","hexUtils","incrementHexNumber","sec","min","RpcBlockTracker","opts","provider","Error","_provider","_query","_pollingInterval","pollingInterval","_syncingTimeout","syncingTimeout","_trackingBlock","_trackingBlockTimestamp","_currentBlock","_isRunning","_performSync","bind","_handleNewBlockNotification","Promise","resolve","once","fromBlock","_fetchBlockByNumber","_setTrackingBlock","_fetchLatestBlock","on","_initSubscription","catch","err","console","error","_removeSubscription","newBlock","hash","previous","now","Date","_warpToLatest","emit","oldBlock","setTimeout","trackingBlock","getTrackingBlock","nextNumber","number","_setCurrentBlock","_pollForNextBlock","message","includes","notification","id","_subscriptionId","result","sendAsync","send","jsonrpc","getTime","method","params","removeListener","getBlockByNumber","call","hexNumber","cleanHex","formatHex","module","exports"],"mappings":"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","sourcesContent":["// const EthQuery = require('ethjs-query')\nconst EthQuery = require('eth-query')\nconst EventEmitter = require('events')\nconst pify = require('pify')\nconst hexUtils = require('./hexUtils')\nconst incrementHexNumber = hexUtils.incrementHexNumber\nconst sec = 1000\nconst min = 60 * sec\n\nclass RpcBlockTracker extends EventEmitter {\n\n  constructor(opts = {}) {\n    super()\n    if (!opts.provider) throw new Error('RpcBlockTracker - no provider specified.')\n    this._provider = opts.provider\n    this._query = new EthQuery(opts.provider)\n    // config\n    this._pollingInterval = opts.pollingInterval || 4 * sec\n    this._syncingTimeout = opts.syncingTimeout || 1 * min\n    // state\n    this._trackingBlock = null\n    this._trackingBlockTimestamp = null\n    this._currentBlock = null\n    this._isRunning = false\n    // bind methods for cleaner syntax later\n    this._performSync = this._performSync.bind(this)\n    this._handleNewBlockNotification = this._handleNewBlockNotification.bind(this)\n  }\n\n  getTrackingBlock () {\n    return this._trackingBlock\n  }\n\n  getCurrentBlock () {\n    return this._currentBlock\n  }\n\n  async awaitCurrentBlock () {\n    // return if available\n    if (this._currentBlock) return this._currentBlock\n    // wait for \"sync\" event\n    await new Promise(resolve => this.once('latest', resolve))\n    // return newly set current block\n    return this._currentBlock\n  }\n\n  async start (opts = {}) {\n    // abort if already started\n    if (this._isRunning) return\n    this._isRunning = true\n    // if this._currentBlock\n    if (opts.fromBlock) {\n      // use specified start point\n      await this._setTrackingBlock(await this._fetchBlockByNumber(opts.fromBlock))\n    } else {\n      // or query for latest\n      await this._setTrackingBlock(await this._fetchLatestBlock())\n    }\n    if (this._provider.on) {\n      await this._initSubscription()\n    } else {\n      this._performSync()\n        .catch((err) => {\n          if (err) console.error(err)\n        })\n    }\n  }\n\n  async stop () {\n    this._isRunning = false\n    if (this._provider.on) {\n      await this._removeSubscription()\n    }\n  }\n\n  //\n  // private\n  //\n\n  async _setTrackingBlock (newBlock) {\n    if (this._trackingBlock && (this._trackingBlock.hash === newBlock.hash)) return\n    // check for large timestamp lapse\n    const previous = this._trackingBlockTimestamp\n    const now = Date.now()\n    // check for desynchronization (computer sleep or no internet)\n    if (previous && (now - previous) > this._syncingTimeout) {\n      this._trackingBlockTimestamp = null\n      await this._warpToLatest()\n    } else {\n      this._trackingBlock = newBlock\n      this._trackingBlockTimestamp = now\n      this.emit('block', newBlock)\n    }\n  }\n\n  async _setCurrentBlock (newBlock) {\n    if (this._currentBlock && (this._currentBlock.hash === newBlock.hash)) return\n    const oldBlock = this._currentBlock\n    this._currentBlock = newBlock\n    this.emit('latest', newBlock)\n    this.emit('sync', { newBlock, oldBlock })\n  }\n\n  async _warpToLatest() {\n    // set latest as tracking block\n    await this._setTrackingBlock(await this._fetchLatestBlock())\n  }\n\n  async _pollForNextBlock () {\n    setTimeout(() => this._performSync(), this._pollingInterval)\n  }\n\n  async _performSync () {\n    if (!this._isRunning) return\n    const trackingBlock = this.getTrackingBlock()\n    if (!trackingBlock) throw new Error('RpcBlockTracker - tracking block is missing')\n    const nextNumber = incrementHexNumber(trackingBlock.number)\n    try {\n\n      const newBlock = await this._fetchBlockByNumber(nextNumber)\n      if (newBlock) {\n        // set as new tracking block\n        await this._setTrackingBlock(newBlock)\n        // ask for next block\n        this._performSync()\n      } else {\n        // set tracking block as current block\n        await this._setCurrentBlock(trackingBlock)\n        // setup poll for next block\n        this._pollForNextBlock()\n      }\n\n    } catch (err) {\n\n      // hotfix for https://github.com/ethereumjs/testrpc/issues/290\n      if (err.message.includes('index out of range') ||\n          err.message.includes(\"Couldn't find block by reference\")) {\n        // set tracking block as current block\n        await this._setCurrentBlock(trackingBlock)\n        // setup poll for next block\n        this._pollForNextBlock()\n      } else {\n        console.error(err)\n        this._pollForNextBlock()\n      }\n\n    }\n  }\n\n  async _handleNewBlockNotification(err, notification) {\n    if (notification.id != this._subscriptionId)\n      return // this notification isn't for us\n\n    if (err) {\n      this.emit('error', err)\n      await this._removeSubscription()\n    }\n\n    await this._setTrackingBlock(await this._fetchBlockByNumber(notification.result.number))\n  }\n\n  async _initSubscription() {\n    this._provider.on('data', this._handleNewBlockNotification)\n\n    let result = await pify(this._provider.sendAsync || this._provider.send)({\n      jsonrpc: '2.0',\n      id: new Date().getTime(),\n      method: 'eth_subscribe',\n      params: [\n        'newHeads'\n      ],\n    })\n\n    this._subscriptionId = result.result\n  }\n\n  async _removeSubscription() {\n    if (!this._subscriptionId) throw new Error(\"Not subscribed.\")\n\n    this._provider.removeListener('data', this._handleNewBlockNotification)\n\n    await pify(this._provider.sendAsync || this._provider.send)({\n      jsonrpc: '2.0',\n      id: new Date().getTime(),\n      method: 'eth_unsubscribe',\n      params: [\n        this._subscriptionId\n      ],\n    })\n\n    delete this._subscriptionId\n  }\n\n  _fetchLatestBlock () {\n    return pify(this._query.getBlockByNumber).call(this._query, 'latest', true)\n  }\n\n  _fetchBlockByNumber (hexNumber) {\n    const cleanHex = hexUtils.formatHex(hexNumber)\n    return pify(this._query.getBlockByNumber).call(this._query, cleanHex, true)\n  }\n\n}\n\nmodule.exports = RpcBlockTracker\n\n // ├─ difficulty: 0x2892ddca\n // ├─ extraData: 0xd983010507846765746887676f312e372e348777696e646f7773\n // ├─ gasLimit: 0x47e7c4\n // ├─ gasUsed: 0x6384\n // ├─ hash: 0xf60903687b1559b9c80f2d935b4c4f468ad95c3076928c432ec34f2ef3d4eec9\n // ├─ logsBloom: 0xn // ├─ miner: 0x01711853335f857442ef6f349b2467c531731318\n // ├─ mixHash: 0xf0d9bec999600eec92e8e4da8fc1182e357468c9ed2f849aa17e0e900412b352\n // ├─ nonce: 0xd556d5a5504198e4\n // ├─ number: 0x72ac8\n // ├─ parentHash: 0xf5239c3ce1085194521435a5052494c02bbb1002b019684dcf368490ea6208e5\n // ├─ receiptsRoot: 0x78c6f8236094b392bcc43b47b0dc1ce93ecd2875bfb5e4e4c3431e5af698ff99\n // ├─ sha3Uncles: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\n // ├─ size: 0x2ad\n // ├─ stateRoot: 0x0554f145c481df2fa02ecd2da17071672740c3aa948c896f1465e6772f741ac6\n // ├─ timestamp: 0x58955844\n // ├─ totalDifficulty: 0x751d0dfa03c1\n // ├─ transactions\n // │  └─ 0\n // │     ├─ blockHash: 0xf60903687b1559b9c80f2d935b4c4f468ad95c3076928c432ec34f2ef3d4eec9\n // │     ├─ blockNumber: 0x72ac8\n // │     ├─ from: 0x201354729f8d0f8b64e9a0c353c672c6a66b3857\n // │     ├─ gas: 0x15f90\n // │     ├─ gasPrice: 0x4a817c800\n // │     ├─ hash: 0xd5a15d7c2449150db4f74f42a6ca0702150a24c46c5b406a7e1b3e44908ef44d\n // │     ├─ input: 0xe1fa8e849bc10d87fb03c6b0603b05a3e29043c7e0b7c927119576a4bec457e96c7d7cde\n // │     ├─ nonce: 0x323e\n // │     ├─ to: 0xd10e3be2bc8f959bc8c41cf65f60de721cf89adf\n // │     ├─ transactionIndex: 0x0\n // │     ├─ value: 0x0\n // │     ├─ v: 0x29\n // │     ├─ r: 0xf35f8ab241e6bb3ccaffd21b268dbfc7fcb5df1c1fb83ee5306207e4a1a3e954\n // │     └─ s: 0x1610cdac2782c91065fd43584cd8974f7f3b4e6d46a2aafe7b101788285bf3f2\n // ├─ transactionsRoot: 0xb090c32d840dec1e9752719f21bbae4a73e58333aecb89bc3b8ed559fb2712a3\n // └─ uncles\n"]},"metadata":{},"sourceType":"script"}