{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect, useCallback } from \"react\"; // import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\n\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound'; //\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\n\nimport './style.css';\nimport ohno from './assets/troy_oh_no.mp4';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactAudioPlayer from 'react-audio-player'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FighterScreen = props => {\n  _s();\n\n  var [controlPlayer, setControlPlayer] = useState(false);\n  var [hasGameStarted, setHasGameStarted] = useState(false);\n  var [hasGameOver, setHasGameOver] = useState(false);\n  var [canvas, setCanvas] = useState(false);\n  var [ctx, setCtx] = useState(false);\n  var [exit, setExit] = useState(true);\n  var [isGameOver, setIsGameOver] = useState(false);\n  var [redirectLevel1More, setredirectLevel1More] = useState(false);\n  const [timeleft, setTimeleft] = useState(10);\n  const [start, setStart] = useState(false);\n  let secondsPassed;\n  let oldTimeStamp;\n  let fps; // let canvas;\n  // let ctx;\n\n  window.onload = init;\n\n  function init() {\n    canvas = document.getElementById('canvas');\n    ctx = canvas.getContext('2d'); // Start the first frame request\n\n    window.requestAnimationFrame(gameLoop);\n  }\n\n  function gameLoop(timeStamp) {\n    draw(); // Keep requesting new frames\n\n    window.requestAnimationFrame(gameLoop);\n  }\n\n  function draw() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawBorder();\n    drawRect();\n\n    if (hasGameStarted) {\n      //Get the blue rectangle to start moving\n      moveRectangle();\n    } //Detect whether rectangles hit edge of canvas\n\n\n    borderRectangleCollisionDetection(); //Detect whether player makes contact with border\n\n    playerCollisionDetection(); //Detect whether player makes contact with rectangle\n\n    rectangleCollisionDetection();\n  } // Prevent game from working whilst page reloads\n\n\n  let startDate = null;\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n  }; //Game Elements\n\n  let rectangles = [{\n    x: 75,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  }, {\n    x: 450,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  } // {\n  //     x: 450,\n  //     y: 450,\n  //     dx: 5,\n  //     dy: 4,\n  //     width: 75,\n  //     height: 75,\n  //     color: \"#000099\"\n  // },\n  // {\n  //     x: 265,\n  //     y: 450,\n  //     dx: 5,\n  //     dy: 4,\n  //     width: 75,\n  //     height: 75,\n  //     color: \"#000099\"\n  // },\n  // {\n  //     x: 400,\n  //     y: 75,\n  //     dx: -5,\n  //     dy: 5.5,\n  //     width: 80,\n  //     height: 60,\n  //     color: \"#000099\"\n  // },\n  // {\n  //     x: 75,\n  //     y: 445,\n  //     dx: 5,\n  //     dy: -5,\n  //     width: 40,\n  //     height: 80,\n  //     color: \"#000099\"\n  // },\n  // {\n  //     x: 420,\n  //     y: 450,\n  //     dx: -5,\n  //     dy: -5,\n  //     width: 130,\n  //     height: 25,\n  //     color: \"#000099\"\n  // }\n  ]; // const gameOverTime = () => {\n  //\n  //   setIsGameOver(true);\n  //   setExit(false);\n  //\n  //\n  //\n  // useEffect(() => {\n  //\n  //     if (start){\n  //       setTimeout(() => {\n  //\n  //\n  //         if (timeleft > 0) {\n  //           var timer = timeleft -1\n  //           setTimeleft(timer)\n  //         }\n  //\n  //         if (timeleft === 0){\n  //\n  //           console.log(\"wiiiiiinnnnnnnn\")\n  //\n  //           window.scrollTo({top: 0});\n  //           setredirectLevel1More(true);\n  //           setTimeout(setStart(false),3500);\n  //\n  //\n  //         }\n  //       }, 1000)\n  //     }\n  // })\n  //\n  // useEffect(() => {\n  //\n  //       const canvas = document.getElementById(\"canvas\");\n  //       const ctx = canvas.getContext(\"2d\");\n\n  function millisecondsToMinutes(millis) {\n    let minutes = Math.floor(millis / 60000);\n    let seconds = (millis % 60000 / 1000).toFixed(0);\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n  } // Global Varabales\n  // function update() {\n  //     ctx.clearRect(0,0,canvas.width,canvas.height);\n  //     drawBorder();\n  //     drawRect();\n  //\n  //     if(hasGameStarted){\n  //         //Get the blue rectangle to start moving\n  //         moveRectangle();\n  //     }\n  //     //Detect whether rectangles hit edge of canvas\n  //     borderRectangleCollisionDetection();\n  //     //Detect whether player makes contact with border\n  //     playerCollisionDetection();\n  //     //Detect whether player makes contact with rectangle\n  //     rectangleCollisionDetection();\n  //     requestAnimationFrame(update);\n  // }\n  //\n  // //Call update method on initial document load\n  // update();\n  //Render rectangles to canvas.\n\n\n  function drawRect() {\n    //Draw playerRect first\n    ctx.fillStyle = \"#990000\";\n    ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n    rectangles.forEach(rect => {\n      ctx.fillStyle = rect.color;\n      ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n    });\n  } //\n  // function update(){\n  //   ctx.clearRect(0,0,canvas.width,canvas.height);\n  //\n  //   drawBoarder();\n  //   drawRect();\n  //\n  //   if (hasGameStarted){\n  //     moveRectangle();\n  //   }\n  //\n  //   playerCollisionDetection();\n  //   rectangleCollisionDetection();\n  //   boarderRectangleDetection();\n  //   requestAnimationFrame(update);\n  // }\n  //\n  // // call update methord on initial document load\n  // update();\n  // Canvas black boarder\n  //Canvas Black Border\n\n\n  function drawBorder() {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.clearRect(25, 25, 550, 550);\n  } // function drawBoarder(){\n  //   ctx.fillStyle = \"black\";\n  //   ctx.fillRect(0,0,canvas.width,canvas.height);\n  //   ctx.clearRect(50,50,500,500);\n  // }\n\n\n  function millisecondsToMiutes(millis) {\n    let minutes = Math.floor(millis / 60000);\n    let seconds = Math.floor(millis % 60000 / 1000);\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n  }\n\n  function gameOver() {// gameOverTime()\n    // if(!hasGameOver){\n    //\n    //\n    //\n    //\n    //     let endDate = new Date();\n    //     let timeDiff = endDate - startDate;\n    //     if(timeDiff < 5000){\n    //       // gameOverTime()\n    //\n    //\n    //\n    //\n    //         // alert(`You survived ${timeDiff / 1000} seconds!`);\n    //     }else{\n    //       gameOverTime()\n    //         // let minutesSurvived = millisecondsToMinutes(timeDiff);\n    //         // alert(`You survived ${minutesSurvived} minutes. WOW!`);\n    //     }\n    // setHasGameOver(true);\n    // FighterScreen()\n    // }\n  } // Render rectangles to canvas\n  //Render rectangles to canvas.\n  // function drawRect() {\n  //     //Draw playerRect first\n  //     ctx.fillStyle = \"#990000\";\n  //     ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n  //     rectangles.forEach(rect => {\n  //         ctx.fillStyle = rect.color;\n  //         ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n  //     })\n  // }\n  // function drawRect(){\n  //   // Draw player rect first\n  //   ctx.fillStyle = \"#901234\";\n  //   ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n  //\n  //   rectangles.forEach(rect => {\n  //     ctx.fillStyle = rect.color;\n  //     ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n  //   });\n  //\n  // }\n  //Detect whether player makes contact with border\n\n\n  function playerCollisionDetection() {\n    if (playerRect.x + playerRect.width > 575 || playerRect.x < 25 || playerRect.y + playerRect.height > 575 || playerRect.y < 25) {\n      gameOver();\n    }\n  } // collision\n  // function playerCollisionDetection(){\n  //   if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n  //   ){\n  //     gameOver();\n  //   }\n  // }\n  //Returns true if 2 rectangles are colliding\n\n\n  function isRectangleCollision(rect1, rect2) {\n    return !(rect1.x + 10 > rect2.x + rect2.width || rect1.x + rect1.width - 10 < rect2.x || rect1.y + 10 > rect2.y + rect2.height || rect1.y + rect1.height - 10 < rect2.y);\n  } // function isRectangleCollision(rect1,rect2){\n  //   return !(\n  //     rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n  //   );\n  // }\n  //Detect whether player makes contact with rectangle\n\n\n  function rectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n      if (isRectangleCollision(playerRect, rect)) {\n        gameOver();\n      }\n    });\n  } //\n  // function rectangleCollisionDetection(){\n  //   rectangles.forEach(rect =>{\n  //     if(isRectangleCollision(playerRect,rect)){\n  //       gameOver();\n  //     }\n  //   })\n  // }\n  //Get the blue rectangle to start moving\n\n\n  function moveRectangle() {\n    rectangles.forEach(rect => {\n      rect.x += rect.dx;\n      rect.y += rect.dy;\n    });\n  } // function moveRectangle(){\n  //   rectangles.forEach(rect => {\n  //     rect.x += rect.dx;\n  //     rect.y += rect.dy;\n  //   })\n  // }\n  //Detect whether rectangles hit edge of canvas\n\n\n  function borderRectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n      if (rect.x + rect.width > canvas.width || rect.x < 0) {\n        rect.dx *= -1;\n      }\n\n      if (rect.y + rect.height > canvas.height || rect.y < 0) {\n        rect.dy *= -1;\n      }\n    });\n  } // function boarderRectangleDetection(){\n  //   rectangles.forEach(rect=>{\n  //     if(rect.x + rect.width > canvas.width || rect.x < 0){\n  //       rect.dx *= -1;\n  //     }\n  //     if(rect.y + rect.height > canvas.height || rect.y < 0){\n  //       rect.dy *= -1;\n  //     }\n  //   })\n  // }\n\n\n  let numberOfSpeed = 0;\n\n  function configureRectSpeed() {\n    const speedUpGame = setInterval(() => {\n      numberOfSpeed++;\n      rectangles.forEach(rect => {\n        rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n        rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n      });\n\n      if (numberOfSpeed === 4) {\n        clearInterval(speedUpGame);\n      }\n    }, 10000);\n  } //Returns true if mouse is in player rectangle\n\n\n  function isCursorInRect(x, y, rect) {\n    return x > rect.x && x < rect.x + rect.width && y > rect.y && y < rect.y + rect.height;\n  } // // Returns true if collision\n  // function isCursorInRect(x,y,rect){\n  //   return((x > rect.x) && (x < rect.x + rect.width) && (y > rect.y) && (y < rect.y + rect.height));\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"top\",\n    children: [isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"siteTitle\",\n      style: {\n        fontSize: '60px',\n        color: \"#000000\"\n      },\n      children: \"You Scored Bad Luck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 24\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(ReactAudioPlayer, {\n      src: ohno,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 24\n    }, this), exit ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/JetswapXTreasureBlox1/:top\",\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 11\n    }, this), redirectLevel1More ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/PartnershipLevel1More/:top\",\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wording\",\n        children: [\"Fighter Pilot \", timeleft]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 60\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"600\",\n        height: \"600\",\n        id: \"canvas\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 536,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 497,\n    columnNumber: 9\n  }, this);\n  canvas.addEventListener(\"mousedown\", e => {\n    //Get X & Y coordinates in relation to canvas\n    const pos = {\n      x: e.clientX - canvas.offsetLeft,\n      y: e.clientY - canvas.offsetTop\n    }; //See if they clicked on the red square in particular\n\n    if (isCursorInRect(pos.x, pos.y, playerRect)) {\n      //Start timer\n      if (!hasGameStarted) {\n        startDate = new Date(); // configureRectSpeed();\n      }\n\n      setControlPlayer(true);\n      setHasGameStarted(true);\n      setStart(true);\n    }\n  }); // canvas.addEventListener('mousedown', on_canvas_down, false);\n  //\n  // function on_canvas_down(ev) {\n  //\n  //     // get x & y coordinates in relation to the canvas\n  //\n  //     var x = ev.clientX - this.offsetLeft;\n  //     var y = ev.clientY - this.offsetTop;\n  //\n  //     // See if they clicked on red square\n  //     if(isCursorInRect(x,y,playerRect)){\n  //       //\n  //       if(!hasGameStarted){\n  //         startDate = new Date();\n  //         configureRectSpeed();\n  //       }\n  //       setControlPlayer(true);\n  //       setHasGameStarted(true);\n  //\n  //     }\n  //\n  // }\n\n  canvas.addEventListener(\"mousemove\", e => {\n    if (controlPlayer && !hasGameOver) {\n      //Get X & Y coordinates in relation to canvas\n      const pos = {\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop\n      };\n      playerRect.x = pos.x - 25;\n      playerRect.y = pos.y - 25;\n    }\n  }); // canvas.addEventListener('mousemove', on_canvas_move, false);\n  //\n  //\n  //   function on_canvas_move(ev) {\n  //\n  //     if(controlPlayer && !hasGameOver){\n  //       // get x & y coordinates in relation to the canvas\n  //\n  //       var x = ev.clientX - this.offsetLeft;\n  //       var y = ev.clientY - this.offsetTop;\n  //\n  //       playerRect.x = x - 25;\n  //       playerRect.y = y - 25;\n  //     }\n  //     console.log(x,\"xxxxxxxxxx\")\n  // }\n\n  canvas.addEventListener(\"mouseup\", () => {\n    setControlPlayer(false);\n  }); // canvas.addEventListener('mouseup', on_canvas_up, false);\n  // function on_canvas_up(ev) {\n  //\n  //   setControlPlayer(false);\n  // }\n  // }, [controlPlayer,hasGameStarted,hasGameOver,canvas,ctx]);\n  //     const timer = window.setInterval( async() => {\n  // }, 1000);\n};\n\n_s(FighterScreen, \"9YUSc3w/WTCNk63hf3qPzI1iIOw=\");\n\n_c = FighterScreen;\nexport default FighterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FighterScreen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js"],"names":["useState","useRef","useEffect","useCallback","Button","Container","Nav","Navbar","NavDropdown","useSound","ohno","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactAudioPlayer","FighterScreen","props","controlPlayer","setControlPlayer","hasGameStarted","setHasGameStarted","hasGameOver","setHasGameOver","canvas","setCanvas","ctx","setCtx","exit","setExit","isGameOver","setIsGameOver","redirectLevel1More","setredirectLevel1More","timeleft","setTimeleft","start","setStart","secondsPassed","oldTimeStamp","fps","window","onload","init","document","getElementById","getContext","requestAnimationFrame","gameLoop","timeStamp","draw","clearRect","width","height","drawBorder","drawRect","moveRectangle","borderRectangleCollisionDetection","playerCollisionDetection","rectangleCollisionDetection","startDate","playerRect","x","y","rectangles","dx","dy","color","millisecondsToMinutes","millis","minutes","Math","floor","seconds","toFixed","fillStyle","fillRect","forEach","rect","millisecondsToMiutes","gameOver","isRectangleCollision","rect1","rect2","numberOfSpeed","configureRectSpeed","speedUpGame","setInterval","clearInterval","isCursorInRect","fontSize","addEventListener","e","pos","clientX","offsetLeft","clientY","offsetTop","Date"],"mappings":"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ACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhEa,GAAjB,CAzEgC,CA6I1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASN;AACA;AACA;AACA;AACA;;AAGM,WAASC,qBAAT,CAA+BC,MAA/B,EAAsC;AAClC,QAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,KAApB,CAAd;AACA,QAAII,OAAO,GAAG,CAAEJ,MAAM,GAAG,KAAV,GAAmB,IAApB,EAA0BK,OAA1B,CAAkC,CAAlC,CAAd;AACA,WAAOJ,OAAO,GAAG,GAAV,IAAiBG,OAAO,GAAG,EAAV,GAAe,GAAf,GAAqB,EAAtC,IAA4CA,OAAnD;AACH,GA/LyB,CAiM1B;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,WAASlB,QAAT,GAAoB;AAChB;AACA7B,IAAAA,GAAG,CAACiD,SAAJ,GAAgB,SAAhB;AACAjD,IAAAA,GAAG,CAACkD,QAAJ,CAAaf,UAAU,CAACC,CAAxB,EAA0BD,UAAU,CAACE,CAArC,EAAuCF,UAAU,CAACT,KAAlD,EAAwDS,UAAU,CAACR,MAAnE;AACAW,IAAAA,UAAU,CAACa,OAAX,CAAmBC,IAAI,IAAI;AACvBpD,MAAAA,GAAG,CAACiD,SAAJ,GAAgBG,IAAI,CAACX,KAArB;AACAzC,MAAAA,GAAG,CAACkD,QAAJ,CAAaE,IAAI,CAAChB,CAAlB,EAAoBgB,IAAI,CAACf,CAAzB,EAA2Be,IAAI,CA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","sourcesContent":["\nimport { useState, useRef, useEffect, useCallback } from \"react\";\n\n// import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\nimport { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound';\n//\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\nimport './style.css';\n\nimport ohno from './assets/troy_oh_no.mp4';\n\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n// Hook\n\n\n\n\nconst FighterScreen = (props) =>{\n\n\n  var [controlPlayer, setControlPlayer]= useState(false)\n  var [hasGameStarted, setHasGameStarted]= useState(false)\n  var [hasGameOver, setHasGameOver]= useState(false)\n  var [canvas, setCanvas]= useState(false)\n  var [ctx, setCtx]= useState(false)\n  var [exit,setExit] = useState(true);\n  var [isGameOver, setIsGameOver]= useState(false)\n  var [redirectLevel1More,setredirectLevel1More] = useState(false);\n  const [timeleft,setTimeleft] = useState(10)\n  const [start,setStart] = useState(false)\n\n\n\n  let secondsPassed;\n  let oldTimeStamp;\n  let fps;\n\n  // let canvas;\n  // let ctx;\n\n  window.onload = init;\n\n      function init(){\n          canvas = document.getElementById('canvas');\n          ctx = canvas.getContext('2d');\n\n          // Start the first frame request\n          window.requestAnimationFrame(gameLoop);\n      }\n\n\n      function gameLoop(timeStamp){\n        draw();\n\n        // Keep requesting new frames\n        window.requestAnimationFrame(gameLoop);\n    }\n\n\n      function draw() {\n        ctx.clearRect(0,0,canvas.width,canvas.height);\n        drawBorder();\n        drawRect();\n\n        if(hasGameStarted){\n            //Get the blue rectangle to start moving\n            moveRectangle();\n        }\n        //Detect whether rectangles hit edge of canvas\n        borderRectangleCollisionDetection();\n        //Detect whether player makes contact with border\n        playerCollisionDetection();\n        //Detect whether player makes contact with rectangle\n        rectangleCollisionDetection();\n      }\n\n\n\n\n\n  // Prevent game from working whilst page reloads\n  let startDate = null;\n\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n}\n//Game Elements\nlet rectangles = [\n    {\n        x: 75,\n        y: 75,\n        dx: 5,\n        dy: 4,\n        width: 75,\n        height: 75,\n        color: \"#000099\"\n    },\n    {\n        x: 450,\n        y: 75,\n        dx: 5,\n        dy: 4,\n        width: 75,\n        height: 75,\n        color: \"#000099\"\n    },\n    // {\n    //     x: 450,\n    //     y: 450,\n    //     dx: 5,\n    //     dy: 4,\n    //     width: 75,\n    //     height: 75,\n    //     color: \"#000099\"\n    // },\n\n    // {\n    //     x: 265,\n    //     y: 450,\n    //     dx: 5,\n    //     dy: 4,\n    //     width: 75,\n    //     height: 75,\n    //     color: \"#000099\"\n    // },\n    // {\n    //     x: 400,\n    //     y: 75,\n    //     dx: -5,\n    //     dy: 5.5,\n    //     width: 80,\n    //     height: 60,\n    //     color: \"#000099\"\n    // },\n    // {\n    //     x: 75,\n    //     y: 445,\n    //     dx: 5,\n    //     dy: -5,\n    //     width: 40,\n    //     height: 80,\n    //     color: \"#000099\"\n    // },\n    // {\n    //     x: 420,\n    //     y: 450,\n    //     dx: -5,\n    //     dy: -5,\n    //     width: 130,\n    //     height: 25,\n    //     color: \"#000099\"\n    // }\n]\n\n\n      // const gameOverTime = () => {\n      //\n      //   setIsGameOver(true);\n      //   setExit(false);\n      //\n      //\n      //\n      // useEffect(() => {\n      //\n      //     if (start){\n      //       setTimeout(() => {\n      //\n      //\n      //         if (timeleft > 0) {\n      //           var timer = timeleft -1\n      //           setTimeleft(timer)\n      //         }\n      //\n      //         if (timeleft === 0){\n      //\n      //           console.log(\"wiiiiiinnnnnnnn\")\n      //\n      //           window.scrollTo({top: 0});\n      //           setredirectLevel1More(true);\n      //           setTimeout(setStart(false),3500);\n      //\n      //\n      //         }\n      //       }, 1000)\n      //     }\n      // })\n\n\n\n\n\n\n\n\n//\n// useEffect(() => {\n//\n//       const canvas = document.getElementById(\"canvas\");\n//       const ctx = canvas.getContext(\"2d\");\n\n\n      function millisecondsToMinutes(millis){\n          let minutes = Math.floor(millis / 60000);\n          let seconds = ((millis % 60000) / 1000).toFixed(0);\n          return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n      }\n\n      // Global Varabales\n\n\n      // function update() {\n      //     ctx.clearRect(0,0,canvas.width,canvas.height);\n      //     drawBorder();\n      //     drawRect();\n      //\n      //     if(hasGameStarted){\n      //         //Get the blue rectangle to start moving\n      //         moveRectangle();\n      //     }\n      //     //Detect whether rectangles hit edge of canvas\n      //     borderRectangleCollisionDetection();\n      //     //Detect whether player makes contact with border\n      //     playerCollisionDetection();\n      //     //Detect whether player makes contact with rectangle\n      //     rectangleCollisionDetection();\n      //     requestAnimationFrame(update);\n      // }\n      //\n      // //Call update method on initial document load\n      // update();\n\n      //Render rectangles to canvas.\n      function drawRect() {\n          //Draw playerRect first\n          ctx.fillStyle = \"#990000\";\n          ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n          rectangles.forEach(rect => {\n              ctx.fillStyle = rect.color;\n              ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n          })\n      }\n\n      //\n      // function update(){\n      //   ctx.clearRect(0,0,canvas.width,canvas.height);\n      //\n      //   drawBoarder();\n      //   drawRect();\n      //\n      //   if (hasGameStarted){\n      //     moveRectangle();\n      //   }\n      //\n      //   playerCollisionDetection();\n      //   rectangleCollisionDetection();\n      //   boarderRectangleDetection();\n      //   requestAnimationFrame(update);\n      // }\n      //\n      // // call update methord on initial document load\n      // update();\n\n\n\n\n\n      // Canvas black boarder\n\n      //Canvas Black Border\nfunction drawBorder() {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0,0,canvas.width,canvas.height);\n    ctx.clearRect(25,25,550,550);\n}\n\n      // function drawBoarder(){\n      //   ctx.fillStyle = \"black\";\n      //   ctx.fillRect(0,0,canvas.width,canvas.height);\n      //   ctx.clearRect(50,50,500,500);\n      // }\n\n\n      function millisecondsToMiutes(millis){\n        let minutes = Math.floor(millis/60000);\n        let seconds = Math.floor((millis % 60000)/1000);\n        return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n\n      }\n\n\n\n\n\n      function gameOver() {\n\n        // gameOverTime()\n\n\n          // if(!hasGameOver){\n          //\n          //\n          //\n          //\n          //     let endDate = new Date();\n          //     let timeDiff = endDate - startDate;\n          //     if(timeDiff < 5000){\n          //       // gameOverTime()\n          //\n          //\n          //\n          //\n          //         // alert(`You survived ${timeDiff / 1000} seconds!`);\n          //     }else{\n          //       gameOverTime()\n          //         // let minutesSurvived = millisecondsToMinutes(timeDiff);\n          //         // alert(`You survived ${minutesSurvived} minutes. WOW!`);\n          //     }\n\n              // setHasGameOver(true);\n\n              // FighterScreen()\n\n\n          // }\n      }\n\n\n      // Render rectangles to canvas\n\n      //Render rectangles to canvas.\n// function drawRect() {\n//     //Draw playerRect first\n//     ctx.fillStyle = \"#990000\";\n//     ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n//     rectangles.forEach(rect => {\n//         ctx.fillStyle = rect.color;\n//         ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n//     })\n// }\n\n      // function drawRect(){\n      //   // Draw player rect first\n      //   ctx.fillStyle = \"#901234\";\n      //   ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n      //\n      //   rectangles.forEach(rect => {\n      //     ctx.fillStyle = rect.color;\n      //     ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n      //   });\n      //\n      // }\n\n      //Detect whether player makes contact with border\nfunction playerCollisionDetection() {\n    if(\n        playerRect.x + playerRect.width > 575 ||\n        playerRect.x < 25 ||\n        playerRect.y + playerRect.height > 575 ||\n        playerRect.y < 25\n    ){\n        gameOver();\n    }\n}\n\n      // collision\n      // function playerCollisionDetection(){\n      //   if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n      //   ){\n      //     gameOver();\n      //   }\n      // }\n\n      //Returns true if 2 rectangles are colliding\nfunction isRectangleCollision(rect1, rect2){\n    return !(\n        rect1.x+10>rect2.x+rect2.width ||\n        rect1.x+rect1.width-10<rect2.x ||\n        rect1.y+10>rect2.y+rect2.height ||\n        rect1.y+rect1.height-10<rect2.y\n    );\n}\n\n      // function isRectangleCollision(rect1,rect2){\n      //   return !(\n      //     rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n      //   );\n      // }\n\n      //Detect whether player makes contact with rectangle\nfunction rectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n        if(isRectangleCollision(playerRect, rect)){\n            gameOver();\n        }\n    })\n}\n      //\n      // function rectangleCollisionDetection(){\n      //   rectangles.forEach(rect =>{\n      //     if(isRectangleCollision(playerRect,rect)){\n      //       gameOver();\n      //     }\n      //   })\n      // }\n\n      //Get the blue rectangle to start moving\nfunction moveRectangle() {\n    rectangles.forEach(rect => {\n        rect.x += rect.dx;\n        rect.y += rect.dy;\n    })\n}\n\n      // function moveRectangle(){\n      //   rectangles.forEach(rect => {\n      //     rect.x += rect.dx;\n      //     rect.y += rect.dy;\n      //   })\n      // }\n\n      //Detect whether rectangles hit edge of canvas\nfunction borderRectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n        if(rect.x + rect.width > canvas.width || rect.x < 0){\n            rect.dx *= -1;\n        }\n        if(rect.y + rect.height > canvas.height || rect.y < 0){\n            rect.dy *= -1;\n        }\n    })\n}\n\n      // function boarderRectangleDetection(){\n      //   rectangles.forEach(rect=>{\n      //     if(rect.x + rect.width > canvas.width || rect.x < 0){\n      //       rect.dx *= -1;\n      //     }\n      //     if(rect.y + rect.height > canvas.height || rect.y < 0){\n      //       rect.dy *= -1;\n      //     }\n      //   })\n      // }\n\n      let numberOfSpeed = 0;\n\n\n\n      function configureRectSpeed() {\n          const speedUpGame = setInterval(() => {\n              numberOfSpeed++;\n              rectangles.forEach(rect => {\n                  rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n                  rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n              });\n              if(numberOfSpeed === 4){\n                  clearInterval(speedUpGame);\n              }\n          }, 10000)\n      }\n\n\n\n\n\n\n\n      //Returns true if mouse is in player rectangle\n      function isCursorInRect(x,y,rect){\n          return(x>rect.x && x<rect.x+rect.width && y>rect.y && y<rect.y+rect.height);\n      }\n\n      // // Returns true if collision\n      // function isCursorInRect(x,y,rect){\n      //   return((x > rect.x) && (x < rect.x + rect.width) && (y > rect.y) && (y < rect.y + rect.height));\n      // }\n\n\n      return (\n        <div id=\"top\">\n\n        {isGameOver && <div className=\"siteTitle\" style={{fontSize: '60px',color:\"#000000\"}}>You Scored Bad Luck</div>}\n        {isGameOver && <ReactAudioPlayer\n          src={ohno}\n          autoPlay\n        />}\n\n        {exit?(\n          <div>\n\n          </div>\n        ):(\n          <div>\n\n          <Redirect to=\"/JetswapXTreasureBlox1/:top\" {...props}/>\n\n          </div>\n        )}\n\n        {redirectLevel1More?(\n          <div>\n          <Redirect to=\"/PartnershipLevel1More/:top\" {...props}/>\n          </div>\n        ):(\n          <div>\n\n          </div>\n\n        )}\n\n\n\n    <center>\n    <div className=\"wording\">Fighter Pilot {timeleft}</div><br/>\n\n    <canvas width=\"600\" height=\"600\" id=\"canvas\"> </canvas>\n\n    </center>\n    <br/>\n        </div>\n      );\n\n\n\n      canvas.addEventListener(\"mousedown\", e => {\n          //Get X & Y coordinates in relation to canvas\n          const pos = {\n              x: e.clientX - canvas.offsetLeft,\n              y: e.clientY - canvas.offsetTop\n          }\n          //See if they clicked on the red square in particular\n          if(isCursorInRect(pos.x,pos.y,playerRect)){\n              //Start timer\n              if(!hasGameStarted){\n                  startDate = new Date();\n                  // configureRectSpeed();\n              }\n              setControlPlayer(true);\n              setHasGameStarted(true);\n              setStart(true);\n          }\n      })\n\n\n      // canvas.addEventListener('mousedown', on_canvas_down, false);\n      //\n      // function on_canvas_down(ev) {\n      //\n      //     // get x & y coordinates in relation to the canvas\n      //\n      //     var x = ev.clientX - this.offsetLeft;\n      //     var y = ev.clientY - this.offsetTop;\n      //\n      //     // See if they clicked on red square\n      //     if(isCursorInRect(x,y,playerRect)){\n      //       //\n      //       if(!hasGameStarted){\n      //         startDate = new Date();\n      //         configureRectSpeed();\n      //       }\n      //       setControlPlayer(true);\n      //       setHasGameStarted(true);\n      //\n      //     }\n      //\n      // }\n\n\n\n\n\n      canvas.addEventListener(\"mousemove\", e => {\n          if(controlPlayer && !hasGameOver){\n          //Get X & Y coordinates in relation to canvas\n          const pos = {\n              x: e.clientX - canvas.offsetLeft,\n              y: e.clientY - canvas.offsetTop\n          };\n          playerRect.x = pos.x - 25;\n          playerRect.y = pos.y - 25;\n          }\n      })\n\n\n      // canvas.addEventListener('mousemove', on_canvas_move, false);\n      //\n      //\n      //   function on_canvas_move(ev) {\n      //\n      //     if(controlPlayer && !hasGameOver){\n      //       // get x & y coordinates in relation to the canvas\n      //\n      //       var x = ev.clientX - this.offsetLeft;\n      //       var y = ev.clientY - this.offsetTop;\n      //\n      //       playerRect.x = x - 25;\n      //       playerRect.y = y - 25;\n      //     }\n      //     console.log(x,\"xxxxxxxxxx\")\n      // }\n\n\n\n\n      canvas.addEventListener(\"mouseup\", () => {\n          setControlPlayer(false);\n      })\n\n\n      // canvas.addEventListener('mouseup', on_canvas_up, false);\n      // function on_canvas_up(ev) {\n      //\n      //   setControlPlayer(false);\n      // }\n\n\n\n    // }, [controlPlayer,hasGameStarted,hasGameOver,canvas,ctx]);\n\n\n\n\n\n//     const timer = window.setInterval( async() => {\n// }, 1000);\n\n\n\n\n}\n\nexport default FighterScreen;\n"]},"metadata":{},"sourceType":"module"}