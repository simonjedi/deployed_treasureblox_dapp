{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/Connection.js\",\n    _s = $RefreshSig$();\n\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport { useWallet, UseWalletProvider } from 'use-wallet';\nimport { Button } from 'react-bootstrap';\nimport MyNav from \"./MyNav\";\nimport App from \"./App\";\nimport getWeb3 from \"./getWeb3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Connection = props => {\n  _s();\n\n  const wallet = useWallet();\n  const [firstPartAddress, setFirstPartAddress] = useState('Connect Wallet');\n\n  if (firstPartAddress == 'Connect Wallet') {\n    setFirstPartAddress(props.accounts);\n    useEffect(() => {\n      const init = async () => {\n        const web3 = await getWeb3();\n        const accounts = await web3.eth.getAccounts();\n        const usersAccount = accounts[0];\n        const stringOfUsersAccount = new String(usersAccount);\n        console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n\n        setFirstPartAddress(stringOfUsersAccount.slice(0, 5));\n        setSecondPartAddress('____' + stringOfUsersAccount.slice(37, 42));\n      };\n\n      init();\n    });\n  }\n\n  const [secondPartAddress, setSecondPartAddress] = useState('');\n\n  const connectWallet = async e => {\n    await wallet.connect();\n    const usersAccount = props.accounts;\n    const stringOfUsersAccount = new String(usersAccount);\n    console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n\n    setFirstPartAddress('Welcome');\n    setSecondPartAddress('');\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: connectWallet,\n      id: \"wallet-button\",\n      className: \"customButton enableEthereumButton\",\n      children: [firstPartAddress, secondPartAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}; // Wrap everything in <UseWalletProvider />\n\n\n_s(Connection, \"1abkkdaTIOA8gcHOu6nD5nLYmpQ=\", false, function () {\n  return [useWallet];\n});\n\n_c = Connection;\nexport default (props => /*#__PURE__*/_jsxDEV(UseWalletProvider, {\n  chainId: 1337,\n  connectors: {\n    // This is how connectors get configured\n    provided: {\n      provider: window.cleanEthereum\n    }\n  },\n  children: /*#__PURE__*/_jsxDEV(Connection, {\n    accounts: props.accounts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 56,\n  columnNumber: 3\n}, this));\n\nvar _c;\n\n$RefreshReg$(_c, \"Connection\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/Connection.js"],"names":["React","useState","useEffect","useWallet","UseWalletProvider","Button","MyNav","App","getWeb3","Connection","props","wallet","firstPartAddress","setFirstPartAddress","accounts","init","web3","eth","getAccounts","usersAccount","stringOfUsersAccount","String","console","log","slice","setSecondPartAddress","secondPartAddress","connectWallet","e","connect","window","location","reload","provided","provider","cleanEthereum"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,SAAT,EAAoBC,iBAApB,QAA6C,YAA7C;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAGA,MAAMC,UAAU,GAAIC,KAAD,IAAY;AAAA;;AAE7B,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA0CZ,QAAQ,CAAC,gBAAD,CAAxD;;AACA,MAAIW,gBAAgB,IAAI,gBAAxB,EAAyC;AACvCC,IAAAA,mBAAmB,CAACH,KAAK,CAACI,QAAP,CAAnB;AACAZ,IAAAA,SAAS,CAAC,MAAM;AACb,YAAMa,IAAI,GAAG,YAAW;AACtB,cAAMC,IAAI,GAAG,MAAMR,OAAO,EAA1B;AACA,cAAMM,QAAQ,GAAG,MAAME,IAAI,CAACC,GAAL,CAASC,WAAT,EAAvB;AACA,cAAMC,YAAY,GAAGL,QAAQ,CAAC,CAAD,CAA7B;AACA,cAAMM,oBAAoB,GAAG,IAAIC,MAAJ,CAAWF,YAAX,CAA7B;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAoB,CAACI,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAAZ,EALsB,CAKyB;;AAC/CX,QAAAA,mBAAmB,CAACO,oBAAoB,CAACI,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAAD,CAAnB;AACAC,QAAAA,oBAAoB,CAAC,SAAOL,oBAAoB,CAACI,KAArB,CAA2B,EAA3B,EAA+B,EAA/B,CAAR,CAApB;AAED,OATD;;AAUAT,MAAAA,IAAI;AACL,KAZO,CAAT;AAaD;;AACD,QAAM,CAACW,iBAAD,EAAoBD,oBAApB,IAA4CxB,QAAQ,CAAC,EAAD,CAA1D;;AAIA,QAAM0B,aAAa,GAAG,MAAMC,CAAN,IAAY;AAChC,UAAMjB,MAAM,CAACkB,OAAP,EAAN;AACA,UAAMV,YAAY,GAAGT,KAAK,CAACI,QAA3B;AACA,UAAMM,oBAAoB,GAAG,IAAIC,MAAJ,CAAWF,YAAX,CAA7B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAoB,CAACI,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAAZ,EAJgC,CAIe;;AAC/CX,IAAAA,mBAAmB,CAAC,SAAD,CAAnB;AACAY,IAAAA,oBAAoB,CAAC,EAAD,CAApB;AACAK,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AAED,GATD;;AAWA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEL,aAAjB;AAAgC,MAAA,EAAE,EAAC,eAAnC;AAAmD,MAAA,SAAS,EAAC,mCAA7D;AAAA,iBAAkGf,gBAAlG,EAAoHc,iBAApH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAxCD,C,CA0CA;;;GA1CMjB,U;UAEWN,S;;;KAFXM,U;AA2CN,gBAAgBC,KAAD,iBACb,QAAC,iBAAD;AACE,EAAA,OAAO,EAAE,IADX;AAEE,EAAA,UAAU,EAAE;AACV;AACAuB,IAAAA,QAAQ,EAAE;AAACC,MAAAA,QAAQ,EAAEJ,MAAM,CAACK;AAAlB;AAFA,GAFd;AAAA,yBAOE,QAAC,UAAD;AAAY,IAAA,QAAQ,EAAEzB,KAAK,CAACI;AAA5B;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA,QADF","sourcesContent":["// App.js\n\nimport React, {useState, useEffect} from 'react'\nimport { useWallet, UseWalletProvider } from 'use-wallet'\nimport { Button } from 'react-bootstrap';\n\nimport MyNav from \"./MyNav\";\nimport App from \"./App\";\nimport getWeb3 from \"./getWeb3\";\n\n\nconst Connection = (props) =>  {\n\n  const wallet = useWallet()\n  const [firstPartAddress, setFirstPartAddress] = useState('Connect Wallet');\n  if (firstPartAddress == 'Connect Wallet'){\n    setFirstPartAddress(props.accounts)\n    useEffect(() => {\n       const init = async() => {\n         const web3 = await getWeb3();\n         const accounts = await web3.eth.getAccounts();\n         const usersAccount = accounts[0];\n         const stringOfUsersAccount = new String(usersAccount)\n         console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n         setFirstPartAddress(stringOfUsersAccount.slice(0, 5));\n         setSecondPartAddress('____'+stringOfUsersAccount.slice(37, 42));\n\n       }\n       init()\n     });\n  }\n  const [secondPartAddress, setSecondPartAddress] = useState('');\n\n\n\n  const connectWallet = async(e) => {\n    await wallet.connect()\n    const usersAccount = props.accounts;\n    const stringOfUsersAccount = new String(usersAccount)\n    console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n    setFirstPartAddress('Welcome');\n    setSecondPartAddress('');\n    window.location.reload();\n\n  }\n\n  return(\n    <div>\n      <Button onClick={connectWallet} id=\"wallet-button\" className=\"customButton enableEthereumButton\">{firstPartAddress}{secondPartAddress}</Button>\n    </div>\n  )\n}\n\n// Wrap everything in <UseWalletProvider />\nexport default (props) => (\n  <UseWalletProvider\n    chainId={1337}\n    connectors={{\n      // This is how connectors get configured\n      provided: {provider: window.cleanEthereum},\n    }}>\n\n    <Connection accounts={props.accounts}/>\n\n\n\n  </UseWalletProvider>\n)\n"]},"metadata":{},"sourceType":"module"}