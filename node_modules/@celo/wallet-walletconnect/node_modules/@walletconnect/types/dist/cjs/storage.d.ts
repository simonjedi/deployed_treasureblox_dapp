import { Logger } from "pino";
import { IKeyValueStorage } from "keyvaluestorage";
import { IClient } from "./client";
import { JsonRpcRecord } from "./history";
import { SubscriptionParams } from "./subscription";
export declare type StorageKeyMap = Record<string, Record<string, string>>;
export declare abstract class IStorage {
    client: IClient;
    logger: Logger;
    keyValueStorage: IKeyValueStorage;
    abstract name: string;
    abstract readonly context: string;
    abstract version: string;
    abstract keyMap: StorageKeyMap;
    abstract prefix: string;
    constructor(client: IClient, logger: Logger, keyValueStorage: IKeyValueStorage);
    abstract setKeyChain(context: string, keychain: Map<string, string>): Promise<void>;
    abstract getKeyChain(context: string): Promise<Map<string, string> | undefined>;
    abstract setSequenceState<Sequence = any>(context: string, sequences: Sequence[]): Promise<void>;
    abstract getSequenceState<Sequence = any>(context: string): Promise<Sequence[] | undefined>;
    abstract setJsonRpcRecords(context: string, records: JsonRpcRecord[]): Promise<void>;
    abstract getJsonRpcRecords(context: string): Promise<JsonRpcRecord[] | undefined>;
    abstract setRelayerSubscriptions(context: string, subscriptions: SubscriptionParams[]): Promise<void>;
    abstract getRelayerSubscriptions(context: string): Promise<SubscriptionParams[] | undefined>;
    abstract getStorageKey(context: string): string;
    abstract getStorageKeyName(context: string): string;
    abstract isValidStorageKeyName(name: string): boolean;
}
//# sourceMappingURL=storage.d.ts.map