{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar wipe_1 = require(\"@stablelib/wipe\");\n\nvar NodeRandomSource = function () {\n  function NodeRandomSource() {\n    this.isAvailable = false;\n    this.isInstantiated = false;\n\n    if (typeof require !== \"undefined\") {\n      var nodeCrypto = require(\"crypto\");\n\n      if (nodeCrypto && nodeCrypto.randomBytes) {\n        this._crypto = nodeCrypto;\n        this.isAvailable = true;\n        this.isInstantiated = true;\n      }\n    }\n  }\n\n  NodeRandomSource.prototype.randomBytes = function (length) {\n    if (!this.isAvailable || !this._crypto) {\n      throw new Error(\"Node.js random byte generator is not available.\");\n    } // Get random bytes (result is Buffer).\n\n\n    var buffer = this._crypto.randomBytes(length); // Make sure we got the length that we requested.\n\n\n    if (buffer.length !== length) {\n      throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n    } // Allocate output array.\n\n\n    var out = new Uint8Array(length); // Copy bytes from buffer to output.\n\n    for (var i = 0; i < out.length; i++) {\n      out[i] = buffer[i];\n    } // Cleanup.\n\n\n    wipe_1.wipe(buffer);\n    return out;\n  };\n\n  return NodeRandomSource;\n}();\n\nexports.NodeRandomSource = NodeRandomSource;","map":{"version":3,"sources":["../../source/node.ts"],"names":[],"mappings":"cAAA;AACA;;;;;;AAGA,IAAA,MAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAIA,IAAA,gBAAA,GAAA,YAAA;AAMI,WAAA,gBAAA,GAAA;AALA,SAAA,WAAA,GAAc,KAAd;AACA,SAAA,cAAA,GAAiB,KAAjB;;AAKI,QAAI,OAAO,OAAP,KAAmB,WAAvB,EAAoC;AAChC,UAAM,UAAU,GAAG,OAAO,CAAC,QAAD,CAA1B;;AACA,UAAI,UAAU,IAAI,UAAU,CAAC,WAA7B,EAA0C;AACtC,aAAK,OAAL,GAAe,UAAf;AACA,aAAK,WAAL,GAAmB,IAAnB;AACA,aAAK,cAAL,GAAsB,IAAtB;AACH;AACJ;AACJ;;AAED,EAAA,gBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,MAAZ,EAA0B;AACtB,QAAI,CAAC,KAAK,WAAN,IAAqB,CAAC,KAAK,OAA/B,EAAwC;AACpC,YAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;AACH,KAHqB,CAKtB;;;AACA,QAAI,MAAM,GAAG,KAAK,OAAL,CAAa,WAAb,CAAyB,MAAzB,CAAb,CANsB,CAQtB;;;AACA,QAAI,MAAM,CAAC,MAAP,KAAkB,MAAtB,EAA8B;AAC1B,YAAM,IAAI,KAAJ,CAAU,kDAAV,CAAN;AACH,KAXqB,CAatB;;;AACA,QAAM,GAAG,GAAG,IAAI,UAAJ,CAAe,MAAf,CAAZ,CAdsB,CAgBtB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,CAAC,EAAjC,EAAqC;AACjC,MAAA,GAAG,CAAC,CAAD,CAAH,GAAS,MAAM,CAAC,CAAD,CAAf;AACH,KAnBqB,CAqBtB;;;AACA,IAAA,MAAA,CAAA,IAAA,CAAK,MAAL;AAEA,WAAO,GAAP;AACH,GAzBD;;AA0BJ,SAAA,gBAAA;AAAC,CA3CD,EAAA;;AAAa,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar wipe_1 = require(\"@stablelib/wipe\");\nvar NodeRandomSource = /** @class */ (function () {\n    function NodeRandomSource() {\n        this.isAvailable = false;\n        this.isInstantiated = false;\n        if (typeof require !== \"undefined\") {\n            var nodeCrypto = require(\"crypto\");\n            if (nodeCrypto && nodeCrypto.randomBytes) {\n                this._crypto = nodeCrypto;\n                this.isAvailable = true;\n                this.isInstantiated = true;\n            }\n        }\n    }\n    NodeRandomSource.prototype.randomBytes = function (length) {\n        if (!this.isAvailable || !this._crypto) {\n            throw new Error(\"Node.js random byte generator is not available.\");\n        }\n        // Get random bytes (result is Buffer).\n        var buffer = this._crypto.randomBytes(length);\n        // Make sure we got the length that we requested.\n        if (buffer.length !== length) {\n            throw new Error(\"NodeRandomSource: got fewer bytes than requested\");\n        }\n        // Allocate output array.\n        var out = new Uint8Array(length);\n        // Copy bytes from buffer to output.\n        for (var i = 0; i < out.length; i++) {\n            out[i] = buffer[i];\n        }\n        // Cleanup.\n        wipe_1.wipe(buffer);\n        return out;\n    };\n    return NodeRandomSource;\n}());\nexports.NodeRandomSource = NodeRandomSource;\n//# sourceMappingURL=node.js.map"]},"metadata":{},"sourceType":"script"}