'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.HTTP = exports.Method = void 0;
const XHR2 = require('xhr2');
var Method;
(function (Method) {
    Method[Method["GET"] = 0] = "GET";
    Method[Method["POST"] = 1] = "POST";
})(Method = exports.Method || (exports.Method = {}));
const post = function (url, body, timeout = 0) {
    return request(Method.POST, url, body, timeout);
};
const get = function (url, timeout = 0) {
    return request(Method.GET, url, null, timeout);
};
exports.HTTP = { get, post };
const request = function (method, url, body, timeout) {
    return new Promise((resolve, reject) => {
        const xhr = new XHR2();
        xhr.timeout = timeout;
        xhr.open(Method[method], url);
        xhr.onreadystatechange = () => {
            if (xhr.readyState === 4) {
                const res = {
                    Code: xhr.status,
                    Body: null,
                };
                if (xhr.status === 200) {
                    try {
                        res.Body = JSON.parse(xhr.responseText);
                    }
                    catch (e) {
                        return reject(new Error(`[meter-provider]Error parsing the response: ${e.message}`));
                    }
                }
                else if (xhr.responseText && xhr.responseText.length) {
                    res.Body = xhr.responseText;
                }
                return resolve(res);
            }
        };
        xhr.ontimeout = () => {
            return reject(new Error(`[meter-provider]Time out for whatever reason, check your provider`));
        };
        try {
            xhr.send(method === Method.POST ? JSON.stringify(body) : null);
        }
        catch (e) {
            return reject(new Error(`[meter-provider]Connect error: ${e.message}`));
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2ltcGxlLWh0dHAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcHJvdmlkZXIvc2ltcGxlLWh0dHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFBOzs7QUFDWixNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7QUFRNUIsSUFBWSxNQUdYO0FBSEQsV0FBWSxNQUFNO0lBQ2QsaUNBQU0sQ0FBQTtJQUNOLG1DQUFJLENBQUE7QUFDUixDQUFDLEVBSFcsTUFBTSxHQUFOLGNBQU0sS0FBTixjQUFNLFFBR2pCO0FBRUQsTUFBTSxJQUFJLEdBQUcsVUFBUyxHQUFXLEVBQUUsSUFBWSxFQUFFLE9BQU8sR0FBRSxDQUFDO0lBQ3ZELE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQTtBQUNuRCxDQUFDLENBQUE7QUFFRCxNQUFNLEdBQUcsR0FBRyxVQUFTLEdBQVcsRUFBRSxPQUFPLEdBQUcsQ0FBQztJQUN6QyxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7QUFDbEQsQ0FBQyxDQUFBO0FBRVksUUFBQSxJQUFJLEdBQUcsRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFDLENBQUE7QUFFL0IsTUFBTSxPQUFPLEdBQUcsVUFBUyxNQUFjLEVBQUUsR0FBVyxFQUFFLElBQW1CLEVBQUUsT0FBZTtJQUV0RixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1FBQ25DLE1BQU0sR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUE7UUFDdEIsR0FBRyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7UUFDckIsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUE7UUFFN0IsR0FBRyxDQUFDLGtCQUFrQixHQUFHLEdBQUcsRUFBRTtZQUMxQixJQUFJLEdBQUcsQ0FBQyxVQUFVLEtBQUssQ0FBQyxFQUFFO2dCQUN0QixNQUFNLEdBQUcsR0FBbUI7b0JBQ3hCLElBQUksRUFBRSxHQUFHLENBQUMsTUFBZ0I7b0JBQzFCLElBQUksRUFBRSxJQUFJO2lCQUNiLENBQUE7Z0JBRUQsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTtvQkFDcEIsSUFBSTt3QkFDQSxHQUFHLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFBO3FCQUMxQztvQkFBQyxPQUFPLENBQUMsRUFBRTt3QkFDUixPQUFPLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQTtxQkFDdkY7aUJBQ0o7cUJBQU0sSUFBSSxHQUFHLENBQUMsWUFBWSxJQUFJLEdBQUcsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFO29CQUNwRCxHQUFHLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxZQUFZLENBQUE7aUJBQzlCO2dCQUVELE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFBO2FBQ3RCO1FBQ0wsQ0FBQyxDQUFBO1FBRUQsR0FBRyxDQUFDLFNBQVMsR0FBRyxHQUFHLEVBQUU7WUFDakIsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsbUVBQW1FLENBQUMsQ0FBQyxDQUFBO1FBQ2pHLENBQUMsQ0FBQTtRQUVELElBQUk7WUFDQSxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtTQUNqRTtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1IsT0FBTyxNQUFNLENBQUMsSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUE7U0FDMUU7SUFDTCxDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQSJ9