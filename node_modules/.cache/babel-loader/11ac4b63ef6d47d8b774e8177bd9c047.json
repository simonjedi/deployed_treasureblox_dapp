{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useRef, useEffect, useCallback } from \"react\"; // import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\n\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound'; //\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\n\nimport './style.css';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactAudioPlayer from 'react-audio-player'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useWindowSize() {\n  _s();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\n_s(useWindowSize, \"WMqaMVAPr0u8CJVTsAIdEuYrbbM=\");\n\nconst FighterScreen = props => {\n  _s2();\n\n  const {\n    width,\n    height\n  } = useWindowSize();\n  const canvasRef = useRef(null);\n\n  const draw = ctx => {\n    ctx.fillStyle = '#000000';\n    ctx.beginPath();\n    ctx.arc(500, 100, 20, 0, 2 * Math.PI);\n    ctx.fill();\n  };\n\n  const drawRect = ctx => {\n    // Draw player rect first\n    ctx.fillStyle = \"#901234\";\n    ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n    rectangles.forEach(rect => {\n      ctx.fillStyle = rect.color;\n      ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n    });\n  }; // const ctx = canvas.getContext(\"2d\");\n  // Global Varabales\n\n\n  let controlPlayer = false;\n  let hasGameStarted = false; // Prevent game from working whilst page reloads\n\n  let hasGameOver = false;\n  let startDate = null;\n\n  function millisecondsToMiutes(millis) {\n    let minutes = Math.floor(millis / 60000);\n    let seconds = Math.floor(millis % 60000 / 1000);\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n  }\n\n  function gameOver() {\n    if (!hasGameOver) {\n      let endDate = new Date();\n      let timeDiff = endDate - startDate;\n\n      if (timeDiff < 60000) {\n        alert('You survived ' + timeDiff / 1000 + \" seconds!\");\n      } else {\n        let minutesSurvived = millisecondsToMiutes(timeDiff);\n        alert('You survived ${minutesSurvived} WOW!');\n      }\n\n      hasGameOver = true;\n      window.location.reload();\n    }\n  } // Canvas black boarder\n\n\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n  }; // Game Elements\n\n  let rectangles = [{\n    x: 75,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  }, {\n    x: 400,\n    y: 75,\n    dx: -5,\n    dy: 5.5,\n    width: 80,\n    height: 60,\n    color: \"#000099\"\n  }, {\n    x: 75,\n    y: 445,\n    dx: 5,\n    dy: -5,\n    width: 40,\n    height: 80,\n    color: \"#000099\"\n  }, {\n    x: 420,\n    y: 450,\n    dx: -5,\n    dy: -5,\n    width: 130,\n    height: 25,\n    color: \"#000099\"\n  }];\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d'); //Our draw come here\n\n    drawRect(ctx);\n    drawBoarder(ctx, canvas);\n    boarderRectangleDetection(ctx, canvas);\n  }, [drawRect]); // Render rectangles to canvas\n\n  const drawBoarder = (ctx, canvas) => {\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.clearRect(50, 50, 500, 500);\n  };\n\n  const boarderRectangleDetection = (ctx, canvas) => {\n    rectangles.forEach(rect => {\n      if (rect.x + rect.width > canvas.width || rect.x < 0) {\n        rect.dx *= -1;\n      }\n\n      if (rect.y + rect.height > canvas.height || rect.y < 0) {\n        rect.dy *= -1;\n      }\n    });\n  };\n\n  function update() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawBoarder();\n    drawRect();\n\n    if (hasGameStarted) {\n      moveRectangle();\n    }\n\n    playerCollisionDetection();\n    rectangleCollisionDetection();\n    boarderRectangleDetection();\n    requestAnimationFrame(update);\n  } // call update methord on initial document load\n\n\n  update();\n  canvas.addEventListener('mousedown', e => {\n    // get x & y coordinates in relation to the canvas\n    var pos = {\n      x: e.clientX - canvas.offsetLeft,\n      y: e.clientY - canvas.offsetTop\n    }; // See if they clicked on red square\n\n    if (isCursorInRect(pos.x, pos.y, playerRect)) {\n      //\n      if (!hasGameStarted) {\n        startDate = new Date();\n        configureRectSpeed();\n      }\n\n      hasGameStarted = true;\n      controlPlayer = true;\n    }\n  });\n  canvas.addEventListener(\"mousemove\", e => {\n    if (controlPlayer && !hasGameOver) {\n      // get x & y coordinates in relation to the canvas\n      var pos = {\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop\n      };\n      playerRect.x = pos.x - 25;\n      playerRect.y = pos.y - 25;\n    }\n  });\n  canvas.addEventListener(\"mouseup\", () => {\n    controlPlayer = false;\n  }); // const canvas = document.getElementById(\"canvas\");\n  // collision\n\n  function playerCollisionDetection() {\n    if (playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50) {\n      gameOver();\n    }\n  }\n\n  function isRectangleCollision(rect1, rect2) {\n    return !(rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y);\n  }\n\n  function rectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n      if (isRectangleCollision(playerRect, rect)) {\n        gameOver();\n      }\n    });\n  }\n\n  function moveRectangle() {\n    rectangles.forEach(rect => {\n      rect.x += rect.dx;\n      rect.y += rect.dy;\n    });\n  }\n\n  let numberOfSpeed = 0;\n\n  function configureRectSpeed() {\n    const speedUpGame = setInterval(() => {\n      numberOfSpeed++;\n      rectangles.forEach(rect => {\n        rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n        rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n      });\n\n      if (numberOfSpeed === 4) {\n        clearInterval(speedUpGame);\n      }\n    }, 10000);\n  } // Returns true if collision\n\n\n  function isCursorInRect(x, y, rect) {\n    return x > rect.x && x < rect.x + rect.width && y > rect.y && y < rect.y + rect.height;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"center\", {\n      children: [\"Fighter Pilot\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        ...props,\n        width: \"600\",\n        height: \"600\",\n        id: \"canvas\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 350,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(FighterScreen, \"4q3um/faSfRHZBERDGr/KHl0dMU=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = FighterScreen;\nexport default FighterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FighterScreen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js"],"names":["useState","useRef","useEffect","useCallback","Button","Container","Nav","Navbar","NavDropdown","useSound","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactAudioPlayer","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","FighterScreen","props","canvasRef","draw","ctx","fillStyle","beginPath","arc","Math","PI","fill","drawRect","fillRect","playerRect","x","y","rectangles","forEach","rect","color","controlPlayer","hasGameStarted","hasGameOver","startDate","millisecondsToMiutes","millis","minutes","floor","seconds","gameOver","endDate","Date","timeDiff","alert","minutesSurvived","location","reload","dx","dy","canvas","current","getContext","drawBoarder","boarderRectangleDetection","clearRect","update","moveRectangle","playerCollisionDetection","rectangleCollisionDetection","requestAnimationFrame","e","pos","clientX","offsetLeft","clientY","offsetTop","isCursorInRect","configureRectSpeed","isRectangleCollision","rect1","rect2","numberOfSpeed","speedUpGame","setInterval","clearInterval"],"mappings":"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","sourcesContent":["\nimport { useState, useRef, useEffect, useCallback } from \"react\";\n\n// import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\nimport { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound';\n//\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\nimport './style.css';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n// Hook\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\n\n\nconst FighterScreen = (props) =>{\n\n  const { width, height } = useWindowSize();\n\n  const canvasRef = useRef(null)\n\n  const draw = ctx => {\n    ctx.fillStyle = '#000000'\n    ctx.beginPath()\n    ctx.arc(500, 100, 20, 0, 2*Math.PI)\n    ctx.fill()\n  }\n\n  const drawRect = ctx => {\n    // Draw player rect first\n    ctx.fillStyle = \"#901234\";\n    ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n\n    rectangles.forEach(rect => {\n      ctx.fillStyle = rect.color;\n      ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n    });\n}\n\n\n\n\n  // const ctx = canvas.getContext(\"2d\");\n\n  // Global Varabales\n\n  let controlPlayer = false;\n  let hasGameStarted = false;\n\n\n  // Prevent game from working whilst page reloads\n  let hasGameOver = false;\n  let startDate = null;\n\n  function millisecondsToMiutes(millis){\n    let minutes = Math.floor(millis/60000);\n    let seconds = Math.floor((millis % 60000)/1000);\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n\n  }\n\n  function gameOver(){\n    if(!hasGameOver){\n      let endDate = new Date();\n      let timeDiff = endDate - startDate;\n      if (timeDiff < 60000){\n        alert('You survived '+ timeDiff/1000 +\" seconds!\");\n      }else{\n        let minutesSurvived = millisecondsToMiutes(timeDiff);\n        alert('You survived ${minutesSurvived} WOW!');\n\n      }\n\n      hasGameOver = true;\n      window.location.reload();\n    }\n  }\n\n\n  // Canvas black boarder\n\n\n\n  let playerRect = {\n    x:275,\n    y:275,\n    width:50,\n    height:50,\n  }\n\n  // Game Elements\n  let rectangles = [\n    {\n      x:75,\n      y:75,\n      dx:5,\n      dy:4,\n      width:75,\n      height:75,\n      color:\"#000099\",\n    },\n    {\n      x:400,\n      y:75,\n      dx:-5,\n      dy:5.5,\n      width:80,\n      height:60,\n      color:\"#000099\",\n    },\n    {\n      x:75,\n      y:445,\n      dx:5,\n      dy:-5,\n      width:40,\n      height:80,\n      color:\"#000099\",\n    },\n    {\n      x:420,\n      y:450,\n      dx:-5,\n      dy:-5,\n      width:130,\n      height:25,\n      color:\"#000099\",\n    },\n  ]\n\n\n  useEffect(() => {\n\n    const canvas = canvasRef.current\n    const ctx = canvas.getContext('2d')\n\n\n\n    //Our draw come here\n    drawRect(ctx)\n    drawBoarder(ctx,canvas)\n    boarderRectangleDetection(ctx,canvas)\n  }, [drawRect])\n\n\n  // Render rectangles to canvas\n\n\n\n\n  const drawBoarder = (ctx,canvas) => {\n\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0,0,canvas.width,canvas.height);\n    ctx.clearRect(50,50,500,500);\n  }\n\n  const boarderRectangleDetection = (ctx,canvas) => {\n\n    rectangles.forEach(rect=>{\n      if(rect.x + rect.width > canvas.width || rect.x < 0){\n        rect.dx *= -1;\n      }\n      if(rect.y + rect.height > canvas.height || rect.y < 0){\n        rect.dy *= -1;\n      }\n    })\n  }\n\n  function update(){\n    ctx.clearRect(0,0,canvas.width,canvas.height);\n\n    drawBoarder();\n    drawRect();\n\n    if (hasGameStarted){\n      moveRectangle();\n    }\n\n    playerCollisionDetection();\n    rectangleCollisionDetection();\n    boarderRectangleDetection();\n    requestAnimationFrame(update);\n  }\n\n  // call update methord on initial document load\n  update();\n\n\n\n\n  canvas.addEventListener('mousedown', e => {\n\n    // get x & y coordinates in relation to the canvas\n    var pos = {\n      x: e.clientX - canvas.offsetLeft,\n      y: e.clientY - canvas.offsetTop,\n    };\n\n    // See if they clicked on red square\n    if (isCursorInRect(pos.x,pos.y,playerRect)){\n      //\n      if(!hasGameStarted){\n        startDate = new Date();\n        configureRectSpeed();\n      }\n      hasGameStarted = true;\n      controlPlayer = true;\n    }\n\n  });\n\n\n  canvas.addEventListener(\"mousemove\", e => {\n\n    if(controlPlayer && !hasGameOver){\n      // get x & y coordinates in relation to the canvas\n      var pos = {\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop,\n      };\n      playerRect.x = pos.x - 25;\n      playerRect.y = pos.y - 25;\n    }\n\n  })\n\n\n\n  canvas.addEventListener(\"mouseup\", () =>{\n    controlPlayer = false;\n  })\n\n  // const canvas = document.getElementById(\"canvas\");\n\n\n\n\n  // collision\n  function playerCollisionDetection(){\n    if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n    ){\n      gameOver();\n    }\n  }\n\n  function isRectangleCollision(rect1,rect2){\n    return !(\n      rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n    );\n  }\n\n  function rectangleCollisionDetection(){\n    rectangles.forEach(rect =>{\n      if(isRectangleCollision(playerRect,rect)){\n        gameOver();\n      }\n    })\n  }\n\n  function moveRectangle(){\n    rectangles.forEach(rect => {\n      rect.x += rect.dx;\n      rect.y += rect.dy;\n    })\n  }\n\n\n\n  let numberOfSpeed = 0;\n\n  function configureRectSpeed(){\n    const speedUpGame = setInterval(()=>{\n      numberOfSpeed++;\n      rectangles.forEach(rect =>{\n        rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n        rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n\n      });\n      if(numberOfSpeed === 4){\n        clearInterval(speedUpGame);\n      }\n    },10000)\n  }\n\n\n\n\n  // Returns true if collision\n  function isCursorInRect(x,y,rect){\n    return(x > rect.x && x < rect.x+rect.width && y > rect.y && y < rect.y+rect.height);\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  return (\n    <div>\n\n<center>\nFighter Pilot<br/>\n<canvas ref={canvasRef} {...props} width=\"600\" height=\"600\" id=\"canvas\"> </canvas>\n\n</center>\n<br/>\n    </div>\n  );\n}\n\nexport default FighterScreen;\n"]},"metadata":{},"sourceType":"module"}