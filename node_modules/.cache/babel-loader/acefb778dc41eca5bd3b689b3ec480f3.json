{"ast":null,"code":"import { aesCbcEncrypt, aesCbcDecrypt, hmacSha256Sign, hmacSha256Verify, randomBytes, sha512, IV_LENGTH, ERROR_BAD_MAC, assert } from \"@walletconnect/crypto\";\nimport { concatArrays } from \"@walletconnect/encoding\";\nimport { getEncryptionKey, getMacKey, getSharedKey, getSenderKeyPair, serialize, deserialize } from \"./shared\";\n\nasync function getEciesKeys(sharedKey) {\n  const hash = await sha512(sharedKey);\n  return {\n    encryptionKey: getEncryptionKey(hash),\n    macKey: getMacKey(hash)\n  };\n}\n\nexport async function encryptWithSharedKey(msg, sharedKey, publicKey, iv = randomBytes(IV_LENGTH)) {\n  const {\n    encryptionKey,\n    macKey\n  } = await getEciesKeys(sharedKey);\n  const ciphertext = await aesCbcEncrypt(iv, encryptionKey, msg);\n  const dataToMac = concatArrays(iv, publicKey, ciphertext);\n  const mac = await hmacSha256Sign(macKey, dataToMac);\n  return serialize({\n    iv,\n    publicKey,\n    ciphertext,\n    mac\n  });\n}\nexport async function encrypt(msg, receiverPublicKey, opts) {\n  const {\n    publicKey,\n    privateKey\n  } = getSenderKeyPair(opts);\n  const sharedKey = getSharedKey(privateKey, receiverPublicKey);\n  return encryptWithSharedKey(msg, sharedKey, publicKey, opts === null || opts === void 0 ? void 0 : opts.iv);\n}\nexport async function decryptWithSharedKey(encrypted, sharedKey) {\n  const {\n    iv,\n    publicKey,\n    mac,\n    ciphertext\n  } = deserialize(encrypted);\n  const {\n    encryptionKey,\n    macKey\n  } = await getEciesKeys(sharedKey);\n  const dataToMac = concatArrays(iv, publicKey, ciphertext);\n  const macTest = await hmacSha256Verify(macKey, dataToMac, mac);\n  assert(macTest, ERROR_BAD_MAC);\n  const msg = await aesCbcDecrypt(iv, encryptionKey, ciphertext);\n  return msg;\n}\nexport async function decrypt(encrypted, privateKey) {\n  const {\n    publicKey\n  } = deserialize(encrypted);\n  const sharedKey = getSharedKey(privateKey, publicKey);\n  return decryptWithSharedKey(encrypted, sharedKey);\n}","map":{"version":3,"sources":["../../../src/ecies/async.ts"],"names":[],"mappings":"AAAA,SACE,aADF,EAEE,aAFF,EAGE,cAHF,EAIE,gBAJF,EAKE,WALF,EAME,MANF,EAOE,SAPF,EAQE,aARF,EAUE,MAVF,QAWO,uBAXP;AAYA,SAAS,YAAT,QAA6B,yBAA7B;AAEA,SACE,gBADF,EAEE,SAFF,EAGE,YAHF,EAIE,gBAJF,EAKE,SALF,EAME,WANF,QAOO,UAPP;;AASA,eAAe,YAAf,CAA4B,SAA5B,EAAiD;AAC/C,QAAM,IAAI,GAAG,MAAM,MAAM,CAAC,SAAD,CAAzB;AACA,SAAO;AAAE,IAAA,aAAa,EAAE,gBAAgB,CAAC,IAAD,CAAjC;AAAyC,IAAA,MAAM,EAAE,SAAS,CAAC,IAAD;AAA1D,GAAP;AACD;;AAED,OAAO,eAAe,oBAAf,CACL,GADK,EAEL,SAFK,EAGL,SAHK,EAIL,EAAA,GAAiB,WAAW,CAAC,SAAD,CAJvB,EAIkC;AAEvC,QAAM;AAAE,IAAA,aAAF;AAAiB,IAAA;AAAjB,MAA4B,MAAM,YAAY,CAAC,SAAD,CAApD;AACA,QAAM,UAAU,GAAG,MAAM,aAAa,CAAC,EAAD,EAAK,aAAL,EAAoB,GAApB,CAAtC;AACA,QAAM,SAAS,GAAG,YAAY,CAAC,EAAD,EAAK,SAAL,EAAgB,UAAhB,CAA9B;AACA,QAAM,GAAG,GAAG,MAAM,cAAc,CAAC,MAAD,EAAS,SAAT,CAAhC;AACA,SAAO,SAAS,CAAC;AAAE,IAAA,EAAF;AAAM,IAAA,SAAN;AAAiB,IAAA,UAAjB;AAA6B,IAAA;AAA7B,GAAD,CAAhB;AACD;AAED,OAAO,eAAe,OAAf,CACL,GADK,EAEL,iBAFK,EAGL,IAHK,EAGa;AAElB,QAAM;AAAE,IAAA,SAAF;AAAa,IAAA;AAAb,MAA4B,gBAAgB,CAAC,IAAD,CAAlD;AACA,QAAM,SAAS,GAAG,YAAY,CAAC,UAAD,EAAa,iBAAb,CAA9B;AACA,SAAO,oBAAoB,CAAC,GAAD,EAAM,SAAN,EAAiB,SAAjB,EAA4B,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,EAAlC,CAA3B;AACD;AAED,OAAO,eAAe,oBAAf,CACL,SADK,EAEL,SAFK,EAEgB;AAErB,QAAM;AAAE,IAAA,EAAF;AAAM,IAAA,SAAN;AAAiB,IAAA,GAAjB;AAAsB,IAAA;AAAtB,MAAqC,WAAW,CAAC,SAAD,CAAtD;AACA,QAAM;AAAE,IAAA,aAAF;AAAiB,IAAA;AAAjB,MAA4B,MAAM,YAAY,CAAC,SAAD,CAApD;AACA,QAAM,SAAS,GAAG,YAAY,CAAC,EAAD,EAAK,SAAL,EAAgB,UAAhB,CAA9B;AACA,QAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,MAAD,EAAS,SAAT,EAAoB,GAApB,CAAtC;AACA,EAAA,MAAM,CAAC,OAAD,EAAU,aAAV,CAAN;AACA,QAAM,GAAG,GAAG,MAAM,aAAa,CAAC,EAAD,EAAK,aAAL,EAAoB,UAApB,CAA/B;AACA,SAAO,GAAP;AACD;AAED,OAAO,eAAe,OAAf,CACL,SADK,EAEL,UAFK,EAEiB;AAEtB,QAAM;AAAE,IAAA;AAAF,MAAgB,WAAW,CAAC,SAAD,CAAjC;AACA,QAAM,SAAS,GAAG,YAAY,CAAC,UAAD,EAAa,SAAb,CAA9B;AACA,SAAO,oBAAoB,CAAC,SAAD,EAAY,SAAZ,CAA3B;AACD","sourceRoot":"","sourcesContent":["import { aesCbcEncrypt, aesCbcDecrypt, hmacSha256Sign, hmacSha256Verify, randomBytes, sha512, IV_LENGTH, ERROR_BAD_MAC, assert, } from \"@walletconnect/crypto\";\nimport { concatArrays } from \"@walletconnect/encoding\";\nimport { getEncryptionKey, getMacKey, getSharedKey, getSenderKeyPair, serialize, deserialize, } from \"./shared\";\nasync function getEciesKeys(sharedKey) {\n    const hash = await sha512(sharedKey);\n    return { encryptionKey: getEncryptionKey(hash), macKey: getMacKey(hash) };\n}\nexport async function encryptWithSharedKey(msg, sharedKey, publicKey, iv = randomBytes(IV_LENGTH)) {\n    const { encryptionKey, macKey } = await getEciesKeys(sharedKey);\n    const ciphertext = await aesCbcEncrypt(iv, encryptionKey, msg);\n    const dataToMac = concatArrays(iv, publicKey, ciphertext);\n    const mac = await hmacSha256Sign(macKey, dataToMac);\n    return serialize({ iv, publicKey, ciphertext, mac });\n}\nexport async function encrypt(msg, receiverPublicKey, opts) {\n    const { publicKey, privateKey } = getSenderKeyPair(opts);\n    const sharedKey = getSharedKey(privateKey, receiverPublicKey);\n    return encryptWithSharedKey(msg, sharedKey, publicKey, opts === null || opts === void 0 ? void 0 : opts.iv);\n}\nexport async function decryptWithSharedKey(encrypted, sharedKey) {\n    const { iv, publicKey, mac, ciphertext } = deserialize(encrypted);\n    const { encryptionKey, macKey } = await getEciesKeys(sharedKey);\n    const dataToMac = concatArrays(iv, publicKey, ciphertext);\n    const macTest = await hmacSha256Verify(macKey, dataToMac, mac);\n    assert(macTest, ERROR_BAD_MAC);\n    const msg = await aesCbcDecrypt(iv, encryptionKey, ciphertext);\n    return msg;\n}\nexport async function decrypt(encrypted, privateKey) {\n    const { publicKey } = deserialize(encrypted);\n    const sharedKey = getSharedKey(privateKey, publicKey);\n    return decryptWithSharedKey(encrypted, sharedKey);\n}\n//# sourceMappingURL=async.js.map"]},"metadata":{},"sourceType":"module"}