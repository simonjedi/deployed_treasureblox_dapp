"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const blake2b_1 = require("./cry/blake2b");
/**
 * 2048 bits Bloom filter
 */
class Bloom {
    /**
     * new bloom filter instance
     * @param k number of hash functions
     * @param bits leave it out to construct an empty one
     */
    constructor(k, bits) {
        if (bits) {
            this.bits = bits;
        }
        else {
            this.bits = Buffer.alloc(Bloom.BITS_LENGTH / 8);
        }
        this.k = k;
    }
    /** estimate k(number of hash functions) according to item count */
    static estimateK(itemCount) {
        const k = Math.round((this.BITS_LENGTH / itemCount) * Math.LN2);
        return Math.max(Math.min(k, this.MAX_K), 1);
    }
    /**
     * add item
     * @param item
     */
    add(item) {
        this.distribute(item, (index, bit) => {
            this.bits[index] |= bit;
            return true;
        });
    }
    /**
     * test if an item contained. (false positive)
     * @param item
     */
    test(item) {
        return this.distribute(item, (index, bit) => {
            return (this.bits[index] & bit) === bit;
        });
    }
    distribute(item, cb) {
        const hash = blake2b_1.blake2b256(item);
        for (let i = 0; i < this.k; i += 1) {
            const d = (hash[i * 2 + 1] + (hash[i * 2] << 8)) % Bloom.BITS_LENGTH;
            const bit = 1 << d % 8;
            if (!cb(Math.floor(d / 8), bit)) {
                return false;
            }
        }
        return true;
    }
}
exports.Bloom = Bloom;
/** number of hash functions */
Bloom.MAX_K = 16;
/** bit length */
Bloom.BITS_LENGTH = 2048;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvb20uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYmxvb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBMkM7QUFFM0M7O0dBRUc7QUFDSCxNQUFhLEtBQUs7SUFpQmhCOzs7O09BSUc7SUFDSCxZQUFZLENBQVMsRUFBRSxJQUFhO1FBQ2xDLElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FDbEI7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDYixDQUFDO0lBdEJELG1FQUFtRTtJQUM1RCxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQWlCO1FBQ3ZDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoRSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFvQkQ7OztPQUdHO0lBQ0ksR0FBRyxDQUFDLElBQVk7UUFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUM7WUFDeEIsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSSxJQUFJLENBQUMsSUFBWTtRQUN0QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxVQUFVLENBQUMsSUFBWSxFQUFFLEVBQTJDO1FBQzFFLE1BQU0sSUFBSSxHQUFHLG9CQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNsQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7WUFDckUsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRTtnQkFDL0IsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOztBQTlESCxzQkErREM7QUE5REMsK0JBQStCO0FBQ1IsV0FBSyxHQUFHLEVBQUUsQ0FBQztBQUVsQyxpQkFBaUI7QUFDTSxpQkFBVyxHQUFHLElBQUksQ0FBQyJ9