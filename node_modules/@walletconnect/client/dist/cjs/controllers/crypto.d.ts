import { Logger } from "pino";
import { JsonRpcPayload } from "@walletconnect/jsonrpc-utils";
import { IClient, CryptoTypes, ICrypto, IKeyChain } from "@walletconnect/types";
export declare class KeyChain implements IKeyChain {
    client: IClient;
    logger: Logger;
    keychain: Map<string, string>;
    name: string;
    constructor(client: IClient, logger: Logger);
    get context(): string;
    init(): Promise<void>;
    has(tag: string, opts?: any): Promise<boolean>;
    set(tag: string, key: string, opts?: any): Promise<void>;
    get(tag: string, opts?: any): Promise<string>;
    del(tag: string, opts?: any): Promise<void>;
    private restore;
    private persist;
}
export declare class Crypto implements ICrypto {
    client: IClient;
    logger: Logger;
    name: string;
    keychain: IKeyChain;
    constructor(client: IClient, logger: Logger, keychain?: IKeyChain);
    get context(): string;
    init(): Promise<void>;
    hasKeys(tag: string): Promise<boolean>;
    generateKeyPair(): Promise<string>;
    generateSharedKey(self: CryptoTypes.Participant, peer: CryptoTypes.Participant, overrideTopic?: string): Promise<string>;
    encrypt(topic: string, message: string): Promise<string>;
    decrypt(topic: string, encrypted: string): Promise<string>;
    encodeJsonRpc(topic: string, payload: JsonRpcPayload): Promise<string>;
    decodeJsonRpc(topic: string, encrypted: string): Promise<JsonRpcPayload>;
    private concatKeys;
    private splitKeys;
    private setKeyPair;
    private getKeyPair;
    private setEncryptionKeys;
    private getEncryptionKeys;
}
//# sourceMappingURL=crypto.d.ts.map