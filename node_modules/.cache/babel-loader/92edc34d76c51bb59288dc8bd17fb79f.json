{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/Connection.js\",\n    _s = $RefreshSig$();\n\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport { useWallet, UseWalletProvider } from 'use-wallet';\nimport { Button } from 'react-bootstrap';\nimport MyNav from \"./MyNav\";\nimport App from \"./App\";\nimport getWeb3 from \"./getWeb3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Connection = props => {\n  _s();\n\n  const wallet = useWallet();\n  const [firstPartAddress, setFirstPartAddress] = useState('Connect Wallet');\n  const [secondPartAddress, setSecondPartAddress] = useState('');\n  useEffect(() => {\n    const init = async () => {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const usersAccount = accounts[0];\n      const stringOfUsersAccount = new String(usersAccount);\n      console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n\n      setFirstPartAddress(stringOfUsersAccount.slice(0, 5));\n      setSecondPartAddress('____' + stringOfUsersAccount.slice(37, 42));\n    };\n\n    init();\n  });\n\n  const connectWallet = async e => {\n    await wallet.connect(\"walletconnect\");\n    const usersAccount = props.accounts;\n    const stringOfUsersAccount = new String(usersAccount);\n    console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n\n    setFirstPartAddress('Welcome');\n    setSecondPartAddress('');\n    window.location.reload();\n  };\n\n  const {\n    createSession,\n    killSession,\n    session,\n    signTransaction\n  } = useWalletConnect();\n  const hasWallet = !!session.length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      onClick: connectWallet,\n      id: \"wallet-button\",\n      className: \"customButton enableEthereumButton\",\n      children: [firstPartAddress, secondPartAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [!hasWallet && /*#__PURE__*/_jsxDEV(Button, {\n        title: \"Connect\",\n        onPress: createSession\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }, this), !!hasWallet && /*#__PURE__*/_jsxDEV(Button, {\n        title: \"Sign Transaction\",\n        onPress: () => signTransaction({\n          from: \"0xbc28Ea04101F03aA7a94C1379bc3AB32E65e62d3\",\n          to: \"0x89D24A7b4cCB1b6fAA2625Fe562bDd9A23260359\",\n          data: \"0x\",\n          gasPrice: \"0x02540be400\",\n          gas: \"0x9c40\",\n          value: \"0x00\",\n          nonce: \"0x0114\"\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }, this), !!hasWallet && /*#__PURE__*/_jsxDEV(Button, {\n        title: \"Disconnect\",\n        onPress: killSession\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}; // Wrap everything in <UseWalletProvider />\n\n\n_s(Connection, \"oXn1LzIN5Pa61QAe0EWlyJUOE9Y=\", true, function () {\n  return [useWallet];\n});\n\n_c = Connection;\nexport default (props => /*#__PURE__*/_jsxDEV(UseWalletProvider, {\n  chainId: 1337,\n  connectors: {\n    // This is how connectors get configured\n    provided: {\n      provider: window.cleanEthereum\n    }\n  },\n  children: /*#__PURE__*/_jsxDEV(Connection, {\n    accounts: props.accounts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 91,\n  columnNumber: 3\n}, this));\n\nvar _c;\n\n$RefreshReg$(_c, \"Connection\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/Connection.js"],"names":["React","useState","useEffect","useWallet","UseWalletProvider","Button","MyNav","App","getWeb3","Connection","props","wallet","firstPartAddress","setFirstPartAddress","secondPartAddress","setSecondPartAddress","init","web3","accounts","eth","getAccounts","usersAccount","stringOfUsersAccount","String","console","log","slice","connectWallet","e","connect","window","location","reload","createSession","killSession","session","signTransaction","useWalletConnect","hasWallet","length","from","to","data","gasPrice","gas","value","nonce","provided","provider","cleanEthereum"],"mappings":"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","sourcesContent":["// App.js\n\nimport React, {useState, useEffect} from 'react'\nimport { useWallet, UseWalletProvider } from 'use-wallet'\nimport { Button } from 'react-bootstrap';\n\nimport MyNav from \"./MyNav\";\nimport App from \"./App\";\nimport getWeb3 from \"./getWeb3\";\n\n\n\n\nconst Connection = (props) =>  {\n\n\n\n  const wallet = useWallet()\n  const [firstPartAddress, setFirstPartAddress] = useState('Connect Wallet');\n  const [secondPartAddress, setSecondPartAddress] = useState('');\n\n  useEffect(() => {\n\n     const init = async() => {\n       const web3 = await getWeb3();\n       const accounts = await web3.eth.getAccounts();\n       const usersAccount = accounts[0];\n       const stringOfUsersAccount = new String(usersAccount)\n       console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n       setFirstPartAddress(stringOfUsersAccount.slice(0, 5));\n       setSecondPartAddress('____'+stringOfUsersAccount.slice(37, 42));\n\n     }\n     init()\n   });\n\n  const connectWallet = async(e) => {\n    await wallet.connect(\"walletconnect\")\n    const usersAccount = props.accounts;\n    const stringOfUsersAccount = new String(usersAccount)\n    console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n    setFirstPartAddress('Welcome');\n    setSecondPartAddress('');\n    window.location.reload();\n\n  }\n\n\n  const {\n    createSession,\n    killSession,\n    session,\n    signTransaction,\n  } = useWalletConnect();\n  const hasWallet = !!session.length;\n\n  return(\n    <div>\n      <Button onClick={connectWallet} id=\"wallet-button\" className=\"customButton enableEthereumButton\">{firstPartAddress}{secondPartAddress}</Button>\n      <>\n            {!hasWallet && (\n              <Button title=\"Connect\" onPress={createSession} />\n            )}\n            {!!hasWallet && (\n              <Button\n                title=\"Sign Transaction\"\n                onPress={() => signTransaction({\n                  from: \"0xbc28Ea04101F03aA7a94C1379bc3AB32E65e62d3\",\n                  to: \"0x89D24A7b4cCB1b6fAA2625Fe562bDd9A23260359\",\n                  data: \"0x\",\n                  gasPrice: \"0x02540be400\",\n                  gas: \"0x9c40\",\n                  value: \"0x00\",\n                  nonce: \"0x0114\",\n                })}\n              />\n            )}\n            {!!hasWallet && (\n              <Button\n                title=\"Disconnect\"\n                onPress={killSession}\n              />\n            )}\n          </>\n    </div>\n  )\n}\n\n// Wrap everything in <UseWalletProvider />\nexport default (props) => (\n  <UseWalletProvider\n\n    chainId={1337}\n    connectors={{\n      // This is how connectors get configured\n      provided: {provider: window.cleanEthereum},\n    }}>\n\n\n\n\n    <Connection accounts={props.accounts}/>\n\n\n  </UseWalletProvider>\n)\n"]},"metadata":{},"sourceType":"module"}