{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/Connection.js\",\n    _s = $RefreshSig$();\n\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport { useWallet, UseWalletProvider } from 'use-wallet';\nimport { Button } from 'react-bootstrap';\nimport MyNav from \"./MyNav\";\nimport App from \"./App\";\nimport getWeb3 from \"./getWeb3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Connection = props => {\n  _s();\n\n  const wallet = useWallet();\n  const [firstPartAddress, setFirstPartAddress] = useState('Connect Wallet');\n  const [secondPartAddress, setSecondPartAddress] = useState('');\n  useEffect(() => {\n    const init = async () => {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const usersAccount = accounts[0];\n      const stringOfUsersAccount = new String(usersAccount);\n      console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n\n      setFirstPartAddress(stringOfUsersAccount.slice(0, 5));\n      setSecondPartAddress('____' + stringOfUsersAccount.slice(37, 42));\n    };\n\n    init();\n  });\n\n  const connectWallet = async e => {\n    await wallet.connect(\"walletconnect\");\n    const usersAccount = props.accounts;\n    const stringOfUsersAccount = new String(usersAccount);\n    console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n\n    setFirstPartAddress('Welcome');\n    setSecondPartAddress('');\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: injected,\n      id: \"wallet-button\",\n      className: \"customButton enableEthereumButton\",\n      children: [firstPartAddress, secondPartAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}; // Wrap everything in <UseWalletProvider />\n\n\n_s(Connection, \"xg0lUAxmWKC4h1FC8bHTNYHpH0w=\", false, function () {\n  return [useWallet];\n});\n\n_c = Connection;\nexport default (props => /*#__PURE__*/_jsxDEV(UseWalletProvider, {\n  chainId: 1337,\n  autoConnect: true,\n  connectors: {\n    injected: {\n      //allows you to connect and switch between mainnet and rinkeby within Metamask.\n      chainId: [1, 4]\n    },\n    fortmatic: {\n      chainId: [1],\n      apiKey: ''\n    },\n    portis: {\n      dAppId: '',\n      chainId: [1]\n    },\n    walletconnect: {\n      rpc: {\n        1: 'https://mainnet.infura.io/v3/a0d8c94ba9a946daa5ee149e52fa5ff1',\n        4: 'https://rinkeby.infura.io/v3/a0d8c94ba9a946daa5ee149e52fa5ff1'\n      },\n      bridge: 'https://bridge.walletconnect.org',\n      pollingInterval: 12000\n    },\n    walletlink: {\n      chainId: [1],\n      url: 'https://mainnet.eth.aragon.network/'\n    }\n  },\n  children: /*#__PURE__*/_jsxDEV(Connection, {\n    accounts: props.accounts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 57,\n  columnNumber: 3\n}, this));\n\nvar _c;\n\n$RefreshReg$(_c, \"Connection\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/Connection.js"],"names":["React","useState","useEffect","useWallet","UseWalletProvider","Button","MyNav","App","getWeb3","Connection","props","wallet","firstPartAddress","setFirstPartAddress","secondPartAddress","setSecondPartAddress","init","web3","accounts","eth","getAccounts","usersAccount","stringOfUsersAccount","String","console","log","slice","connectWallet","e","connect","window","location","reload","injected","chainId","fortmatic","apiKey","portis","dAppId","walletconnect","rpc","bridge","pollingInterval","walletlink","url"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,SAAT,EAAoBC,iBAApB,QAA6C,YAA7C;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAKA,MAAMC,UAAU,GAAIC,KAAD,IAAY;AAAA;;AAI7B,QAAMC,MAAM,GAAGR,SAAS,EAAxB;AACA,QAAM,CAACS,gBAAD,EAAmBC,mBAAnB,IAA0CZ,QAAQ,CAAC,gBAAD,CAAxD;AACA,QAAM,CAACa,iBAAD,EAAoBC,oBAApB,IAA4Cd,QAAQ,CAAC,EAAD,CAA1D;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEb,UAAMc,IAAI,GAAG,YAAW;AACtB,YAAMC,IAAI,GAAG,MAAMT,OAAO,EAA1B;AACA,YAAMU,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,WAAT,EAAvB;AACA,YAAMC,YAAY,GAAGH,QAAQ,CAAC,CAAD,CAA7B;AACA,YAAMI,oBAAoB,GAAG,IAAIC,MAAJ,CAAWF,YAAX,CAA7B;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAoB,CAACI,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAAZ,EALsB,CAKyB;;AAC/Cb,MAAAA,mBAAmB,CAACS,oBAAoB,CAACI,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAAD,CAAnB;AACAX,MAAAA,oBAAoB,CAAC,SAAOO,oBAAoB,CAACI,KAArB,CAA2B,EAA3B,EAA+B,EAA/B,CAAR,CAApB;AAED,KATD;;AAUAV,IAAAA,IAAI;AACL,GAbO,CAAT;;AAeA,QAAMW,aAAa,GAAG,MAAMC,CAAN,IAAY;AAChC,UAAMjB,MAAM,CAACkB,OAAP,CAAe,eAAf,CAAN;AACA,UAAMR,YAAY,GAAGX,KAAK,CAACQ,QAA3B;AACA,UAAMI,oBAAoB,GAAG,IAAIC,MAAJ,CAAWF,YAAX,CAA7B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAoB,CAACI,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAAZ,EAJgC,CAIe;;AAC/Cb,IAAAA,mBAAmB,CAAC,SAAD,CAAnB;AACAE,IAAAA,oBAAoB,CAAC,EAAD,CAApB;AACAe,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AAED,GATD;;AAWA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEC,QAAjB;AAA2B,MAAA,EAAE,EAAC,eAA9B;AAA8C,MAAA,SAAS,EAAC,mCAAxD;AAAA,iBAA6FrB,gBAA7F,EAA+GE,iBAA/G;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAvCD,C,CAyCA;;;GAzCML,U;UAIWN,S;;;KAJXM,U;AA0CN,gBAAgBC,KAAD,iBACb,QAAC,iBAAD;AAEE,EAAA,OAAO,EAAE,IAFX;AAIE,EAAA,WAAW,MAJb;AAKE,EAAA,UAAU,EAAE;AACVuB,IAAAA,QAAQ,EAAE;AACR;AACAC,MAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,CAAJ;AAFD,KADA;AAKVC,IAAAA,SAAS,EAAE;AACTD,MAAAA,OAAO,EAAE,CAAC,CAAD,CADA;AAETE,MAAAA,MAAM,EAAE;AAFC,KALD;AASVC,IAAAA,MAAM,EAAE;AACNC,MAAAA,MAAM,EAAE,EADF;AAENJ,MAAAA,OAAO,EAAE,CAAC,CAAD;AAFH,KATE;AAaVK,IAAAA,aAAa,EAAE;AACbC,MAAAA,GAAG,EAAE;AACH,WAAG,+DADA;AAEH,WAAG;AAFA,OADQ;AAKbC,MAAAA,MAAM,EAAE,kCALK;AAMbC,MAAAA,eAAe,EAAE;AANJ,KAbL;AAqBVC,IAAAA,UAAU,EAAE;AACVT,MAAAA,OAAO,EAAE,CAAC,CAAD,CADC;AAEVU,MAAAA,GAAG,EAAE;AAFK;AArBF,GALd;AAAA,yBAkCE,QAAC,UAAD;AAAY,IAAA,QAAQ,EAAElC,KAAK,CAACQ;AAA5B;AAAA;AAAA;AAAA;AAAA;AAlCF;AAAA;AAAA;AAAA;AAAA,QADF","sourcesContent":["// App.js\n\nimport React, {useState, useEffect} from 'react'\nimport { useWallet, UseWalletProvider } from 'use-wallet'\nimport { Button } from 'react-bootstrap';\n\nimport MyNav from \"./MyNav\";\nimport App from \"./App\";\nimport getWeb3 from \"./getWeb3\";\n\n\n\n\nconst Connection = (props) =>  {\n\n\n\n  const wallet = useWallet()\n  const [firstPartAddress, setFirstPartAddress] = useState('Connect Wallet');\n  const [secondPartAddress, setSecondPartAddress] = useState('');\n\n  useEffect(() => {\n\n     const init = async() => {\n       const web3 = await getWeb3();\n       const accounts = await web3.eth.getAccounts();\n       const usersAccount = accounts[0];\n       const stringOfUsersAccount = new String(usersAccount)\n       console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n       setFirstPartAddress(stringOfUsersAccount.slice(0, 5));\n       setSecondPartAddress('____'+stringOfUsersAccount.slice(37, 42));\n\n     }\n     init()\n   });\n\n  const connectWallet = async(e) => {\n    await wallet.connect(\"walletconnect\")\n    const usersAccount = props.accounts;\n    const stringOfUsersAccount = new String(usersAccount)\n    console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n    setFirstPartAddress('Welcome');\n    setSecondPartAddress('');\n    window.location.reload();\n\n  }\n\n  return(\n    <div>\n      <Button onClick={injected} id=\"wallet-button\" className=\"customButton enableEthereumButton\">{firstPartAddress}{secondPartAddress}</Button>\n    </div>\n  )\n}\n\n// Wrap everything in <UseWalletProvider />\nexport default (props) => (\n  <UseWalletProvider\n\n    chainId={1337}\n\n    autoConnect\n    connectors={{\n      injected: {\n        //allows you to connect and switch between mainnet and rinkeby within Metamask.\n        chainId: [1, 4],\n      },\n      fortmatic: {\n        chainId: [1],\n        apiKey: '',\n      },\n      portis: {\n        dAppId: '',\n        chainId: [1],\n      },\n      walletconnect: {\n        rpc: {\n          1: 'https://mainnet.infura.io/v3/a0d8c94ba9a946daa5ee149e52fa5ff1',\n          4: 'https://rinkeby.infura.io/v3/a0d8c94ba9a946daa5ee149e52fa5ff1',\n        },\n        bridge: 'https://bridge.walletconnect.org',\n        pollingInterval: 12000,\n      },\n      walletlink: {\n        chainId: [1],\n        url: 'https://mainnet.eth.aragon.network/',\n      },\n    }}>\n\n\n\n    <Connection accounts={props.accounts}/>\n\n\n  </UseWalletProvider>\n)\n"]},"metadata":{},"sourceType":"module"}