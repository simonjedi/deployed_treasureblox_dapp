{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IstanbulUtils = exports.bitIsSet = exports.parseBlockExtraData = void 0;\n\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\n\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nvar rlp = __importStar(require(\"rlp\")); // This file contains utilities that help with istanbul-specific block information.\n// See https://github.com/celo-org/celo-blockchain/blob/master/core/types/istanbul.go\n\n\nvar ISTANBUL_EXTRA_VANITY_BYTES = 32;\n\nfunction bigNumberFromBuffer(data) {\n  return new bignumber_js_1.default('0x' + (data.toString('hex') || '0'), 16);\n}\n\nfunction sealFromBuffers(data) {\n  return {\n    bitmap: bigNumberFromBuffer(data[0]),\n    signature: '0x' + data[1].toString('hex'),\n    round: bigNumberFromBuffer(data[2])\n  };\n} // Parse RLP encoded block extra data into an IstanbulExtra object.\n\n\nfunction parseBlockExtraData(data) {\n  var buffer = Buffer.from(data.replace(/^0x/, ''), 'hex');\n  var decode = rlp.decode('0x' + buffer.slice(ISTANBUL_EXTRA_VANITY_BYTES).toString('hex'));\n  return {\n    addedValidators: decode[0].map(function (addr) {\n      return (0, ethereumjs_util_1.toChecksumAddress)(addr.toString('hex'));\n    }),\n    addedValidatorsPublicKeys: decode[1].map(function (key) {\n      return '0x' + key.toString('hex');\n    }),\n    removedValidators: bigNumberFromBuffer(decode[2]),\n    seal: '0x' + decode[3].toString('hex'),\n    aggregatedSeal: sealFromBuffers(decode[4]),\n    parentAggregatedSeal: sealFromBuffers(decode[5])\n  };\n}\n\nexports.parseBlockExtraData = parseBlockExtraData;\n\nfunction bitIsSet(bitmap, index) {\n  if (index < 0) {\n    throw new Error(\"bit index must be greater than zero: got \" + index);\n  }\n\n  return bitmap.idiv('1' + '0'.repeat(index), 2).mod(2).gt(0);\n}\n\nexports.bitIsSet = bitIsSet;\nexports.IstanbulUtils = {\n  parseBlockExtraData: parseBlockExtraData,\n  bitIsSet: bitIsSet\n};","map":{"version":3,"sources":["../src/istanbul.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,cAAA,GAAA,eAAA,CAAA,OAAA,CAAA,cAAA,CAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,GAAA,GAAA,YAAA,CAAA,OAAA,CAAA,KAAA,CAAA,CAAA,C,CAGA;AACA;;;AAEA,IAAM,2BAA2B,GAAG,EAApC;;AAqBA,SAAS,mBAAT,CAA6B,IAA7B,EAAyC;AACvC,SAAO,IAAI,cAAA,CAAA,OAAJ,CAAc,QAAQ,IAAI,CAAC,QAAL,CAAc,KAAd,KAAwB,GAAhC,CAAd,EAAoD,EAApD,CAAP;AACD;;AAED,SAAS,eAAT,CAAyB,IAAzB,EAAuC;AACrC,SAAO;AACL,IAAA,MAAM,EAAE,mBAAmB,CAAC,IAAI,CAAC,CAAD,CAAL,CADtB;AAEL,IAAA,SAAS,EAAE,OAAO,IAAI,CAAC,CAAD,CAAJ,CAAQ,QAAR,CAAiB,KAAjB,CAFb;AAGL,IAAA,KAAK,EAAE,mBAAmB,CAAC,IAAI,CAAC,CAAD,CAAL;AAHrB,GAAP;AAKD,C,CAED;;;AACA,SAAgB,mBAAhB,CAAoC,IAApC,EAAgD;AAC9C,MAAM,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,IAAI,CAAC,OAAL,CAAa,KAAb,EAAoB,EAApB,CAAZ,EAAqC,KAArC,CAAf;AACA,MAAM,MAAM,GAAQ,GAAG,CAAC,MAAJ,CAAW,OAAO,MAAM,CAAC,KAAP,CAAa,2BAAb,EAA0C,QAA1C,CAAmD,KAAnD,CAAlB,CAApB;AACA,SAAO;AACL,IAAA,eAAe,EAAE,MAAM,CAAC,CAAD,CAAN,CAAU,GAAV,CAAc,UAAC,IAAD,EAAa;AAAK,aAAA,CAAA,GAAA,iBAAA,CAAA,iBAAA,EAAkB,IAAI,CAAC,QAAL,CAAlB,KAAkB,CAAlB,CAAA;AAAuC,KAAvE,CADZ;AAEL,IAAA,yBAAyB,EAAE,MAAM,CAAC,CAAD,CAAN,CAAU,GAAV,CAAc,UAAC,GAAD,EAAY;AAAK,aAAA,OAAO,GAAG,CAAC,QAAJ,CAAP,KAAO,CAAP;AAA0B,KAAzD,CAFtB;AAGL,IAAA,iBAAiB,EAAE,mBAAmB,CAAC,MAAM,CAAC,CAAD,CAAP,CAHjC;AAIL,IAAA,IAAI,EAAE,OAAO,MAAM,CAAC,CAAD,CAAN,CAAU,QAAV,CAAmB,KAAnB,CAJR;AAKL,IAAA,cAAc,EAAE,eAAe,CAAC,MAAM,CAAC,CAAD,CAAP,CAL1B;AAML,IAAA,oBAAoB,EAAE,eAAe,CAAC,MAAM,CAAC,CAAD,CAAP;AANhC,GAAP;AAQD;;AAXD,OAAA,CAAA,mBAAA,GAAA,mBAAA;;AAaA,SAAgB,QAAhB,CAAyB,MAAzB,EAAyC,KAAzC,EAAsD;AACpD,MAAI,KAAK,GAAG,CAAZ,EAAe;AACb,UAAM,IAAI,KAAJ,CAAU,8CAA4C,KAAtD,CAAN;AACD;;AACD,SAAO,MAAM,CACV,IADI,CACC,MAAM,IAAI,MAAJ,CAAW,KAAX,CADP,EAC0B,CAD1B,EAEJ,GAFI,CAEA,CAFA,EAGJ,EAHI,CAGD,CAHC,CAAP;AAID;;AARD,OAAA,CAAA,QAAA,GAAA,QAAA;AAUa,OAAA,CAAA,aAAA,GAAgB;AAC3B,EAAA,mBAAmB,EAAA,mBADQ;AAE3B,EAAA,QAAQ,EAAA;AAFmB,CAAhB","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IstanbulUtils = exports.bitIsSet = exports.parseBlockExtraData = void 0;\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar rlp = __importStar(require(\"rlp\"));\n// This file contains utilities that help with istanbul-specific block information.\n// See https://github.com/celo-org/celo-blockchain/blob/master/core/types/istanbul.go\nvar ISTANBUL_EXTRA_VANITY_BYTES = 32;\nfunction bigNumberFromBuffer(data) {\n    return new bignumber_js_1.default('0x' + (data.toString('hex') || '0'), 16);\n}\nfunction sealFromBuffers(data) {\n    return {\n        bitmap: bigNumberFromBuffer(data[0]),\n        signature: '0x' + data[1].toString('hex'),\n        round: bigNumberFromBuffer(data[2]),\n    };\n}\n// Parse RLP encoded block extra data into an IstanbulExtra object.\nfunction parseBlockExtraData(data) {\n    var buffer = Buffer.from(data.replace(/^0x/, ''), 'hex');\n    var decode = rlp.decode('0x' + buffer.slice(ISTANBUL_EXTRA_VANITY_BYTES).toString('hex'));\n    return {\n        addedValidators: decode[0].map(function (addr) { return (0, ethereumjs_util_1.toChecksumAddress)(addr.toString('hex')); }),\n        addedValidatorsPublicKeys: decode[1].map(function (key) { return '0x' + key.toString('hex'); }),\n        removedValidators: bigNumberFromBuffer(decode[2]),\n        seal: '0x' + decode[3].toString('hex'),\n        aggregatedSeal: sealFromBuffers(decode[4]),\n        parentAggregatedSeal: sealFromBuffers(decode[5]),\n    };\n}\nexports.parseBlockExtraData = parseBlockExtraData;\nfunction bitIsSet(bitmap, index) {\n    if (index < 0) {\n        throw new Error(\"bit index must be greater than zero: got \" + index);\n    }\n    return bitmap\n        .idiv('1' + '0'.repeat(index), 2)\n        .mod(2)\n        .gt(0);\n}\nexports.bitIsSet = bitIsSet;\nexports.IstanbulUtils = {\n    parseBlockExtraData: parseBlockExtraData,\n    bitIsSet: bitIsSet,\n};\n//# sourceMappingURL=istanbul.js.map"]},"metadata":{},"sourceType":"script"}