{"ast":null,"code":"import union from \"lodash.union\";\nimport * as qs from \"query-string\";\nimport { getWindowMetadata } from \"@walletconnect/window-metadata\";\nimport { getDocument, getLocation, getNavigator } from \"@walletconnect/window-getters\";\nexport const REACT_NATIVE_PRODUCT = \"ReactNative\";\nexport const ENV_MAP = {\n  reactNative: \"react-native\",\n  node: \"node\",\n  browser: \"browser\",\n  unknown: \"unknown\"\n};\nexport const EMPTY_SPACE = \" \";\nexport const COLON = \":\";\nexport const SLASH = \"/\";\nexport const DEFAULT_DEPTH = 2;\nexport const ONE_THOUSAND = 1000;\nexport function isNode() {\n  return typeof process !== \"undefined\" && typeof process.versions !== \"undefined\" && typeof process.versions.node !== \"undefined\";\n}\nexport function isReactNative() {\n  return !getDocument() && !!getNavigator() && navigator.product === REACT_NATIVE_PRODUCT;\n}\nexport function isBrowser() {\n  return !isNode() && !!getNavigator();\n}\nexport function getEnvironment() {\n  if (isReactNative()) return ENV_MAP.reactNative;\n  if (isNode()) return ENV_MAP.node;\n  if (isBrowser()) return ENV_MAP.browser;\n  return ENV_MAP.unknown;\n}\nexport function appendToQueryString(queryString, newQueryParams) {\n  let queryParams = qs.parse(queryString);\n  queryParams = Object.assign(Object.assign({}, queryParams), newQueryParams);\n  queryString = qs.stringify(queryParams);\n  return queryString;\n}\nexport function getAppMetadata() {\n  return getWindowMetadata() || undefined;\n}\nexport function getRelayClientMetadata(protocol, version) {\n  var _a;\n\n  const env = getEnvironment();\n  const metadata = {\n    protocol,\n    version,\n    env\n  };\n\n  if (env === \"browser\") {\n    metadata.host = ((_a = getLocation()) === null || _a === void 0 ? void 0 : _a.host) || \"\";\n  }\n\n  return metadata;\n}\nexport function formatRelayRpcUrl(protocol, version, url, apiKey) {\n  const splitUrl = url.split(\"?\");\n  const metadata = getRelayClientMetadata(protocol, version);\n  const params = apiKey ? Object.assign(Object.assign({}, metadata), {\n    apiKey\n  }) : metadata;\n  const queryString = appendToQueryString(splitUrl[1] || \"\", params);\n  return splitUrl[0] + \"?\" + queryString;\n}\nexport function assertType(obj, key, type) {\n  if (!obj[key] || typeof obj[key] !== type) {\n    throw new Error(`Missing or invalid \"${key}\" param`);\n  }\n}\nexport function parseContextNames(context, depth = DEFAULT_DEPTH) {\n  return getLastItems(context.split(SLASH), depth);\n}\nexport function formatMessageContext(context) {\n  return parseContextNames(context).join(EMPTY_SPACE);\n}\nexport function formatStorageKeyName(context) {\n  return parseContextNames(context).join(COLON);\n}\nexport function hasOverlap(a, b) {\n  const matches = a.filter(x => b.includes(x));\n  return matches.length === a.length;\n}\nexport function getLastItems(arr, depth = DEFAULT_DEPTH) {\n  return arr.slice(Math.max(arr.length - depth, 0));\n}\nexport function mergeArrays(a, b) {\n  return union(a, b);\n}\nexport function mapToObj(map) {\n  return Object.fromEntries(map.entries());\n}\nexport function objToMap(obj) {\n  return new Map(Object.entries(obj));\n}\nexport function mapEntries(obj, cb) {\n  const res = {};\n  Object.keys(obj).forEach(key => {\n    res[key] = cb(obj[key]);\n  });\n  return res;\n}\nexport const enumify = x => x;\nexport function capitalizeWord(word) {\n  return word.trim().replace(/^\\w/, c => c.toUpperCase());\n}\nexport function capitalize(str) {\n  return str.split(EMPTY_SPACE).map(w => capitalizeWord(w)).join(EMPTY_SPACE);\n}\nexport function toMiliseconds(seconds) {\n  return seconds * ONE_THOUSAND;\n}\nexport function fromMiliseconds(miliseconds) {\n  return Math.floor(miliseconds / ONE_THOUSAND);\n}\nexport function calcExpiry(ttl, now) {\n  return fromMiliseconds((now || Date.now()) + toMiliseconds(ttl));\n}","map":{"version":3,"sources":["../../src/misc.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import union from \"lodash.union\";\nimport * as qs from \"query-string\";\nimport { getWindowMetadata } from \"@walletconnect/window-metadata\";\nimport { getDocument, getLocation, getNavigator } from \"@walletconnect/window-getters\";\nexport const REACT_NATIVE_PRODUCT = \"ReactNative\";\nexport const ENV_MAP = {\n    reactNative: \"react-native\",\n    node: \"node\",\n    browser: \"browser\",\n    unknown: \"unknown\",\n};\nexport const EMPTY_SPACE = \" \";\nexport const COLON = \":\";\nexport const SLASH = \"/\";\nexport const DEFAULT_DEPTH = 2;\nexport const ONE_THOUSAND = 1000;\nexport function isNode() {\n    return (typeof process !== \"undefined\" &&\n        typeof process.versions !== \"undefined\" &&\n        typeof process.versions.node !== \"undefined\");\n}\nexport function isReactNative() {\n    return !getDocument() && !!getNavigator() && navigator.product === REACT_NATIVE_PRODUCT;\n}\nexport function isBrowser() {\n    return !isNode() && !!getNavigator();\n}\nexport function getEnvironment() {\n    if (isReactNative())\n        return ENV_MAP.reactNative;\n    if (isNode())\n        return ENV_MAP.node;\n    if (isBrowser())\n        return ENV_MAP.browser;\n    return ENV_MAP.unknown;\n}\nexport function appendToQueryString(queryString, newQueryParams) {\n    let queryParams = qs.parse(queryString);\n    queryParams = Object.assign(Object.assign({}, queryParams), newQueryParams);\n    queryString = qs.stringify(queryParams);\n    return queryString;\n}\nexport function getAppMetadata() {\n    return getWindowMetadata() || undefined;\n}\nexport function getRelayClientMetadata(protocol, version) {\n    var _a;\n    const env = getEnvironment();\n    const metadata = { protocol, version, env };\n    if (env === \"browser\") {\n        metadata.host = ((_a = getLocation()) === null || _a === void 0 ? void 0 : _a.host) || \"\";\n    }\n    return metadata;\n}\nexport function formatRelayRpcUrl(protocol, version, url, apiKey) {\n    const splitUrl = url.split(\"?\");\n    const metadata = getRelayClientMetadata(protocol, version);\n    const params = apiKey ? Object.assign(Object.assign({}, metadata), { apiKey }) : metadata;\n    const queryString = appendToQueryString(splitUrl[1] || \"\", params);\n    return splitUrl[0] + \"?\" + queryString;\n}\nexport function assertType(obj, key, type) {\n    if (!obj[key] || typeof obj[key] !== type) {\n        throw new Error(`Missing or invalid \"${key}\" param`);\n    }\n}\nexport function parseContextNames(context, depth = DEFAULT_DEPTH) {\n    return getLastItems(context.split(SLASH), depth);\n}\nexport function formatMessageContext(context) {\n    return parseContextNames(context).join(EMPTY_SPACE);\n}\nexport function formatStorageKeyName(context) {\n    return parseContextNames(context).join(COLON);\n}\nexport function hasOverlap(a, b) {\n    const matches = a.filter(x => b.includes(x));\n    return matches.length === a.length;\n}\nexport function getLastItems(arr, depth = DEFAULT_DEPTH) {\n    return arr.slice(Math.max(arr.length - depth, 0));\n}\nexport function mergeArrays(a, b) {\n    return union(a, b);\n}\nexport function mapToObj(map) {\n    return Object.fromEntries(map.entries());\n}\nexport function objToMap(obj) {\n    return new Map(Object.entries(obj));\n}\nexport function mapEntries(obj, cb) {\n    const res = {};\n    Object.keys(obj).forEach(key => {\n        res[key] = cb(obj[key]);\n    });\n    return res;\n}\nexport const enumify = (x) => x;\nexport function capitalizeWord(word) {\n    return word.trim().replace(/^\\w/, c => c.toUpperCase());\n}\nexport function capitalize(str) {\n    return str\n        .split(EMPTY_SPACE)\n        .map(w => capitalizeWord(w))\n        .join(EMPTY_SPACE);\n}\nexport function toMiliseconds(seconds) {\n    return seconds * ONE_THOUSAND;\n}\nexport function fromMiliseconds(miliseconds) {\n    return Math.floor(miliseconds / ONE_THOUSAND);\n}\nexport function calcExpiry(ttl, now) {\n    return fromMiliseconds((now || Date.now()) + toMiliseconds(ttl));\n}\n//# sourceMappingURL=misc.js.map"]},"metadata":{},"sourceType":"module"}