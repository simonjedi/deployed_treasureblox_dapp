{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Development/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect, useCallback } from \"react\"; // import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\n\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound'; //\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\n\nimport './style.css';\nimport ohno from './assets/troy_oh_no.mp4';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactAudioPlayer from 'react-audio-player'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FighterScreen = props => {\n  _s();\n\n  var [controlPlayer, setControlPlayer] = useState(false);\n  var [hasGameStarted, setHasGameStarted] = useState(false);\n  var [hasGameOver, setHasGameOver] = useState(false);\n  var [canvas, setCanvas] = useState(false);\n  var [ctx, setCtx] = useState(false);\n  var [exit, setExit] = useState(true);\n  var [isGameOver, setIsGameOver] = useState(false);\n  var [redirectLevel1More, setredirectLevel1More] = useState(false);\n  var [timeleft, setTimeleft] = useState(10);\n  var [start, setStart] = useState(false); // Prevent game from working whilst page reloads\n\n  let startDate = null;\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n  }; //Game Elements\n\n  let rectangles = [{\n    x: 75,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  }, {\n    x: 450,\n    y: 75,\n    dx: -5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  }, {\n    x: 265,\n    y: 450,\n    dx: 5,\n    dy: -7,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  } // {\n  //     x: 400,\n  //     y: 75,\n  //     dx: -5,\n  //     dy: 5.5,\n  //     width: 80,\n  //     height: 60,\n  //     color: \"#000099\"\n  // },\n  // {\n  //     x: 75,\n  //     y: 445,\n  //     dx: 5,\n  //     dy: -5,\n  //     width: 40,\n  //     height: 80,\n  //     color: \"#000099\"\n  // },\n  // {\n  //     x: 420,\n  //     y: 450,\n  //     dx: -5,\n  //     dy: -5,\n  //     width: 130,\n  //     height: 25,\n  //     color: \"#000099\"\n  // }\n  ];\n\n  const gameOverTime = () => {\n    setIsGameOver(true);\n    setExit(false);\n  };\n\n  useEffect(() => {\n    if (start) {\n      setTimeout(() => {\n        if (timeleft > 0) {\n          var timer = timeleft - 1;\n          setTimeleft(timer);\n        }\n\n        if (timeleft === 0) {\n          setTimeout(handleMore, 500);\n          setStart(false);\n        }\n      }, 1000);\n    }\n  });\n\n  function handleMore() {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n    setredirectLevel1More(true);\n  }\n\n  useEffect(() => {\n    const canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n\n    function millisecondsToMinutes(millis) {\n      let minutes = Math.floor(millis / 60000);\n      let seconds = (millis % 60000 / 1000).toFixed(0);\n      return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    } // Global Varabales\n\n\n    let secondsPassed;\n    let oldTimeStamp;\n    let fps;\n    window.requestAnimationFrame(gameLoop);\n\n    function gameLoop(timeStamp) {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawBorder();\n      drawRect();\n\n      if (hasGameStarted) {\n        //Get the blue rectangle to start moving\n        moveRectangle();\n      } //Detect whether rectangles hit edge of canvas\n\n\n      borderRectangleCollisionDetection(); //Detect whether player makes contact with border\n\n      playerCollisionDetection(); //Detect whether player makes contact with rectangle\n\n      rectangleCollisionDetection(); // Calculate the number of seconds passed since the last frame\n      // secondsPassed = (timeStamp - oldTimeStamp) / 1000;\n      // oldTimeStamp = timeStamp;\n      //\n      // // Calculate fps\n      // fps = Math.round(1 / secondsPassed);\n      //\n      // // Draw number to the screen\n      // ctx.fillStyle = 'white';\n      // ctx.fillRect(0, 0, 200, 100);\n      // ctx.font = '25px Arial';\n      // ctx.fillStyle = 'black';\n      // ctx.fillText(\"FPS: \" + fps, 10, 30);\n\n      window.requestAnimationFrame(gameLoop);\n    } //Render rectangles to canvas.\n\n\n    function drawRect() {\n      //Draw playerRect first\n      ctx.fillStyle = \"#990000\";\n      ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n      rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n      });\n    }\n\n    function drawPossitions() {\n      //Draw playerRect first\n      rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n      });\n    }\n\n    function drawRect2() {\n      //Draw playerRect first\n      ctx.fillStyle = \"#000000\";\n      ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n    } //Canvas Black Border\n\n\n    function drawBorder() {\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.clearRect(25, 25, 550, 550);\n    } // function drawBoarder(){\n    //   ctx.fillStyle = \"black\";\n    //   ctx.fillRect(0,0,canvas.width,canvas.height);\n    //   ctx.clearRect(50,50,500,500);\n    // }\n\n\n    function millisecondsToMiutes(millis) {\n      let minutes = Math.floor(millis / 60000);\n      let seconds = Math.floor(millis % 60000 / 1000);\n      return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    } //Detect whether player makes contact with border\n\n\n    function playerCollisionDetection() {\n      if (playerRect.x + playerRect.width > 575 || playerRect.x < 25 || playerRect.y + playerRect.height > 575 || playerRect.y < 25) {\n        gameOverTime();\n      }\n    } //Get the blue rectangle to start moving\n\n\n    function moveRectangle() {\n      rectangles.forEach(rect => {\n        rect.x += rect.dx;\n        rect.y += rect.dy;\n      });\n    } //Detect whether rectangles hit edge of canvas\n\n\n    function borderRectangleCollisionDetection() {\n      rectangles.forEach(rect => {\n        if (rect.x + rect.width > canvas.width || rect.x < 0) {\n          rect.dx *= -1;\n        }\n\n        if (rect.y + rect.height > canvas.height || rect.y < 0) {\n          rect.dy *= -1;\n        }\n      });\n    } // let numberOfSpeed = 0;\n    //\n    // function configureRectSpeed() {\n    //     const speedUpGame = setInterval(() => {\n    //         numberOfSpeed++;\n    //         rectangles.forEach(rect => {\n    //             rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n    //             rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n    //         });\n    //         if(numberOfSpeed === 4){\n    //             clearInterval(speedUpGame);\n    //         }\n    //     }, 10000)\n    // }\n    //Returns true if mouse is in player rectangle\n\n\n    function isCursorInRect(x, y, rect) {\n      return x > rect.x && x < rect.x + rect.width && y > rect.y && y < rect.y + rect.height;\n    }\n\n    canvas.addEventListener(\"mousedown\", e => {\n      //Get X & Y coordinates in relation to canvas\n      const pos = {\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop\n      }; //See if they clicked on the red square in particular\n\n      if (isCursorInRect(pos.x, pos.y, playerRect)) {\n        //Start timer\n        if (!hasGameStarted) {\n          startDate = new Date(); // configureRectSpeed();\n        }\n\n        setControlPlayer(true);\n        setHasGameStarted(true);\n        setStart(true);\n      }\n    });\n    canvas.addEventListener(\"mousemove\", e => {\n      if (controlPlayer && !hasGameOver) {\n        //Get X & Y coordinates in relation to canvas\n        const pos = {\n          x: e.clientX - canvas.offsetLeft,\n          y: e.clientY - canvas.offsetTop\n        };\n        playerRect.x = pos.x - 25;\n        playerRect.y = pos.y - 25;\n      }\n    });\n    canvas.addEventListener(\"mouseup\", () => {\n      setControlPlayer(false);\n    }); //Returns true if 2 rectangles are colliding\n\n    function isRectangleCollision(rect1, rect2) {\n      return !(rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y);\n    } //Detect whether player makes contact with rectangle\n\n\n    function rectangleCollisionDetection() {\n      rectangles.forEach(rect => {\n        if (isRectangleCollision(playerRect, rect)) {\n          // drawRect2();\n          if (rect.x === 265 && rect.y === 450) {\n            return;\n          }\n\n          if (rect.x === 450 && rect.y === 75) {\n            return;\n          }\n\n          if (rect.x === 75 && rect.y === 75) {\n            return;\n          }\n\n          gameOverTime();\n        }\n      });\n    }\n  }, [controlPlayer, hasGameStarted, hasGameOver]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"top\",\n    children: [isGameOver && /*#__PURE__*/_jsxDEV(ReactAudioPlayer, {\n      src: ohno,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 20\n    }, this), exit ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/TreasureBloxPartner/:top\",\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 430,\n      columnNumber: 7\n    }, this), redirectLevel1More ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/PartnershipLevel1More/:top\",\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n      children: [props.is_meter ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wording\",\n        style: {\n          color: \"white\"\n        },\n        children: [\"Force Field \", timeleft]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 18\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wording\",\n        children: [\"Fighter Pilot \", timeleft]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 98\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"600\",\n        height: \"600\",\n        id: \"canvas\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 414,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FighterScreen, \"Q1mLQNz2IDLKnrniVKQGfGdiUdk=\");\n\n_c = FighterScreen;\nexport default FighterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FighterScreen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Development/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js"],"names":["useState","useRef","useEffect","useCallback","Button","Container","Nav","Navbar","NavDropdown","useSound","ohno","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactAudioPlayer","FighterScreen","props","controlPlayer","setControlPlayer","hasGameStarted","setHasGameStarted","hasGameOver","setHasGameOver","canvas","setCanvas","ctx","setCtx","exit","setExit","isGameOver","setIsGameOver","redirectLevel1More","setredirectLevel1More","timeleft","setTimeleft","start","setStart","startDate","playerRect","x","y","width","height","rectangles","dx","dy","color","gameOverTime","setTimeout","timer","handleMore","window","scrollTo","top","behavior","document","getElementById","getContext","millisecondsToMinutes","millis","minutes","Math","floor","seconds","toFixed","secondsPassed","oldTimeStamp","fps","requestAnimationFrame","gameLoop","timeStamp","clearRect","drawBorder","drawRect","moveRectangle","borderRectangleCollisionDetection","playerCollisionDetection","rectangleCollisionDetection","fillStyle","fillRect","forEach","rect","drawPossitions","drawRect2","millisecondsToMiutes","isCursorInRect","addEventListener","e","pos","clientX","offsetLeft","clientY","offsetTop","Date","isRectangleCollision","rect1","rect2","is_meter"],"mappings":"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","sourcesContent":["\nimport { useState, useRef, useEffect, useCallback } from \"react\";\n\n// import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\nimport { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound';\n//\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\nimport './style.css';\n\nimport ohno from './assets/troy_oh_no.mp4';\n\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n// Hook\n\n\n\n\nconst FighterScreen = (props) =>{\n\n\n  var [controlPlayer, setControlPlayer]= useState(false)\n  var [hasGameStarted, setHasGameStarted]= useState(false)\n  var [hasGameOver, setHasGameOver]= useState(false)\n  var [canvas, setCanvas]= useState(false)\n  var [ctx, setCtx]= useState(false)\n  var [exit,setExit] = useState(true);\n  var [isGameOver, setIsGameOver]= useState(false)\n  var [redirectLevel1More,setredirectLevel1More] = useState(false);\n  var [timeleft,setTimeleft] = useState(10)\n  var [start,setStart] = useState(false)\n\n\n  // Prevent game from working whilst page reloads\n  let startDate = null;\n\n\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n  }\n\n\n  //Game Elements\n  let rectangles = [\n      {\n          x: 75,\n          y: 75,\n          dx: 5,\n          dy: 4,\n          width: 75,\n          height: 75,\n          color: \"#000099\"\n      },\n      {\n          x: 450,\n          y: 75,\n          dx: -5,\n          dy: 4,\n          width: 75,\n          height: 75,\n          color: \"#000099\"\n      },\n      {\n          x: 265,\n          y: 450,\n          dx: 5,\n          dy: -7,\n          width: 75,\n          height: 75,\n          color: \"#000099\"\n      },\n      // {\n      //     x: 400,\n      //     y: 75,\n      //     dx: -5,\n      //     dy: 5.5,\n      //     width: 80,\n      //     height: 60,\n      //     color: \"#000099\"\n      // },\n      // {\n      //     x: 75,\n      //     y: 445,\n      //     dx: 5,\n      //     dy: -5,\n      //     width: 40,\n      //     height: 80,\n      //     color: \"#000099\"\n      // },\n      // {\n      //     x: 420,\n      //     y: 450,\n      //     dx: -5,\n      //     dy: -5,\n      //     width: 130,\n      //     height: 25,\n      //     color: \"#000099\"\n      // }\n  ]\n\n\n      const gameOverTime = () => {\n\n        setIsGameOver(true);\n        setExit(false);\n\n      }\n\n      useEffect(() => {\n          if (start){\n            setTimeout(() => {\n\n              if (timeleft > 0) {\n                var timer = timeleft -1\n                setTimeleft(timer)\n              }\n\n              if (timeleft === 0){\n                setTimeout(handleMore,500);\n                setStart(false);\n\n              }\n            }, 1000)\n          }\n      })\n\n\n      function handleMore()  {\n        window.scrollTo({top: 0,behavior: 'smooth'})\n        setredirectLevel1More(true)\n\n      }\n\n\n\n\n\n\nuseEffect(() => {\n\n      const canvas = document.getElementById(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n\n      function millisecondsToMinutes(millis){\n          let minutes = Math.floor(millis / 60000);\n          let seconds = ((millis % 60000) / 1000).toFixed(0);\n          return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n      }\n\n      // Global Varabales\n      let secondsPassed;\n      let oldTimeStamp;\n      let fps;\n\n      window.requestAnimationFrame(gameLoop);\n\n      function gameLoop(timeStamp) {\n        ctx.clearRect(0,0,canvas.width,canvas.height);\n        drawBorder();\n        drawRect();\n\n\n\n\n        if(hasGameStarted){\n            //Get the blue rectangle to start moving\n            moveRectangle();\n        }\n        //Detect whether rectangles hit edge of canvas\n        borderRectangleCollisionDetection();\n        //Detect whether player makes contact with border\n        playerCollisionDetection();\n\n        //Detect whether player makes contact with rectangle\n        rectangleCollisionDetection();\n\n\n        // Calculate the number of seconds passed since the last frame\n        // secondsPassed = (timeStamp - oldTimeStamp) / 1000;\n        // oldTimeStamp = timeStamp;\n        //\n        // // Calculate fps\n        // fps = Math.round(1 / secondsPassed);\n        //\n        // // Draw number to the screen\n        // ctx.fillStyle = 'white';\n        // ctx.fillRect(0, 0, 200, 100);\n        // ctx.font = '25px Arial';\n        // ctx.fillStyle = 'black';\n        // ctx.fillText(\"FPS: \" + fps, 10, 30);\n\n          window.requestAnimationFrame(gameLoop);\n      }\n\n\n\n      //Render rectangles to canvas.\n      function drawRect() {\n          //Draw playerRect first\n          ctx.fillStyle = \"#990000\";\n          ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n\n          rectangles.forEach(rect => {\n              ctx.fillStyle = rect.color;\n              ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n          })\n      }\n\n      function drawPossitions() {\n          //Draw playerRect first\n\n          rectangles.forEach(rect => {\n              ctx.fillStyle = rect.color;\n              ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n          })\n      }\n\n\n\n\n      function drawRect2() {\n          //Draw playerRect first\n          ctx.fillStyle = \"#000000\";\n          ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n\n      }\n\n\n      //Canvas Black Border\n      function drawBorder() {\n          ctx.fillStyle = 'black';\n          ctx.fillRect(0,0,canvas.width,canvas.height);\n          ctx.clearRect(25,25,550,550);\n      }\n\n      // function drawBoarder(){\n      //   ctx.fillStyle = \"black\";\n      //   ctx.fillRect(0,0,canvas.width,canvas.height);\n      //   ctx.clearRect(50,50,500,500);\n      // }\n\n\n    function millisecondsToMiutes(millis){\n        let minutes = Math.floor(millis/60000);\n        let seconds = Math.floor((millis % 60000)/1000);\n        return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n      }\n\n\n      //Detect whether player makes contact with border\nfunction playerCollisionDetection() {\n    if(\n        playerRect.x + playerRect.width > 575 ||\n        playerRect.x < 25 ||\n        playerRect.y + playerRect.height > 575 ||\n        playerRect.y < 25\n    ){\n        gameOverTime();\n\n    }\n}\n\n\n\n\n      //Get the blue rectangle to start moving\nfunction moveRectangle() {\n    rectangles.forEach(rect => {\n        rect.x += rect.dx;\n        rect.y += rect.dy;\n    })\n}\n\n\n      //Detect whether rectangles hit edge of canvas\n  function borderRectangleCollisionDetection() {\n      rectangles.forEach(rect => {\n          if(rect.x + rect.width > canvas.width || rect.x < 0){\n              rect.dx *= -1;\n          }\n          if(rect.y + rect.height > canvas.height || rect.y < 0){\n              rect.dy *= -1;\n          }\n      })\n  }\n\n      // let numberOfSpeed = 0;\n      //\n      // function configureRectSpeed() {\n      //     const speedUpGame = setInterval(() => {\n      //         numberOfSpeed++;\n      //         rectangles.forEach(rect => {\n      //             rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n      //             rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n      //         });\n      //         if(numberOfSpeed === 4){\n      //             clearInterval(speedUpGame);\n      //         }\n      //     }, 10000)\n      // }\n\n\n\n\n\n\n\n      //Returns true if mouse is in player rectangle\n      function isCursorInRect(x,y,rect){\n          return(x>rect.x && x<rect.x+rect.width && y>rect.y && y<rect.y+rect.height);\n      }\n\n\n\n      canvas.addEventListener(\"mousedown\", e => {\n          //Get X & Y coordinates in relation to canvas\n          const pos = {\n              x: e.clientX - canvas.offsetLeft,\n              y: e.clientY - canvas.offsetTop\n          }\n\n\n          //See if they clicked on the red square in particular\n          if(isCursorInRect(pos.x,pos.y,playerRect)){\n              //Start timer\n              if(!hasGameStarted){\n                  startDate = new Date();\n                  // configureRectSpeed();\n              }\n              setControlPlayer(true);\n              setHasGameStarted(true);\n              setStart(true);\n          }\n      })\n\n      canvas.addEventListener(\"mousemove\", e => {\n          if(controlPlayer && !hasGameOver){\n          //Get X & Y coordinates in relation to canvas\n          const pos = {\n              x: e.clientX - canvas.offsetLeft,\n              y: e.clientY - canvas.offsetTop\n          };\n          playerRect.x = pos.x - 25;\n          playerRect.y = pos.y - 25;\n          }\n\n\n      })\n\n      canvas.addEventListener(\"mouseup\", () => {\n          setControlPlayer(false);\n      })\n\n\n\n      //Returns true if 2 rectangles are colliding\n      function isRectangleCollision(rect1, rect2){\n\n          return !(\n              rect1.x>rect2.x+rect2.width ||\n              rect1.x+rect1.width<rect2.x ||\n              rect1.y>rect2.y+rect2.height ||\n              rect1.y+rect1.height<rect2.y\n          );\n      }\n\n      //Detect whether player makes contact with rectangle\n      function rectangleCollisionDetection() {\n          rectangles.forEach(rect => {\n              if(isRectangleCollision(playerRect, rect)){\n                // drawRect2();\n                if (rect.x === 265 && rect.y === 450){\n                  return\n                }\n                if (rect.x === 450 && rect.y === 75){\n                  return\n                }\n                if (rect.x === 75 && rect.y === 75){\n                  return\n                }\n                gameOverTime();\n\n              }\n          })\n      }\n\n\n\n\n    }, [controlPlayer,hasGameStarted,hasGameOver]);\n\n\n\n\n\n  return (\n    <div id=\"top\">\n\n\n\n\n    {isGameOver && <ReactAudioPlayer\n      src={ohno}\n      autoPlay\n    />}\n\n\n    {exit?(\n      <div>\n\n      </div>\n    ):(\n      <div>\n\n      <Redirect to=\"/TreasureBloxPartner/:top\" {...props}/>\n\n      </div>\n    )}\n\n    {redirectLevel1More?(\n      <div>\n      <Redirect to=\"/PartnershipLevel1More/:top\" {...props}/>\n      </div>\n    ):(\n      <div>\n\n      </div>\n\n    )}\n\n\n\n<center>\n{props.is_meter?(<div className=\"wording\" style={{color:\"white\"}}>Force Field {timeleft}</div>):(<div className=\"wording\">Fighter Pilot {timeleft}</div>)}\n<br/>\n\n<canvas width=\"600\" height=\"600\" id=\"canvas\"> </canvas>\n\n</center>\n<br/>\n    </div>\n  );\n}\n\nexport default FighterScreen;\n"]},"metadata":{},"sourceType":"module"}