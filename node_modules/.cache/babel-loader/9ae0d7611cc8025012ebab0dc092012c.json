{"ast":null,"code":"(function () {\n  var options = {\n    activeClass: 'active',\n    correctClass: 'correct',\n    correctEntry: '1738',\n    correctGuideId: 'secure_key',\n    entryDigitClass: 'dot',\n    generatorId: 'generator',\n    guideInputId: 'guide',\n    incorrectClass: 'wrong',\n    inputAnimationLength: 900,\n    keypadNumberClass: 'number',\n    keyPressAnimationLength: 1000,\n    keyPressClass: 'grow',\n    pinCaseId: 'pin'\n  };\n  var input = '',\n      dots = document.querySelectorAll('.' + options.entryDigitClass),\n      numbers = document.querySelectorAll('.' + options.keypadNumberClass);\n  dots = Array.prototype.slice.call(dots);\n  numbers = Array.prototype.slice.call(numbers); // Load up the first correct entry - today's date.\n\n  (function () {\n    var date = new Date();\n    var day = date.getDate();\n    var month = date.getMonth() + 1;\n    if (month < 10) month = '0' + month;\n    if (day < 10) day = '0' + day;\n    options.correctEntry = '' + month + day;\n    setGuideDisplay();\n  })(); // Listens for any key presses.\n\n\n  (function () {\n    window.addEventListener('keyup', function (event) {\n      var number = mapKeyChar(event.keyCode);\n      if (number === undefined) return;\n      if (number === -1) number = 9;\n      numbers[number].click();\n    });\n  })(); // Activate the generator button.\n\n\n  (function () {\n    var generator = document.getElementById(options.generatorId);\n    if (generator === null) return;\n    generator.addEventListener('click', function () {\n      var newValue = '';\n\n      for (var i = 0; i < options.correctEntry.length; i++) {\n        newValue += getRandomDigit();\n      }\n\n      options.correctEntry = newValue;\n      setGuideDisplay();\n    });\n  })();\n\n  function addClass(className, element, disableCheck) {\n    if (element.length !== undefined) {\n      element.forEach(function (el) {\n        addClass(className, el);\n      });\n    } else if (disableCheck || !element.classList.contains(className)) {\n      element.classList.add(className);\n    }\n  } // Animates the (un)successful code entry.\n\n\n  function checkValidity(index) {\n    var className = input === options.correctEntry ? options.correctClass : options.incorrectClass;\n    toggleClass(className, document.getElementById(options.pinCaseId), options.inputAnimationLength);\n    toggleClass(options.activeClass, dots, options.inputAnimationLength, true);\n    setTimeout(function () {\n      input = '';\n    }, options.inputAnimationLength);\n  } // Returns 1-9\n\n\n  function getRandomDigit() {\n    return Math.floor(Math.random() * 9) + 1;\n  } // Checks if the user has entered all required\n  // digits into the keypad.\n\n\n  function hasEnteredAllDigits() {\n    return input.length === options.correctEntry.length;\n  }\n\n  function isInvalidTimeout(timeout) {\n    return timeout === undefined || timeout === null || timeout === 0;\n  }\n\n  function mapKeyChar(char) {\n    // Backspace.\n    // Remove the last digit from the stored value, and\n    // also from the visual feedback to the user.\n    if (char === 8 && input.length) {\n      input = input.substr(0, input.length - 1);\n      dots[input.length].classList.remove(options.activeClass);\n      return;\n    }\n\n    console.log(char); // Rotate the pad on arrow left/right press.\n\n    if (char === 37 || char === 39) {\n      var toggle = document.getElementById(options.guideInputId);\n      if (toggle === null) return; // Don't allow flipping by continuously pressing the same key.\n      // We use different keys to flip in either direction.\n\n      if (toggle.checked && char === 39 || !toggle.checked && char === 37) return;\n      toggle.checked = !toggle.checked;\n      return;\n    } // The pressed key is out of the desired input range.\n\n\n    if (char < 48 || char > 57) {\n      return;\n    } // Convert the pressed key to numerical value.\n\n\n    return char - 49;\n  }\n\n  ;\n\n  function removeClass(className, element) {\n    if (element.length !== undefined) {\n      element.forEach(function (el) {\n        el.classList.remove(className);\n      });\n    } else {\n      element.classList.remove(className);\n    }\n  } // Displays the correct combination in the guide.\n\n\n  function setGuideDisplay() {\n    var guide = document.getElementById(options.correctGuideId);\n    if (guide === null) return;\n    guide.innerHTML = options.correctEntry;\n  }\n\n  ; // Temporarily toggles a class on the element (array of elements)\n  // for the given time. Omit timeout or set to 0 to addOnly.\n\n  function toggleClass(className, element, timeout, removeOnly) {\n    if (removeOnly !== true) {\n      addClass(className, element);\n    } else if (isInvalidTimeout(timeout)) {\n      timeout = 1;\n    }\n\n    if (isInvalidTimeout(timeout)) return;\n    setTimeout(function () {\n      removeClass(className, element);\n    }, timeout);\n  }\n\n  ;\n  numbers.forEach(function (number, index) {\n    number.addEventListener('click', function () {\n      // Prevents user from entering new values while\n      // evaluating the last input.\n      if (hasEnteredAllDigits()) return; // Animates the key press.\n\n      toggleClass(options.keyPressClass, number, options.keyPressAnimationLength); // Marks another dot as active.\n\n      dots[input.length].classList.add(options.activeClass); // Adds the current value to the input.\n\n      if (index === 9) index = -1;\n      input += index + 1; // Validates the input if we have reached\n      // the limit length.\n\n      if (hasEnteredAllDigits()) {\n        checkValidity(index);\n      }\n    });\n  });\n})();","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/SecretCode/SecretCode.js"],"names":["options","activeClass","correctClass","correctEntry","correctGuideId","entryDigitClass","generatorId","guideInputId","incorrectClass","inputAnimationLength","keypadNumberClass","keyPressAnimationLength","keyPressClass","pinCaseId","input","dots","document","querySelectorAll","numbers","Array","prototype","slice","call","date","Date","day","getDate","month","getMonth","setGuideDisplay","window","addEventListener","event","number","mapKeyChar","keyCode","undefined","click","generator","getElementById","newValue","i","length","getRandomDigit","addClass","className","element","disableCheck","forEach","el","classList","contains","add","checkValidity","index","toggleClass","setTimeout","Math","floor","random","hasEnteredAllDigits","isInvalidTimeout","timeout","char","substr","remove","console","log","toggle","checked","removeClass","guide","innerHTML","removeOnly"],"mappings":"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","sourcesContent":["(function() {\n\tvar options = {\n\t\tactiveClass: 'active',\n\t\tcorrectClass: 'correct',\n\t\tcorrectEntry: '1738',\n\t\tcorrectGuideId: 'secure_key',\n\t\tentryDigitClass: 'dot',\n\t\tgeneratorId: 'generator',\n        guideInputId: 'guide',\n\t\tincorrectClass: 'wrong',\n\t\tinputAnimationLength: 900,\n\t\tkeypadNumberClass: 'number',\n\t\tkeyPressAnimationLength: 1000,\n\t\tkeyPressClass: 'grow',\n\t\tpinCaseId: 'pin',\n\t};\n\n\tvar input \t= '',\n\t\tdots    = document.querySelectorAll('.' + options.entryDigitClass),\n\t\tnumbers = document.querySelectorAll('.' + options.keypadNumberClass);\n\n\tdots    = Array.prototype.slice.call(dots);\n\tnumbers = Array.prototype.slice.call(numbers);\n\n\t// Load up the first correct entry - today's date.\n\t(function () {\n\t\tvar date = new Date();\n\t\tvar day = date.getDate();\n\t\tvar month = date.getMonth() + 1;\n\t\tif (month < 10) month = '0' + month;\n\t\tif (day < 10) day = '0' + day;\n\t\toptions.correctEntry = '' + month + day;\n        setGuideDisplay();\n\t})();\n\n\t// Listens for any key presses.\n\t(function () {\n\t\twindow.addEventListener('keyup', function (event) {\n\t\t\tvar number = mapKeyChar(event.keyCode);\n\t\t\tif (number === undefined) return;\n            if (number === -1) number = 9;\n\t\t\tnumbers[number].click();\n\t\t});\n\t})();\n\n\t// Activate the generator button.\n\t(function () {\n\t\tvar generator = document.getElementById(options.generatorId);\n\t\tif (generator === null) return;\n\t\tgenerator.addEventListener('click', function () {\n\t\t\tvar newValue = '';\n\t\t\tfor (var i = 0; i < options.correctEntry.length; i++) {\n\t\t\t\tnewValue += getRandomDigit();\n\t\t\t}\n\t\t\toptions.correctEntry = newValue;\n\t\t\tsetGuideDisplay();\n\t\t});\n\t})();\n\n\tfunction addClass (className, element, disableCheck) {\n\t\tif (element.length !== undefined) {\n\t\t\telement.forEach(function (el) {\n\t\t\t\taddClass(className, el);\n\t\t\t});\n\t\t} else if (disableCheck || !element.classList.contains(className)) {\n\t\t\telement.classList.add(className);\n\t\t}\n\t}\n\n\t// Animates the (un)successful code entry.\n\tfunction checkValidity (index) {\n\t\tvar className = (input === options.correctEntry) ? options.correctClass : options.incorrectClass;\n\n\t\ttoggleClass(className, document.getElementById(options.pinCaseId), options.inputAnimationLength);\n\t\ttoggleClass(options.activeClass, dots, options.inputAnimationLength, true);\n\n\t\tsetTimeout(function () {\n\t\t\tinput = '';\n\t\t}, options.inputAnimationLength);\n\t}\n\n\t// Returns 1-9\n\tfunction getRandomDigit () {\n\t\treturn Math.floor(Math.random() * 9) + 1;\n\t}\n\n\t// Checks if the user has entered all required\n\t// digits into the keypad.\n\tfunction hasEnteredAllDigits () {\n\t\treturn input.length === options.correctEntry.length;\n\t}\n\n\tfunction isInvalidTimeout (timeout) {\n\t\treturn timeout === undefined || timeout === null || timeout === 0;\n\t}\n\n\tfunction mapKeyChar (char) {\n\t\t// Backspace.\n\t\t// Remove the last digit from the stored value, and\n\t\t// also from the visual feedback to the user.\n\t\tif (char === 8 && input.length) {\n\t\t\tinput = input.substr(0, input.length - 1);\n\t\t\tdots[input.length].classList.remove(options.activeClass);\n\t\t\treturn;\n\t\t}\n\n        console.log(char);\n\n        // Rotate the pad on arrow left/right press.\n        if (char === 37 || char === 39) {\n            var toggle = document.getElementById(options.guideInputId);\n            if (toggle === null) return;\n            // Don't allow flipping by continuously pressing the same key.\n            // We use different keys to flip in either direction.\n            if ((toggle.checked && char === 39) || (!toggle.checked && char === 37)) return;\n            toggle.checked = !toggle.checked;\n            return;\n        }\n\n\t\t// The pressed key is out of the desired input range.\n\t\tif (char < 48 || char > 57) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Convert the pressed key to numerical value.\n\t\treturn char - 49;\n\t};\n\n\tfunction removeClass (className, element) {\n\t\tif (element.length !== undefined) {\n\t\t\telement.forEach(function (el) {\n\t\t\t\tel.classList.remove(className);\n\t\t\t});\n\t\t} else {\n\t\t\telement.classList.remove(className);\n\t\t}\n\t}\n\n    // Displays the correct combination in the guide.\n\tfunction setGuideDisplay () {\n\t\tvar guide = document.getElementById(options.correctGuideId);\n\t\tif (guide === null) return;\n\t\tguide.innerHTML = options.correctEntry;\n\t};\n\n\t// Temporarily toggles a class on the element (array of elements)\n\t// for the given time. Omit timeout or set to 0 to addOnly.\n\tfunction toggleClass (className, element, timeout, removeOnly) {\n\t\tif (removeOnly !== true) {\n\t\t\taddClass(className, element);\n\t\t} else if (isInvalidTimeout(timeout)) {\n\t\t\ttimeout = 1;\n\t\t}\n\n\t\tif (isInvalidTimeout(timeout)) return;\n\n\t\tsetTimeout(function () {\n\t\t\tremoveClass(className, element);\n\t\t}, timeout);\n\t};\n\n\tnumbers.forEach(function (number, index) {\n\t\tnumber.addEventListener('click', function () {\n\t\t\t// Prevents user from entering new values while\n\t\t\t// evaluating the last input.\n\t\t\tif (hasEnteredAllDigits()) return;\n\n\t\t\t// Animates the key press.\n\t\t\ttoggleClass(options.keyPressClass, number, options.keyPressAnimationLength);\n\n\t\t\t// Marks another dot as active.\n\t\t\tdots[input.length].classList.add(options.activeClass);\n\n\t\t\t// Adds the current value to the input.\n            if (index === 9) index = -1;\n\t\t\tinput += (index + 1);\n\n\t\t\t// Validates the input if we have reached\n\t\t\t// the limit length.\n\t\t\tif (hasEnteredAllDigits()) {\n\t\t\t\tcheckValidity(index);\n\t\t\t}\n\t\t});\n\t});\n})();\n"]},"metadata":{},"sourceType":"module"}