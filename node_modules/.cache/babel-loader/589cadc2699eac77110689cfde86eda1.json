{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/treasure-blox/src/App.js\";\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport MyNav from './components/Structure/Nav';\nimport MyCards from './components/Structure/Cards';\nimport SingleCard from './components/Structure/SingleCard'; // import img1 from './Treasure-hunt.jpeg';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react';\nimport getWeb3 from \"./getWeb3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nstate = {\n  storageValue: 0,\n  web3: null,\n  accounts: null,\n  contract: null,\n  decimals: null,\n  bal: null,\n  owner: null,\n  marketingWallet: null,\n  games: []\n};\n\ncomponentDidMount = async () => {\n  try {\n    // Get network provider and web3 instance.\n    const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n    const accounts = await web3.eth.getAccounts(); // Set the provider\n\n    web3.setProvider(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n\n    const abi = require('./TreasureBlox.abi.json');\n\n    const mepAddress = '0xd9145CCE52D386f254917e481eB44e9943F39138';\n    let instance = new web3.eth.Contract(abi, mepAddress); // // Get the contract instance.\n    // const networkId = await web3.eth.net.getId();\n    // const deployedNetwork = TreasureBlox.networks[networkId];\n    // const instance = new web3.eth.Contract(\n    //   TreasureBlox.abi,\n    //   deployedNetwork && deployedNetwork.address,\n    // );\n    // Set web3, accounts, and contract to the state, and then proceed with an\n    // example of interacting with the contract's methods.\n\n    this.setState({\n      web3,\n      accounts,\n      contract: instance\n    }, this.runExample);\n  } catch (error) {\n    // Catch any errors for any of the above operations.\n    alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n    console.error(error);\n  }\n};\n\nrunExample = async () => {\n  const {\n    accounts,\n    contract\n  } = this.state; // Stores a given value, 5 by default.\n\n  await contract.methods.set(5).send({\n    from: accounts[0]\n  }); // Get the value from the contract to prove it worked.\n\n  const response = await contract.methods.get().call();\n  const decimals = await contract.methods.decimals().call().then(console.log('Yes'));\n  const bal = await contract.methods.balanceOf(accounts[0]).call();\n  const owner = await contract.methods._owner().call();\n  const marketingWallet = await contract.methods.marketingWallet().call().then(console.log('marketing Wallet Complete'));\n  const games = await contract.methods.Games(1).call().then(console.log('games check complete')); // const games = await contract.methods.Games(1).call();\n  // Update state with the result.\n\n  this.setState({\n    storageValue: response,\n    account: accounts[0],\n    decimals: decimals,\n    bal: bal,\n    owner: owner,\n    marketingWallet: marketingWallet,\n    games: games\n  });\n};\n\nclass App extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background customFont\",\n      children: [/*#__PURE__*/_jsxDEV(MyNav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SingleCard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MyCards, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MyCards, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/treasure-blox/src/App.js"],"names":["Button","Container","Nav","Navbar","NavDropdown","MyNav","MyCards","SingleCard","React","Component","getWeb3","state","storageValue","web3","accounts","contract","decimals","bal","owner","marketingWallet","games","componentDidMount","eth","getAccounts","setProvider","Web3","providers","WebsocketProvider","abi","require","mepAddress","instance","Contract","setState","runExample","error","alert","console","methods","set","send","from","response","get","call","then","log","balanceOf","_owner","Games","account","App","render"],"mappings":";AAAA,SAASA,MAAT,EAAgBC,SAAhB,EAA0BC,GAA1B,EAA8BC,MAA9B,EAAqCC,WAArC,QAAwD,iBAAxD;AAEA,OAAOC,KAAP,MAAkB,4BAAlB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,OAAOC,UAAP,MAAuB,mCAAvB,C,CAEA;;AACA,OAAO,WAAP;AACA,OAAO,sCAAP;AAGA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;;AASAC,KAAK,GAAG;AAAEC,EAAAA,YAAY,EAAE,CAAhB;AACLC,EAAAA,IAAI,EAAE,IADD;AAELC,EAAAA,QAAQ,EAAE,IAFL;AAGLC,EAAAA,QAAQ,EAAE,IAHL;AAILC,EAAAA,QAAQ,EAAC,IAJJ;AAKLC,EAAAA,GAAG,EAAC,IALC;AAMLC,EAAAA,KAAK,EAAC,IAND;AAOLC,EAAAA,eAAe,EAAC,IAPX;AAQLC,EAAAA,KAAK,EAAC;AARD,CAAR;;AAUAC,iBAAiB,GAAG,YAAY;AAC9B,MAAI;AACF;AACA,UAAMR,IAAI,GAAG,MAAMH,OAAO,EAA1B,CAFE,CAIF;;AACA,UAAMI,QAAQ,GAAG,MAAMD,IAAI,CAACS,GAAL,CAASC,WAAT,EAAvB,CALE,CAQF;;AACAV,IAAAA,IAAI,CAACW,WAAL,CAAiB,IAAIC,IAAI,CAACC,SAAL,CAAeC,iBAAnB,CAAqC,qBAArC,CAAjB;;AAGA,UAAMC,GAAG,GAAGC,OAAO,CAAC,yBAAD,CAAnB;;AACA,UAAMC,UAAU,GAAG,4CAAnB;AAEA,QAAIC,QAAQ,GAAG,IAAIlB,IAAI,CAACS,GAAL,CAASU,QAAb,CAAsBJ,GAAtB,EAA0BE,UAA1B,CAAf,CAfE,CAiBF;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA,SAAKG,QAAL,CAAc;AAAEpB,MAAAA,IAAF;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA,QAAQ,EAAEgB;AAA5B,KAAd,EAAsD,KAAKG,UAA3D;AACD,GA5BD,CA4BE,OAAOC,KAAP,EAAc;AACd;AACAC,IAAAA,KAAK,CACF,wEADE,CAAL;AAGAC,IAAAA,OAAO,CAACF,KAAR,CAAcA,KAAd;AACD;AACF,CApCD;;AAsCAD,UAAU,GAAG,YAAY;AACvB,QAAM;AAAEpB,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyB,KAAKJ,KAApC,CADuB,CAGvB;;AACA,QAAMI,QAAQ,CAACuB,OAAT,CAAiBC,GAAjB,CAAqB,CAArB,EAAwBC,IAAxB,CAA6B;AAAEC,IAAAA,IAAI,EAAE3B,QAAQ,CAAC,CAAD;AAAhB,GAA7B,CAAN,CAJuB,CAMvB;;AACA,QAAM4B,QAAQ,GAAG,MAAM3B,QAAQ,CAACuB,OAAT,CAAiBK,GAAjB,GAAuBC,IAAvB,EAAvB;AAEA,QAAM5B,QAAQ,GAAG,MAAMD,QAAQ,CAACuB,OAAT,CAAiBtB,QAAjB,GAA4B4B,IAA5B,GAAmCC,IAAnC,CAAwCR,OAAO,CAACS,GAAR,CAAY,KAAZ,CAAxC,CAAvB;AAEA,QAAM7B,GAAG,GAAG,MAAMF,QAAQ,CAACuB,OAAT,CAAiBS,SAAjB,CAA2BjC,QAAQ,CAAC,CAAD,CAAnC,EAAwC8B,IAAxC,EAAlB;AAEA,QAAM1B,KAAK,GAAG,MAAMH,QAAQ,CAACuB,OAAT,CAAiBU,MAAjB,GAA0BJ,IAA1B,EAApB;AAEA,QAAMzB,eAAe,GAAG,MAAMJ,QAAQ,CAACuB,OAAT,CAAiBnB,eAAjB,GAAmCyB,IAAnC,GAA0CC,IAA1C,CAA+CR,OAAO,CAACS,GAAR,CAAY,2BAAZ,CAA/C,CAA9B;AAEA,QAAM1B,KAAK,GAAG,MAAML,QAAQ,CAACuB,OAAT,CAAiBW,KAAjB,CAAuB,CAAvB,EAA0BL,IAA1B,GAAiCC,IAAjC,CAAsCR,OAAO,CAACS,GAAR,CAAY,sBAAZ,CAAtC,CAApB,CAjBuB,CAyBvB;AAIA;;AACA,OAAKb,QAAL,CAAc;AAAErB,IAAAA,YAAY,EAAE8B,QAAhB;AACZQ,IAAAA,OAAO,EAAEpC,QAAQ,CAAC,CAAD,CADL;AAEZE,IAAAA,QAAQ,EAACA,QAFG;AAGZC,IAAAA,GAAG,EAACA,GAHQ;AAIZC,IAAAA,KAAK,EAACA,KAJM;AAKZC,IAAAA,eAAe,EAACA,eALJ;AAMZC,IAAAA,KAAK,EAACA;AANM,GAAd;AAOD,CArCD;;AA0CA,MAAM+B,GAAN,SAAkB1C,SAAlB,CAA4B;AAM1B2C,EAAAA,MAAM,GAAG;AAEP,wBACI;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA,8BAEE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cAHF,eASE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cATF,eAUE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAVF;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAcD;;AAtByB;;AAyB5B,eAAeD,GAAf","sourcesContent":["import { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\n\nimport MyNav from './components/Structure/Nav';\nimport MyCards from './components/Structure/Cards';\nimport SingleCard from './components/Structure/SingleCard';\n\n// import img1 from './Treasure-hunt.jpeg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nimport React, { Component } from 'react'\nimport getWeb3 from \"./getWeb3\";\n\n\n\n\n\n\n\n\nstate = { storageValue: 0,\n   web3: null,\n   accounts: null,\n   contract: null,\n   decimals:null,\n   bal:null,\n   owner:null,\n   marketingWallet:null,\n   games:[]};\n\ncomponentDidMount = async () => {\n  try {\n    // Get network provider and web3 instance.\n    const web3 = await getWeb3();\n\n    // Use web3 to get the user's accounts.\n    const accounts = await web3.eth.getAccounts();\n\n\n    // Set the provider\n    web3.setProvider(new Web3.providers.WebsocketProvider('ws://localhost:8545')\n    );\n\n    const abi = require('./TreasureBlox.abi.json');\n    const mepAddress = '0xd9145CCE52D386f254917e481eB44e9943F39138'\n\n    let instance = new web3.eth.Contract(abi,mepAddress);\n\n    // // Get the contract instance.\n    // const networkId = await web3.eth.net.getId();\n    // const deployedNetwork = TreasureBlox.networks[networkId];\n    // const instance = new web3.eth.Contract(\n    //   TreasureBlox.abi,\n    //   deployedNetwork && deployedNetwork.address,\n    // );\n\n    // Set web3, accounts, and contract to the state, and then proceed with an\n    // example of interacting with the contract's methods.\n    this.setState({ web3, accounts, contract: instance }, this.runExample);\n  } catch (error) {\n    // Catch any errors for any of the above operations.\n    alert(\n      `Failed to load web3, accounts, or contract. Check console for details.`,\n    );\n    console.error(error);\n  }\n};\n\nrunExample = async () => {\n  const { accounts, contract } = this.state;\n\n  // Stores a given value, 5 by default.\n  await contract.methods.set(5).send({ from: accounts[0] });\n\n  // Get the value from the contract to prove it worked.\n  const response = await contract.methods.get().call();\n\n  const decimals = await contract.methods.decimals().call().then(console.log('Yes'));\n\n  const bal = await contract.methods.balanceOf(accounts[0]).call();\n\n  const owner = await contract.methods._owner().call();\n\n  const marketingWallet = await contract.methods.marketingWallet().call().then(console.log('marketing Wallet Complete'));\n\n  const games = await contract.methods.Games(1).call().then(console.log('games check complete'));\n\n\n\n\n\n\n\n  // const games = await contract.methods.Games(1).call();\n\n\n\n  // Update state with the result.\n  this.setState({ storageValue: response,\n    account: accounts[0],\n    decimals:decimals,\n    bal:bal,\n    owner:owner,\n    marketingWallet:marketingWallet,\n    games:games});\n};\n\n\n\n\nclass App extends Component {\n\n\n\n\n\n  render() {\n\n    return (\n        <div className=\"background customFont\">\n\n          <MyNav />\n          <SingleCard/>\n\n\n\n\n\n          <MyCards/>\n          <MyCards/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}