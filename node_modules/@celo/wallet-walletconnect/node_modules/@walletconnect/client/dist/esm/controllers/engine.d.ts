import { SequenceTypes, ISequence, IEngine, RelayerTypes } from "@walletconnect/types";
import { JsonRpcPayload } from "@walletconnect/jsonrpc-utils";
export declare class Engine extends IEngine {
    sequence: ISequence;
    constructor(sequence: any);
    find(permissions: Partial<SequenceTypes.Permissions>): Promise<SequenceTypes.Settled[]>;
    ping(topic: string, timeout?: number): Promise<void>;
    send(topic: string, payload: JsonRpcPayload, chainId?: string): Promise<void>;
    get length(): number;
    get topics(): string[];
    get values(): SequenceTypes.Settled[];
    create(params?: SequenceTypes.CreateParams): Promise<SequenceTypes.Settled>;
    respond(params: SequenceTypes.RespondParams): Promise<SequenceTypes.Pending>;
    update(params: SequenceTypes.UpdateParams): Promise<SequenceTypes.Settled>;
    upgrade(params: SequenceTypes.UpgradeParams): Promise<SequenceTypes.Settled>;
    request(params: SequenceTypes.RequestParams): Promise<any>;
    delete(params: SequenceTypes.DeleteParams): Promise<void>;
    notify(params: SequenceTypes.NotifyParams): Promise<void>;
    propose(params?: SequenceTypes.ProposeParams): Promise<SequenceTypes.Pending>;
    settle(params: SequenceTypes.SettleParams): Promise<SequenceTypes.Settled>;
    onResponse(payloadEvent: RelayerTypes.PayloadEvent): Promise<void>;
    onAcknowledge(payloadEvent: RelayerTypes.PayloadEvent): Promise<void>;
    onMessage(payloadEvent: RelayerTypes.PayloadEvent): Promise<void>;
    onPayload(payloadEvent: RelayerTypes.PayloadEvent): Promise<void>;
    onUpdate(payloadEvent: RelayerTypes.PayloadEvent): Promise<void>;
    onUpgrade(payloadEvent: RelayerTypes.PayloadEvent): Promise<void>;
    protected onNotification(event: RelayerTypes.PayloadEvent): Promise<void>;
    handleUpdate(topic: string, update: SequenceTypes.Update, participant: SequenceTypes.Participant): Promise<SequenceTypes.Update>;
    handleUpgrade(topic: string, upgrade: SequenceTypes.Upgrade, participant: SequenceTypes.Participant): Promise<SequenceTypes.Upgrade>;
    private isJsonRpcAuthorized;
    private isNotificationAuthorized;
    private recordPayloadEvent;
    private shouldIgnorePayloadEvent;
    private onPayloadEvent;
    private onPendingPayloadEvent;
    private onPendingStatusEvent;
    private subscribeNewPending;
    private subscribeNewSettled;
    private registerEventListeners;
}
//# sourceMappingURL=engine.d.ts.map