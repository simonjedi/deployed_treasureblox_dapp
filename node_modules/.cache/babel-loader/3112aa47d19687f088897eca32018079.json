{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport pino from \"pino\";\nimport KeyValueStorage from \"keyvaluestorage\";\nimport { IClient } from \"@walletconnect/types\";\nimport { isPairingFailed, isSessionFailed, parseUri, isPairingResponded, isSessionResponded, getAppMetadata, ERROR, toMiliseconds } from \"@walletconnect/utils\";\nimport { generateChildLogger, getDefaultLoggerOptions, getLoggerContext } from \"@walletconnect/logger\";\nimport { Pairing, Session, Relayer } from \"./controllers\";\nimport { CLIENT_CONTEXT, CLIENT_DEFAULT, CLIENT_BEAT_INTERVAL, CLIENT_SHORT_TIMEOUT, CLIENT_EVENTS, CLIENT_STORAGE_OPTIONS, PAIRING_DEFAULT_TTL, PAIRING_EVENTS, PAIRING_SIGNAL_METHOD_URI, RELAYER_DEFAULT_PROTOCOL, SESSION_EMPTY_PERMISSIONS, SESSION_EMPTY_RESPONSE, SESSION_EMPTY_STATE, SESSION_EVENTS, SESSION_JSONRPC, SESSION_SIGNAL_METHOD_PAIRING } from \"./constants\";\nimport { Crypto } from \"./controllers/crypto\";\nimport { Storage } from \"./controllers/storage\";\nexport class Client extends IClient {\n  constructor(opts) {\n    super(opts);\n    this.protocol = \"wc\";\n    this.version = 2;\n    this.events = new EventEmitter();\n    this.name = CLIENT_CONTEXT;\n    const logger = typeof (opts === null || opts === void 0 ? void 0 : opts.logger) !== \"undefined\" && typeof (opts === null || opts === void 0 ? void 0 : opts.logger) !== \"string\" ? opts.logger : pino(getDefaultLoggerOptions({\n      level: (opts === null || opts === void 0 ? void 0 : opts.logger) || CLIENT_DEFAULT.logger\n    }));\n    this.name = (opts === null || opts === void 0 ? void 0 : opts.name) || CLIENT_DEFAULT.name;\n    this.controller = (opts === null || opts === void 0 ? void 0 : opts.controller) || CLIENT_DEFAULT.controller;\n    this.metadata = (opts === null || opts === void 0 ? void 0 : opts.metadata) || getAppMetadata();\n    this.apiKey = opts === null || opts === void 0 ? void 0 : opts.apiKey;\n    this.logger = generateChildLogger(logger, this.name);\n    const keyValueStorage = (opts === null || opts === void 0 ? void 0 : opts.storage) || new KeyValueStorage(Object.assign(Object.assign({}, CLIENT_STORAGE_OPTIONS), opts === null || opts === void 0 ? void 0 : opts.storageOptions));\n    this.crypto = new Crypto(this, this.logger, opts === null || opts === void 0 ? void 0 : opts.keychain);\n    this.relayer = new Relayer(this, this.logger, opts === null || opts === void 0 ? void 0 : opts.relayProvider);\n    this.storage = new Storage(this, this.logger, keyValueStorage);\n    this.pairing = new Pairing(this, this.logger);\n    this.session = new Session(this, this.logger);\n  }\n\n  static async init(opts) {\n    const client = new Client(opts);\n    await client.initialize();\n    return client;\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n\n  async connect(params) {\n    this.logger.debug(`Connecting Application`);\n    this.logger.trace({\n      type: \"method\",\n      method: \"connect\",\n      params\n    });\n\n    try {\n      if (typeof params.pairing === undefined) {\n        this.logger.info(\"Connecing with existing pairing\");\n      }\n\n      const pairing = typeof params.pairing === \"undefined\" ? await this.pairing.create() : await this.pairing.get(params.pairing.topic);\n      this.logger.trace({\n        type: \"method\",\n        method: \"connect\",\n        pairing\n      });\n      const metadata = params.metadata || this.metadata;\n\n      if (typeof metadata === \"undefined\") {\n        const error = ERROR.MISSING_OR_INVALID.format({\n          name: \"app metadata\"\n        });\n        this.logger.error(error.message);\n        throw new Error(error.message);\n      }\n\n      const session = await this.session.create({\n        signal: {\n          method: SESSION_SIGNAL_METHOD_PAIRING,\n          params: {\n            topic: pairing.topic\n          }\n        },\n        relay: params.relay || {\n          protocol: RELAYER_DEFAULT_PROTOCOL\n        },\n        metadata,\n        permissions: Object.assign(Object.assign({}, params.permissions), {\n          notifications: SESSION_EMPTY_PERMISSIONS.notifications\n        })\n      });\n      this.logger.debug(`Application Connection Successful`);\n      this.logger.trace({\n        type: \"method\",\n        method: \"connect\",\n        session\n      });\n      return session;\n    } catch (e) {\n      this.logger.debug(`Application Connection Failure`);\n      this.logger.error(e);\n      throw e;\n    }\n  }\n\n  async pair(params) {\n    this.logger.debug(`Pairing`);\n    this.logger.trace({\n      type: \"method\",\n      method: \"pair\",\n      params\n    });\n    const proposal = formatPairingProposal(params.uri);\n    const approved = proposal.proposer.controller !== this.controller;\n    const reason = approved ? undefined : ERROR.UNAUTHORIZED_MATCHING_CONTROLLER.format({\n      controller: this.controller\n    });\n    const pending = await this.pairing.respond({\n      approved,\n      proposal,\n      reason\n    });\n\n    if (!isPairingResponded(pending)) {\n      const error = ERROR.NO_MATCHING_RESPONSE.format({\n        context: \"pairing\"\n      });\n      this.logger.error(error.message);\n      throw new Error(error.message);\n    }\n\n    if (isPairingFailed(pending.outcome)) {\n      this.logger.debug(`Pairing Failure`);\n      this.logger.trace({\n        type: \"method\",\n        method: \"pair\",\n        outcome: pending.outcome\n      });\n      throw new Error(pending.outcome.reason.message);\n    }\n\n    this.logger.debug(`Pairing Success`);\n    this.logger.trace({\n      type: \"method\",\n      method: \"pair\",\n      pending\n    });\n    const pairing = await this.pairing.get(pending.outcome.topic);\n    return pairing;\n  }\n\n  async approve(params) {\n    this.logger.debug(`Approving Session Proposal`);\n    this.logger.trace({\n      type: \"method\",\n      method: \"approve\",\n      params\n    });\n\n    if (typeof params.response === \"undefined\") {\n      const error = ERROR.MISSING_RESPONSE.format({\n        context: \"session\"\n      });\n      this.logger.error(error.message);\n      throw new Error(error.message);\n    }\n\n    const state = params.response.state || SESSION_EMPTY_STATE;\n    const metadata = params.response.metadata || this.metadata;\n\n    if (typeof metadata === \"undefined\") {\n      const error = ERROR.MISSING_OR_INVALID.format({\n        name: \"app metadata\"\n      });\n      this.logger.error(error.message);\n      throw new Error(error.message);\n    }\n\n    const approved = params.proposal.proposer.controller !== this.controller;\n    const reason = approved ? undefined : ERROR.UNAUTHORIZED_MATCHING_CONTROLLER.format({\n      controller: this.controller\n    });\n    const pending = await this.session.respond({\n      approved,\n      proposal: params.proposal,\n      response: {\n        state,\n        metadata\n      },\n      reason\n    });\n\n    if (!isSessionResponded(pending)) {\n      const error = ERROR.NO_MATCHING_RESPONSE.format({\n        context: \"session\"\n      });\n      this.logger.error(error.message);\n      throw new Error(error.message);\n    }\n\n    if (isSessionFailed(pending.outcome)) {\n      this.logger.debug(`Session Proposal Approval Failure`);\n      this.logger.trace({\n        type: \"method\",\n        method: \"approve\",\n        outcome: pending.outcome\n      });\n      throw new Error(pending.outcome.reason.message);\n    }\n\n    this.logger.debug(`Session Proposal Approval Success`);\n    this.logger.trace({\n      type: \"method\",\n      method: \"approve\",\n      pending\n    });\n    return this.session.get(pending.outcome.topic);\n  }\n\n  async reject(params) {\n    this.logger.debug(`Rejecting Session Proposal`);\n    this.logger.trace({\n      type: \"method\",\n      method: \"reject\",\n      params\n    });\n    const pending = await this.session.respond({\n      approved: false,\n      proposal: params.proposal,\n      response: SESSION_EMPTY_RESPONSE,\n      reason: params.reason\n    });\n    this.logger.debug(`Session Proposal Response Success`);\n    this.logger.trace({\n      type: \"method\",\n      method: \"reject\",\n      pending\n    });\n  }\n\n  async upgrade(params) {\n    await this.session.upgrade(params);\n  }\n\n  async update(params) {\n    await this.session.update(params);\n  }\n\n  async request(params) {\n    return this.session.request(params);\n  }\n\n  async respond(params) {\n    await this.session.send(params.topic, params.response);\n  }\n\n  async ping(params) {\n    await this.session.ping(params.topic, params.timeout);\n  }\n\n  async notify(params) {\n    await this.session.notify(params);\n  }\n\n  async disconnect(params) {\n    this.logger.debug(`Disconnecting Application`);\n    this.logger.trace({\n      type: \"method\",\n      method: \"disconnect\",\n      params\n    });\n    await this.session.delete(params);\n  }\n\n  async onPairingRequest(request) {\n    if (request.method === SESSION_JSONRPC.propose) {\n      const proposal = request.params;\n\n      if (proposal.proposer.controller === this.controller) {\n        const reason = ERROR.UNAUTHORIZED_MATCHING_CONTROLLER.format({\n          controller: this.controller\n        });\n        await this.session.respond({\n          approved: false,\n          proposal,\n          response: SESSION_EMPTY_RESPONSE,\n          reason\n        });\n        return;\n      }\n\n      const eventName = CLIENT_EVENTS.session.proposal;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        data: proposal\n      });\n      this.events.emit(eventName, proposal);\n    }\n  }\n\n  async onPairingSettled(pairing) {\n    if (pairing.permissions.controller.publicKey === pairing.self.publicKey && typeof pairing.state.metadata === \"undefined\") {\n      setTimeout(async () => await this.pairing.update({\n        topic: pairing.topic,\n        state: {\n          metadata: this.metadata\n        }\n      }), CLIENT_SHORT_TIMEOUT);\n    }\n  }\n\n  async initialize() {\n    this.logger.trace(`Initialized`);\n\n    try {\n      await this.pairing.init();\n      await this.session.init();\n      await this.crypto.init();\n      await this.relayer.init();\n      this.setBeatInterval();\n      this.registerEventListeners();\n      this.logger.info(`Client Initilization Success`);\n    } catch (e) {\n      this.logger.info(`Client Initilization Failure`);\n      this.logger.error(e);\n      throw e;\n    }\n  }\n\n  setBeatInterval() {\n    setInterval(() => this.events.emit(CLIENT_EVENTS.beat), toMiliseconds(CLIENT_BEAT_INTERVAL));\n  }\n\n  registerEventListeners() {\n    this.pairing.on(PAIRING_EVENTS.proposed, pending => {\n      const eventName = CLIENT_EVENTS.pairing.proposal;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        data: pending.proposal\n      });\n      this.events.emit(eventName, pending.proposal);\n    });\n    this.pairing.on(PAIRING_EVENTS.settled, pairing => {\n      const eventName = CLIENT_EVENTS.pairing.created;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        data: pairing\n      });\n      this.events.emit(eventName, pairing);\n      this.onPairingSettled(pairing);\n    });\n    this.pairing.on(PAIRING_EVENTS.updated, (pairing, update) => {\n      const eventName = CLIENT_EVENTS.pairing.updated;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        data: pairing,\n        update\n      });\n      this.events.emit(eventName, pairing, update);\n    });\n    this.pairing.on(PAIRING_EVENTS.deleted, (pairing, reason) => {\n      const eventName = CLIENT_EVENTS.pairing.deleted;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        data: pairing,\n        reason\n      });\n      this.events.emit(eventName, pairing, reason);\n    });\n    this.pairing.on(PAIRING_EVENTS.request, requestEvent => {\n      this.onPairingRequest(requestEvent.request);\n    });\n    this.session.on(PAIRING_EVENTS.sync, () => this.events.emit(CLIENT_EVENTS.pairing.sync));\n    this.session.on(SESSION_EVENTS.proposed, pending => {\n      const eventName = CLIENT_EVENTS.session.proposal;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        data: pending.proposal\n      });\n      this.events.emit(eventName, pending.proposal);\n    });\n    this.session.on(SESSION_EVENTS.settled, session => {\n      const eventName = CLIENT_EVENTS.session.created;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        data: session\n      });\n      this.events.emit(eventName, session);\n    });\n    this.session.on(SESSION_EVENTS.updated, (session, update) => {\n      const eventName = CLIENT_EVENTS.session.updated;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        data: session,\n        update\n      });\n      this.events.emit(eventName, session, update);\n    });\n    this.session.on(SESSION_EVENTS.deleted, (session, reason) => {\n      const eventName = CLIENT_EVENTS.session.deleted;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        data: session,\n        reason\n      });\n      this.events.emit(eventName, session, reason);\n    });\n    this.session.on(SESSION_EVENTS.request, requestEvent => {\n      const eventName = CLIENT_EVENTS.session.request;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        data: requestEvent\n      });\n      this.events.emit(eventName, requestEvent);\n    });\n    this.session.on(SESSION_EVENTS.response, responseEvent => {\n      const eventName = CLIENT_EVENTS.session.response;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        data: responseEvent\n      });\n      this.events.emit(eventName, responseEvent);\n    });\n    this.session.on(SESSION_EVENTS.notification, notificationEvent => {\n      const eventName = CLIENT_EVENTS.session.notification;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        data: notificationEvent\n      });\n      this.events.emit(eventName, notificationEvent);\n    });\n    this.session.on(SESSION_EVENTS.sync, () => this.events.emit(CLIENT_EVENTS.session.sync));\n  }\n\n}\n\nfunction formatPairingProposal(uri) {\n  const uriParams = parseUri(uri);\n  return {\n    topic: uriParams.topic,\n    relay: uriParams.relay,\n    proposer: {\n      publicKey: uriParams.publicKey,\n      controller: uriParams.controller\n    },\n    signal: {\n      method: PAIRING_SIGNAL_METHOD_URI,\n      params: {\n        uri\n      }\n    },\n    permissions: {\n      jsonrpc: {\n        methods: [SESSION_JSONRPC.propose]\n      },\n      notifications: {\n        types: []\n      }\n    },\n    ttl: PAIRING_DEFAULT_TTL\n  };\n}","map":{"version":3,"sources":["../../src/client.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { EventEmitter } from \"events\";\nimport pino from \"pino\";\nimport KeyValueStorage from \"keyvaluestorage\";\nimport { IClient, } from \"@walletconnect/types\";\nimport { isPairingFailed, isSessionFailed, parseUri, isPairingResponded, isSessionResponded, getAppMetadata, ERROR, toMiliseconds, } from \"@walletconnect/utils\";\nimport { generateChildLogger, getDefaultLoggerOptions, getLoggerContext, } from \"@walletconnect/logger\";\nimport { Pairing, Session, Relayer } from \"./controllers\";\nimport { CLIENT_CONTEXT, CLIENT_DEFAULT, CLIENT_BEAT_INTERVAL, CLIENT_SHORT_TIMEOUT, CLIENT_EVENTS, CLIENT_STORAGE_OPTIONS, PAIRING_DEFAULT_TTL, PAIRING_EVENTS, PAIRING_SIGNAL_METHOD_URI, RELAYER_DEFAULT_PROTOCOL, SESSION_EMPTY_PERMISSIONS, SESSION_EMPTY_RESPONSE, SESSION_EMPTY_STATE, SESSION_EVENTS, SESSION_JSONRPC, SESSION_SIGNAL_METHOD_PAIRING, } from \"./constants\";\nimport { Crypto } from \"./controllers/crypto\";\nimport { Storage } from \"./controllers/storage\";\nexport class Client extends IClient {\n    constructor(opts) {\n        super(opts);\n        this.protocol = \"wc\";\n        this.version = 2;\n        this.events = new EventEmitter();\n        this.name = CLIENT_CONTEXT;\n        const logger = typeof (opts === null || opts === void 0 ? void 0 : opts.logger) !== \"undefined\" && typeof (opts === null || opts === void 0 ? void 0 : opts.logger) !== \"string\"\n            ? opts.logger\n            : pino(getDefaultLoggerOptions({ level: (opts === null || opts === void 0 ? void 0 : opts.logger) || CLIENT_DEFAULT.logger }));\n        this.name = (opts === null || opts === void 0 ? void 0 : opts.name) || CLIENT_DEFAULT.name;\n        this.controller = (opts === null || opts === void 0 ? void 0 : opts.controller) || CLIENT_DEFAULT.controller;\n        this.metadata = (opts === null || opts === void 0 ? void 0 : opts.metadata) || getAppMetadata();\n        this.apiKey = opts === null || opts === void 0 ? void 0 : opts.apiKey;\n        this.logger = generateChildLogger(logger, this.name);\n        const keyValueStorage = (opts === null || opts === void 0 ? void 0 : opts.storage) || new KeyValueStorage(Object.assign(Object.assign({}, CLIENT_STORAGE_OPTIONS), opts === null || opts === void 0 ? void 0 : opts.storageOptions));\n        this.crypto = new Crypto(this, this.logger, opts === null || opts === void 0 ? void 0 : opts.keychain);\n        this.relayer = new Relayer(this, this.logger, opts === null || opts === void 0 ? void 0 : opts.relayProvider);\n        this.storage = new Storage(this, this.logger, keyValueStorage);\n        this.pairing = new Pairing(this, this.logger);\n        this.session = new Session(this, this.logger);\n    }\n    static async init(opts) {\n        const client = new Client(opts);\n        await client.initialize();\n        return client;\n    }\n    get context() {\n        return getLoggerContext(this.logger);\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    async connect(params) {\n        this.logger.debug(`Connecting Application`);\n        this.logger.trace({ type: \"method\", method: \"connect\", params });\n        try {\n            if (typeof params.pairing === undefined) {\n                this.logger.info(\"Connecing with existing pairing\");\n            }\n            const pairing = typeof params.pairing === \"undefined\"\n                ? await this.pairing.create()\n                : await this.pairing.get(params.pairing.topic);\n            this.logger.trace({ type: \"method\", method: \"connect\", pairing });\n            const metadata = params.metadata || this.metadata;\n            if (typeof metadata === \"undefined\") {\n                const error = ERROR.MISSING_OR_INVALID.format({ name: \"app metadata\" });\n                this.logger.error(error.message);\n                throw new Error(error.message);\n            }\n            const session = await this.session.create({\n                signal: { method: SESSION_SIGNAL_METHOD_PAIRING, params: { topic: pairing.topic } },\n                relay: params.relay || { protocol: RELAYER_DEFAULT_PROTOCOL },\n                metadata,\n                permissions: Object.assign(Object.assign({}, params.permissions), { notifications: SESSION_EMPTY_PERMISSIONS.notifications }),\n            });\n            this.logger.debug(`Application Connection Successful`);\n            this.logger.trace({ type: \"method\", method: \"connect\", session });\n            return session;\n        }\n        catch (e) {\n            this.logger.debug(`Application Connection Failure`);\n            this.logger.error(e);\n            throw e;\n        }\n    }\n    async pair(params) {\n        this.logger.debug(`Pairing`);\n        this.logger.trace({ type: \"method\", method: \"pair\", params });\n        const proposal = formatPairingProposal(params.uri);\n        const approved = proposal.proposer.controller !== this.controller;\n        const reason = approved\n            ? undefined\n            : ERROR.UNAUTHORIZED_MATCHING_CONTROLLER.format({ controller: this.controller });\n        const pending = await this.pairing.respond({ approved, proposal, reason });\n        if (!isPairingResponded(pending)) {\n            const error = ERROR.NO_MATCHING_RESPONSE.format({ context: \"pairing\" });\n            this.logger.error(error.message);\n            throw new Error(error.message);\n        }\n        if (isPairingFailed(pending.outcome)) {\n            this.logger.debug(`Pairing Failure`);\n            this.logger.trace({ type: \"method\", method: \"pair\", outcome: pending.outcome });\n            throw new Error(pending.outcome.reason.message);\n        }\n        this.logger.debug(`Pairing Success`);\n        this.logger.trace({ type: \"method\", method: \"pair\", pending });\n        const pairing = await this.pairing.get(pending.outcome.topic);\n        return pairing;\n    }\n    async approve(params) {\n        this.logger.debug(`Approving Session Proposal`);\n        this.logger.trace({ type: \"method\", method: \"approve\", params });\n        if (typeof params.response === \"undefined\") {\n            const error = ERROR.MISSING_RESPONSE.format({ context: \"session\" });\n            this.logger.error(error.message);\n            throw new Error(error.message);\n        }\n        const state = params.response.state || SESSION_EMPTY_STATE;\n        const metadata = params.response.metadata || this.metadata;\n        if (typeof metadata === \"undefined\") {\n            const error = ERROR.MISSING_OR_INVALID.format({ name: \"app metadata\" });\n            this.logger.error(error.message);\n            throw new Error(error.message);\n        }\n        const approved = params.proposal.proposer.controller !== this.controller;\n        const reason = approved\n            ? undefined\n            : ERROR.UNAUTHORIZED_MATCHING_CONTROLLER.format({ controller: this.controller });\n        const pending = await this.session.respond({\n            approved,\n            proposal: params.proposal,\n            response: { state, metadata },\n            reason,\n        });\n        if (!isSessionResponded(pending)) {\n            const error = ERROR.NO_MATCHING_RESPONSE.format({ context: \"session\" });\n            this.logger.error(error.message);\n            throw new Error(error.message);\n        }\n        if (isSessionFailed(pending.outcome)) {\n            this.logger.debug(`Session Proposal Approval Failure`);\n            this.logger.trace({ type: \"method\", method: \"approve\", outcome: pending.outcome });\n            throw new Error(pending.outcome.reason.message);\n        }\n        this.logger.debug(`Session Proposal Approval Success`);\n        this.logger.trace({ type: \"method\", method: \"approve\", pending });\n        return this.session.get(pending.outcome.topic);\n    }\n    async reject(params) {\n        this.logger.debug(`Rejecting Session Proposal`);\n        this.logger.trace({ type: \"method\", method: \"reject\", params });\n        const pending = await this.session.respond({\n            approved: false,\n            proposal: params.proposal,\n            response: SESSION_EMPTY_RESPONSE,\n            reason: params.reason,\n        });\n        this.logger.debug(`Session Proposal Response Success`);\n        this.logger.trace({ type: \"method\", method: \"reject\", pending });\n    }\n    async upgrade(params) {\n        await this.session.upgrade(params);\n    }\n    async update(params) {\n        await this.session.update(params);\n    }\n    async request(params) {\n        return this.session.request(params);\n    }\n    async respond(params) {\n        await this.session.send(params.topic, params.response);\n    }\n    async ping(params) {\n        await this.session.ping(params.topic, params.timeout);\n    }\n    async notify(params) {\n        await this.session.notify(params);\n    }\n    async disconnect(params) {\n        this.logger.debug(`Disconnecting Application`);\n        this.logger.trace({ type: \"method\", method: \"disconnect\", params });\n        await this.session.delete(params);\n    }\n    async onPairingRequest(request) {\n        if (request.method === SESSION_JSONRPC.propose) {\n            const proposal = request.params;\n            if (proposal.proposer.controller === this.controller) {\n                const reason = ERROR.UNAUTHORIZED_MATCHING_CONTROLLER.format({\n                    controller: this.controller,\n                });\n                await this.session.respond({\n                    approved: false,\n                    proposal,\n                    response: SESSION_EMPTY_RESPONSE,\n                    reason,\n                });\n                return;\n            }\n            const eventName = CLIENT_EVENTS.session.proposal;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, data: proposal });\n            this.events.emit(eventName, proposal);\n        }\n    }\n    async onPairingSettled(pairing) {\n        if (pairing.permissions.controller.publicKey === pairing.self.publicKey &&\n            typeof pairing.state.metadata === \"undefined\") {\n            setTimeout(async () => await this.pairing.update({ topic: pairing.topic, state: { metadata: this.metadata } }), CLIENT_SHORT_TIMEOUT);\n        }\n    }\n    async initialize() {\n        this.logger.trace(`Initialized`);\n        try {\n            await this.pairing.init();\n            await this.session.init();\n            await this.crypto.init();\n            await this.relayer.init();\n            this.setBeatInterval();\n            this.registerEventListeners();\n            this.logger.info(`Client Initilization Success`);\n        }\n        catch (e) {\n            this.logger.info(`Client Initilization Failure`);\n            this.logger.error(e);\n            throw e;\n        }\n    }\n    setBeatInterval() {\n        setInterval(() => this.events.emit(CLIENT_EVENTS.beat), toMiliseconds(CLIENT_BEAT_INTERVAL));\n    }\n    registerEventListeners() {\n        this.pairing.on(PAIRING_EVENTS.proposed, (pending) => {\n            const eventName = CLIENT_EVENTS.pairing.proposal;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, data: pending.proposal });\n            this.events.emit(eventName, pending.proposal);\n        });\n        this.pairing.on(PAIRING_EVENTS.settled, (pairing) => {\n            const eventName = CLIENT_EVENTS.pairing.created;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, data: pairing });\n            this.events.emit(eventName, pairing);\n            this.onPairingSettled(pairing);\n        });\n        this.pairing.on(PAIRING_EVENTS.updated, (pairing, update) => {\n            const eventName = CLIENT_EVENTS.pairing.updated;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, data: pairing, update });\n            this.events.emit(eventName, pairing, update);\n        });\n        this.pairing.on(PAIRING_EVENTS.deleted, (pairing, reason) => {\n            const eventName = CLIENT_EVENTS.pairing.deleted;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, data: pairing, reason });\n            this.events.emit(eventName, pairing, reason);\n        });\n        this.pairing.on(PAIRING_EVENTS.request, (requestEvent) => {\n            this.onPairingRequest(requestEvent.request);\n        });\n        this.session.on(PAIRING_EVENTS.sync, () => this.events.emit(CLIENT_EVENTS.pairing.sync));\n        this.session.on(SESSION_EVENTS.proposed, (pending) => {\n            const eventName = CLIENT_EVENTS.session.proposal;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, data: pending.proposal });\n            this.events.emit(eventName, pending.proposal);\n        });\n        this.session.on(SESSION_EVENTS.settled, (session) => {\n            const eventName = CLIENT_EVENTS.session.created;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, data: session });\n            this.events.emit(eventName, session);\n        });\n        this.session.on(SESSION_EVENTS.updated, (session, update) => {\n            const eventName = CLIENT_EVENTS.session.updated;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, data: session, update });\n            this.events.emit(eventName, session, update);\n        });\n        this.session.on(SESSION_EVENTS.deleted, (session, reason) => {\n            const eventName = CLIENT_EVENTS.session.deleted;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, data: session, reason });\n            this.events.emit(eventName, session, reason);\n        });\n        this.session.on(SESSION_EVENTS.request, (requestEvent) => {\n            const eventName = CLIENT_EVENTS.session.request;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, data: requestEvent });\n            this.events.emit(eventName, requestEvent);\n        });\n        this.session.on(SESSION_EVENTS.response, (responseEvent) => {\n            const eventName = CLIENT_EVENTS.session.response;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, data: responseEvent });\n            this.events.emit(eventName, responseEvent);\n        });\n        this.session.on(SESSION_EVENTS.notification, (notificationEvent) => {\n            const eventName = CLIENT_EVENTS.session.notification;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, data: notificationEvent });\n            this.events.emit(eventName, notificationEvent);\n        });\n        this.session.on(SESSION_EVENTS.sync, () => this.events.emit(CLIENT_EVENTS.session.sync));\n    }\n}\nfunction formatPairingProposal(uri) {\n    const uriParams = parseUri(uri);\n    return {\n        topic: uriParams.topic,\n        relay: uriParams.relay,\n        proposer: { publicKey: uriParams.publicKey, controller: uriParams.controller },\n        signal: { method: PAIRING_SIGNAL_METHOD_URI, params: { uri } },\n        permissions: {\n            jsonrpc: { methods: [SESSION_JSONRPC.propose] },\n            notifications: { types: [] },\n        },\n        ttl: PAIRING_DEFAULT_TTL,\n    };\n}\n//# sourceMappingURL=client.js.map"]},"metadata":{},"sourceType":"module"}