{"ast":null,"code":"'use strict'; // return a string with the provided number formatted with commas.\n// can specify either a Number or a String.\n\nfunction commaNumber(inputNumber, optionalSeparator, optionalDecimalChar) {\n  // default `decimalChar` is a period\n  var decimalChar = optionalDecimalChar || '.';\n  var stringNumber; // we assign this in the switch block and need it later.\n\n  {\n    var number; // we assign this in the switch block and need it right after.\n\n    switch (typeof inputNumber) {\n      case 'string':\n        // if there aren't enough digits to need separators then return it\n        // NOTE: some numbers which are too small will get passed this\n        //       when they have decimal values which make them too long here.\n        //       but, the number value check after this switch will catch it.\n        if (inputNumber.length < (inputNumber[0] === '-' ? 5 : 4)) {\n          return inputNumber;\n        } // remember it as a string in `stringNumber` and convert to a Number\n\n\n        stringNumber = inputNumber; // if they're not using the Node standard decimal char then replace it\n        // before converting.\n\n        number = Number(decimalChar !== '.' ? stringNumber.replace(decimalChar, '.') : stringNumber);\n        break;\n      // convert to a string.\n      // NOTE: don't check if the number is too small before converting\n      //       because we'll need to return `stringNumber` anyway.\n\n      case 'number':\n        stringNumber = String(inputNumber);\n        number = inputNumber; // create the string version with the decimalChar they specified.\n        // this matches what the above case 'string' produces,\n        // and, fixes the bug *not* doing this caused.\n\n        if ('.' !== decimalChar && !Number.isInteger(inputNumber)) {\n          stringNumber = stringNumber.replace('.', decimalChar);\n        }\n\n        break;\n      // return invalid type as-is\n\n      default:\n        return inputNumber;\n    } // when it doesn't need a separator or isn't a number then return it\n\n\n    if (-1000 < number && number < 1000 || isNaN(number) || !isFinite(number)) {\n      return stringNumber;\n    }\n  }\n  {\n    // strip off decimal value to add back in later\n    var decimalIndex = stringNumber.lastIndexOf(decimalChar);\n    var decimal;\n\n    if (decimalIndex > -1) {\n      decimal = stringNumber.slice(decimalIndex);\n      stringNumber = stringNumber.slice(0, decimalIndex);\n    } // finally, parse the string. Note, default 'separator' is a comma.\n\n\n    var parts = parse(stringNumber, optionalSeparator || ','); // if there's a decimal value then add it to the parts.\n\n    if (decimal) {\n      // NOTE: we sliced() it off including the decimalChar\n      parts.push(decimal);\n    } // combine all parts for the final string (note, has separators).\n\n\n    return parts.join('');\n  }\n}\n\nfunction parse(string, separator) {\n  // find first index to split the string at (where 1st separator goes).\n  var i = (string.length - 1) % 3 + 1; // above calculation is wrong when num is negative and a certain size.\n\n  if (i === 1 && string[0] === '-') {\n    i = 4; // example: -123,456,789  start at 4, not 1.\n  }\n\n  var strings = [// holds the string parts\n  string.slice(0, i) // grab part before the first separator\n  ]; // split remaining string in groups of 3 where a separator belongs\n\n  for (; i < string.length; i += 3) {\n    strings.push(separator, string.substr(i, 3));\n  }\n\n  return strings;\n} // convenience function for currying style:\n//   const format = commaNumber.bindWith(',', '.')\n\n\nfunction bindWith(separator, decimalChar) {\n  return function (number) {\n    return commaNumber(number, separator, decimalChar);\n  };\n}\n\nmodule.exports = commaNumber;\nmodule.exports.bindWith = bindWith;","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/comma-number/index.js"],"names":["commaNumber","inputNumber","optionalSeparator","optionalDecimalChar","decimalChar","stringNumber","number","length","Number","replace","String","isInteger","isNaN","isFinite","decimalIndex","lastIndexOf","decimal","slice","parts","parse","push","join","string","separator","i","strings","substr","bindWith","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n// return a string with the provided number formatted with commas.\n// can specify either a Number or a String.\nfunction commaNumber(inputNumber, optionalSeparator, optionalDecimalChar) {\n\n  // default `decimalChar` is a period\n  const decimalChar = optionalDecimalChar || '.'\n\n  let stringNumber // we assign this in the switch block and need it later.\n\n  {\n    let number // we assign this in the switch block and need it right after.\n\n    switch (typeof inputNumber) {\n\n      case 'string':\n\n        // if there aren't enough digits to need separators then return it\n        // NOTE: some numbers which are too small will get passed this\n        //       when they have decimal values which make them too long here.\n        //       but, the number value check after this switch will catch it.\n        if (inputNumber.length < (inputNumber[0] === '-' ? 5 : 4)) {\n          return inputNumber\n        }\n\n        // remember it as a string in `stringNumber` and convert to a Number\n        stringNumber = inputNumber\n\n        // if they're not using the Node standard decimal char then replace it\n        // before converting.\n        number = Number(\n          (decimalChar !== '.') ? stringNumber.replace(decimalChar, '.') : stringNumber\n        )\n        break\n\n      // convert to a string.\n      // NOTE: don't check if the number is too small before converting\n      //       because we'll need to return `stringNumber` anyway.\n      case 'number':\n        stringNumber = String(inputNumber)\n        number       = inputNumber\n        // create the string version with the decimalChar they specified.\n        // this matches what the above case 'string' produces,\n        // and, fixes the bug *not* doing this caused.\n        if ('.' !== decimalChar && !Number.isInteger(inputNumber)) {\n          stringNumber = stringNumber.replace('.', decimalChar)\n        }\n        break\n\n      // return invalid type as-is\n      default: return inputNumber\n    }\n\n    // when it doesn't need a separator or isn't a number then return it\n    if ((-1000 < number && number < 1000) || isNaN(number) || !isFinite(number)) {\n      return stringNumber\n    }\n  }\n\n  {\n    // strip off decimal value to add back in later\n    const decimalIndex = stringNumber.lastIndexOf(decimalChar)\n    let decimal\n    if (decimalIndex > -1) {\n      decimal = stringNumber.slice(decimalIndex)\n      stringNumber = stringNumber.slice(0, decimalIndex)\n    }\n\n    // finally, parse the string. Note, default 'separator' is a comma.\n    const parts = parse(stringNumber, optionalSeparator || ',')\n\n    // if there's a decimal value then add it to the parts.\n    if (decimal) {// NOTE: we sliced() it off including the decimalChar\n      parts.push(decimal)\n    }\n\n    // combine all parts for the final string (note, has separators).\n    return parts.join('')\n  }\n}\n\nfunction parse(string, separator) {\n\n  // find first index to split the string at (where 1st separator goes).\n  let i = ((string.length - 1) % 3) + 1\n\n  // above calculation is wrong when num is negative and a certain size.\n  if (i === 1 && (string[0] === '-')) {\n    i = 4  // example: -123,456,789  start at 4, not 1.\n  }\n\n  const strings = [ // holds the string parts\n    string.slice(0, i) // grab part before the first separator\n  ]\n\n  // split remaining string in groups of 3 where a separator belongs\n  for (; i < string.length; i += 3) {\n    strings.push(separator, string.substr(i, 3))\n  }\n\n  return strings\n}\n\n\n// convenience function for currying style:\n//   const format = commaNumber.bindWith(',', '.')\nfunction bindWith(separator, decimalChar) {\n  return function(number) {\n    return commaNumber(number, separator, decimalChar)\n  }\n}\n\nmodule.exports = commaNumber\nmodule.exports.bindWith = bindWith\n"]},"metadata":{},"sourceType":"script"}