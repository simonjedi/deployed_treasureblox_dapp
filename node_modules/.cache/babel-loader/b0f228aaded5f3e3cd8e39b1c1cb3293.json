{"ast":null,"code":"const canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\"); //Game variables\n\nlet controlPlayer = false;\nlet hasGameStarted = false; //Just to prevent game from working while page reloads\n\nlet hasGameOver = false;\nlet startDate = null;\n\nfunction millisecondsToMinutes(millis) {\n  let minutes = Math.floor(millis / 60000);\n  let seconds = (millis % 60000 / 1000).toFixed(0);\n  return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n}\n\nfunction gameOver() {\n  if (!hasGameOver) {\n    let endDate = new Date();\n    let timeDiff = endDate - startDate;\n\n    if (timeDiff < 60000) {\n      alert(`You survived ${timeDiff / 1000} seconds!`);\n    } else {\n      let minutesSurvived = millisecondsToMinutes(timeDiff);\n      alert(`You survived ${minutesSurvived} minutes. WOW!`);\n    }\n\n    hasGameOver = true;\n  }\n} //Canvas Black Border\n\n\nfunction drawBorder() {\n  ctx.fillStyle = 'black';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.clearRect(50, 50, 500, 500);\n}\n\nlet playerRect = {\n  x: 275,\n  y: 275,\n  width: 50,\n  height: 50\n}; //Game Elements\n\nlet rectangles = [{\n  x: 75,\n  y: 75,\n  dx: 5,\n  dy: 4,\n  width: 75,\n  height: 75,\n  color: \"#000099\"\n}, {\n  x: 400,\n  y: 75,\n  dx: -5,\n  dy: 5.5,\n  width: 80,\n  height: 60,\n  color: \"#000099\"\n}, {\n  x: 75,\n  y: 445,\n  dx: 5,\n  dy: -5,\n  width: 40,\n  height: 80,\n  color: \"#000099\"\n}, {\n  x: 420,\n  y: 450,\n  dx: -5,\n  dy: -5,\n  width: 130,\n  height: 25,\n  color: \"#000099\"\n}]; //Render rectangles to canvas.\n\nfunction drawRect() {\n  //Draw playerRect first\n  ctx.fillStyle = \"#990000\";\n  ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n  rectangles.forEach(rect => {\n    ctx.fillStyle = rect.color;\n    ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n  });\n} //Detect whether player makes contact with border\n\n\nfunction playerCollisionDetection() {\n  if (playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50) {\n    gameOver();\n  }\n} //Returns true if 2 rectangles are colliding\n\n\nfunction isRectangleCollision(rect1, rect2) {\n  return !(rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y);\n} //Detect whether player makes contact with rectangle\n\n\nfunction rectangleCollisionDetection() {\n  rectangles.forEach(rect => {\n    if (isRectangleCollision(playerRect, rect)) {\n      gameOver();\n    }\n  });\n} //Get the blue rectangle to start moving\n\n\nfunction moveRectangle() {\n  rectangles.forEach(rect => {\n    rect.x += rect.dx;\n    rect.y += rect.dy;\n  });\n} //Detect whether rectangles hit edge of canvas\n\n\nfunction borderRectangleCollisionDetection() {\n  rectangles.forEach(rect => {\n    if (rect.x + rect.width > canvas.width || rect.x < 0) {\n      rect.dx *= -1;\n    }\n\n    if (rect.y + rect.height > canvas.height || rect.y < 0) {\n      rect.dy *= -1;\n    }\n  });\n} //Speed up game\n\n\nlet numberOfSpeed = 0;\n\nfunction configureRectSpeed() {\n  const speedUpGame = setInterval(() => {\n    numberOfSpeed++;\n    rectangles.forEach(rect => {\n      rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n      rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n    });\n\n    if (numberOfSpeed === 4) {\n      clearInterval(speedUpGame);\n    }\n  }, 10000);\n}\n\nfunction update() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  drawBorder();\n  drawRect();\n\n  if (hasGameStarted) {\n    //Get the blue rectangle to start moving\n    moveRectangle();\n  } //Detect whether rectangles hit edge of canvas\n\n\n  borderRectangleCollisionDetection(); //Detect whether player makes contact with border\n\n  playerCollisionDetection(); //Detect whether player makes contact with rectangle\n\n  rectangleCollisionDetection();\n  requestAnimationFrame(update);\n} //Call update method on initial document load\n\n\nupdate(); //Returns true if mouse is in player rectangle\n\nfunction isCursorInRect(x, y, rect) {\n  return x > rect.x && x < rect.x + rect.width && y > rect.y && y < rect.y + rect.height;\n}\n\ncanvas.addEventListener(\"mousedown\", e => {\n  //Get X & Y coordinates in relation to canvas\n  const pos = {\n    x: e.clientX - canvas.offsetLeft,\n    y: e.clientY - canvas.offsetTop\n  }; //See if they clicked on the red square in particular\n\n  if (isCursorInRect(pos.x, pos.y, playerRect)) {\n    //Start timer\n    if (!hasGameStarted) {\n      startDate = new Date();\n      configureRectSpeed();\n    }\n\n    hasGameStarted = true;\n    controlPlayer = true;\n  }\n});\ncanvas.addEventListener(\"mousemove\", e => {\n  if (controlPlayer && !hasGameOver) {\n    //Get X & Y coordinates in relation to canvas\n    const pos = {\n      x: e.clientX - canvas.offsetLeft,\n      y: e.clientY - canvas.offsetTop\n    };\n    playerRect.x = pos.x - 25;\n    playerRect.y = pos.y - 25;\n  }\n});\ncanvas.addEventListener(\"mouseup\", () => {\n  controlPlayer = false;\n});","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/jet.js"],"names":["canvas","document","getElementById","ctx","getContext","controlPlayer","hasGameStarted","hasGameOver","startDate","millisecondsToMinutes","millis","minutes","Math","floor","seconds","toFixed","gameOver","endDate","Date","timeDiff","alert","minutesSurvived","drawBorder","fillStyle","fillRect","width","height","clearRect","playerRect","x","y","rectangles","dx","dy","color","drawRect","forEach","rect","playerCollisionDetection","isRectangleCollision","rect1","rect2","rectangleCollisionDetection","moveRectangle","borderRectangleCollisionDetection","numberOfSpeed","configureRectSpeed","speedUpGame","setInterval","clearInterval","update","requestAnimationFrame","isCursorInRect","addEventListener","e","pos","clientX","offsetLeft","clientY","offsetTop"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,QAAQ,CAACC,cAAT,CAAwB,QAAxB,CAAf;AACA,MAAMC,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAZ,C,CACA;;AACA,IAAIC,aAAa,GAAG,KAApB;AACA,IAAIC,cAAc,GAAG,KAArB,C,CACA;;AACA,IAAIC,WAAW,GAAG,KAAlB;AACA,IAAIC,SAAS,GAAG,IAAhB;;AACA,SAASC,qBAAT,CAA+BC,MAA/B,EAAsC;AAClC,MAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWH,MAAM,GAAG,KAApB,CAAd;AACA,MAAII,OAAO,GAAG,CAAEJ,MAAM,GAAG,KAAV,GAAmB,IAApB,EAA0BK,OAA1B,CAAkC,CAAlC,CAAd;AACA,SAAOJ,OAAO,GAAG,GAAV,IAAiBG,OAAO,GAAG,EAAV,GAAe,GAAf,GAAqB,EAAtC,IAA4CA,OAAnD;AACH;;AAED,SAASE,QAAT,GAAoB;AAChB,MAAG,CAACT,WAAJ,EAAgB;AACZ,QAAIU,OAAO,GAAG,IAAIC,IAAJ,EAAd;AACA,QAAIC,QAAQ,GAAGF,OAAO,GAAGT,SAAzB;;AACA,QAAGW,QAAQ,GAAG,KAAd,EAAoB;AAChBC,MAAAA,KAAK,CAAE,gBAAeD,QAAQ,GAAG,IAAK,WAAjC,CAAL;AACH,KAFD,MAEK;AACD,UAAIE,eAAe,GAAGZ,qBAAqB,CAACU,QAAD,CAA3C;AACAC,MAAAA,KAAK,CAAE,gBAAeC,eAAgB,gBAAjC,CAAL;AACH;;AAEDd,IAAAA,WAAW,GAAG,IAAd;AACH;AACJ,C,CAED;;;AACA,SAASe,UAAT,GAAsB;AAClBnB,EAAAA,GAAG,CAACoB,SAAJ,GAAgB,OAAhB;AACApB,EAAAA,GAAG,CAACqB,QAAJ,CAAa,CAAb,EAAe,CAAf,EAAiBxB,MAAM,CAACyB,KAAxB,EAA8BzB,MAAM,CAAC0B,MAArC;AACAvB,EAAAA,GAAG,CAACwB,SAAJ,CAAc,EAAd,EAAiB,EAAjB,EAAoB,GAApB,EAAwB,GAAxB;AACH;;AAED,IAAIC,UAAU,GAAG;AACbC,EAAAA,CAAC,EAAE,GADU;AAEbC,EAAAA,CAAC,EAAE,GAFU;AAGbL,EAAAA,KAAK,EAAE,EAHM;AAIbC,EAAAA,MAAM,EAAE;AAJK,CAAjB,C,CAMA;;AACA,IAAIK,UAAU,GAAG,CACb;AACIF,EAAAA,CAAC,EAAE,EADP;AAEIC,EAAAA,CAAC,EAAE,EAFP;AAGIE,EAAAA,EAAE,EAAE,CAHR;AAIIC,EAAAA,EAAE,EAAE,CAJR;AAKIR,EAAAA,KAAK,EAAE,EALX;AAMIC,EAAAA,MAAM,EAAE,EANZ;AAOIQ,EAAAA,KAAK,EAAE;AAPX,CADa,EAUb;AACIL,EAAAA,CAAC,EAAE,GADP;AAEIC,EAAAA,CAAC,EAAE,EAFP;AAGIE,EAAAA,EAAE,EAAE,CAAC,CAHT;AAIIC,EAAAA,EAAE,EAAE,GAJR;AAKIR,EAAAA,KAAK,EAAE,EALX;AAMIC,EAAAA,MAAM,EAAE,EANZ;AAOIQ,EAAAA,KAAK,EAAE;AAPX,CAVa,EAmBb;AACIL,EAAAA,CAAC,EAAE,EADP;AAEIC,EAAAA,CAAC,EAAE,GAFP;AAGIE,EAAAA,EAAE,EAAE,CAHR;AAIIC,EAAAA,EAAE,EAAE,CAAC,CAJT;AAKIR,EAAAA,KAAK,EAAE,EALX;AAMIC,EAAAA,MAAM,EAAE,EANZ;AAOIQ,EAAAA,KAAK,EAAE;AAPX,CAnBa,EA4Bb;AACIL,EAAAA,CAAC,EAAE,GADP;AAEIC,EAAAA,CAAC,EAAE,GAFP;AAGIE,EAAAA,EAAE,EAAE,CAAC,CAHT;AAIIC,EAAAA,EAAE,EAAE,CAAC,CAJT;AAKIR,EAAAA,KAAK,EAAE,GALX;AAMIC,EAAAA,MAAM,EAAE,EANZ;AAOIQ,EAAAA,KAAK,EAAE;AAPX,CA5Ba,CAAjB,C,CAuCA;;AACA,SAASC,QAAT,GAAoB;AAChB;AACAhC,EAAAA,GAAG,CAACoB,SAAJ,GAAgB,SAAhB;AACApB,EAAAA,GAAG,CAACqB,QAAJ,CAAaI,UAAU,CAACC,CAAxB,EAA0BD,UAAU,CAACE,CAArC,EAAuCF,UAAU,CAACH,KAAlD,EAAwDG,UAAU,CAACF,MAAnE;AACAK,EAAAA,UAAU,CAACK,OAAX,CAAmBC,IAAI,IAAI;AACvBlC,IAAAA,GAAG,CAACoB,SAAJ,GAAgBc,IAAI,CAACH,KAArB;AACA/B,IAAAA,GAAG,CAACqB,QAAJ,CAAaa,IAAI,CAACR,CAAlB,EAAoBQ,IAAI,CAACP,CAAzB,EAA2BO,IAAI,CAACZ,KAAhC,EAAsCY,IAAI,CAACX,MAA3C;AACH,GAHD;AAIH,C,CAED;;;AACA,SAASY,wBAAT,GAAoC;AAChC,MACIV,UAAU,CAACC,CAAX,GAAeD,UAAU,CAACH,KAA1B,GAAkC,GAAlC,IACAG,UAAU,CAACC,CAAX,GAAe,EADf,IAEAD,UAAU,CAACE,CAAX,GAAeF,UAAU,CAACF,MAA1B,GAAmC,GAFnC,IAGAE,UAAU,CAACE,CAAX,GAAe,EAJnB,EAKC;AACGd,IAAAA,QAAQ;AACX;AACJ,C,CACD;;;AACA,SAASuB,oBAAT,CAA8BC,KAA9B,EAAqCC,KAArC,EAA2C;AACvC,SAAO,EACHD,KAAK,CAACX,CAAN,GAAQY,KAAK,CAACZ,CAAN,GAAQY,KAAK,CAAChB,KAAtB,IACAe,KAAK,CAACX,CAAN,GAAQW,KAAK,CAACf,KAAd,GAAoBgB,KAAK,CAACZ,CAD1B,IAEAW,KAAK,CAACV,CAAN,GAAQW,KAAK,CAACX,CAAN,GAAQW,KAAK,CAACf,MAFtB,IAGAc,KAAK,CAACV,CAAN,GAAQU,KAAK,CAACd,MAAd,GAAqBe,KAAK,CAACX,CAJxB,CAAP;AAMH,C,CAED;;;AACA,SAASY,2BAAT,GAAuC;AACnCX,EAAAA,UAAU,CAACK,OAAX,CAAmBC,IAAI,IAAI;AACvB,QAAGE,oBAAoB,CAACX,UAAD,EAAaS,IAAb,CAAvB,EAA0C;AACtCrB,MAAAA,QAAQ;AACX;AACJ,GAJD;AAKH,C,CAED;;;AACA,SAAS2B,aAAT,GAAyB;AACrBZ,EAAAA,UAAU,CAACK,OAAX,CAAmBC,IAAI,IAAI;AACvBA,IAAAA,IAAI,CAACR,CAAL,IAAUQ,IAAI,CAACL,EAAf;AACAK,IAAAA,IAAI,CAACP,CAAL,IAAUO,IAAI,CAACJ,EAAf;AACH,GAHD;AAIH,C,CAED;;;AACA,SAASW,iCAAT,GAA6C;AACzCb,EAAAA,UAAU,CAACK,OAAX,CAAmBC,IAAI,IAAI;AACvB,QAAGA,IAAI,CAACR,CAAL,GAASQ,IAAI,CAACZ,KAAd,GAAsBzB,MAAM,CAACyB,KAA7B,IAAsCY,IAAI,CAACR,CAAL,GAAS,CAAlD,EAAoD;AAChDQ,MAAAA,IAAI,CAACL,EAAL,IAAW,CAAC,CAAZ;AACH;;AACD,QAAGK,IAAI,CAACP,CAAL,GAASO,IAAI,CAACX,MAAd,GAAuB1B,MAAM,CAAC0B,MAA9B,IAAwCW,IAAI,CAACP,CAAL,GAAS,CAApD,EAAsD;AAClDO,MAAAA,IAAI,CAACJ,EAAL,IAAW,CAAC,CAAZ;AACH;AACJ,GAPD;AAQH,C,CAED;;;AACA,IAAIY,aAAa,GAAG,CAApB;;AAEA,SAASC,kBAAT,GAA8B;AAC1B,QAAMC,WAAW,GAAGC,WAAW,CAAC,MAAM;AAClCH,IAAAA,aAAa;AACbd,IAAAA,UAAU,CAACK,OAAX,CAAmBC,IAAI,IAAI;AACvBA,MAAAA,IAAI,CAACL,EAAL,IAAW,CAAX,GAAeK,IAAI,CAACL,EAAL,IAAW,CAA1B,GAA8BK,IAAI,CAACL,EAAL,IAAW,CAAzC;AACAK,MAAAA,IAAI,CAACJ,EAAL,IAAW,CAAX,GAAeI,IAAI,CAACJ,EAAL,IAAW,CAA1B,GAA8BI,IAAI,CAACJ,EAAL,IAAW,CAAzC;AACH,KAHD;;AAIA,QAAGY,aAAa,KAAK,CAArB,EAAuB;AACnBI,MAAAA,aAAa,CAACF,WAAD,CAAb;AACH;AACJ,GAT8B,EAS5B,KAT4B,CAA/B;AAUH;;AAGD,SAASG,MAAT,GAAkB;AACd/C,EAAAA,GAAG,CAACwB,SAAJ,CAAc,CAAd,EAAgB,CAAhB,EAAkB3B,MAAM,CAACyB,KAAzB,EAA+BzB,MAAM,CAAC0B,MAAtC;AACAJ,EAAAA,UAAU;AACVa,EAAAA,QAAQ;;AAER,MAAG7B,cAAH,EAAkB;AACd;AACAqC,IAAAA,aAAa;AAChB,GARa,CASd;;;AACAC,EAAAA,iCAAiC,GAVnB,CAWd;;AACAN,EAAAA,wBAAwB,GAZV,CAad;;AACAI,EAAAA,2BAA2B;AAC3BS,EAAAA,qBAAqB,CAACD,MAAD,CAArB;AACH,C,CAED;;;AACAA,MAAM,G,CAGN;;AACA,SAASE,cAAT,CAAwBvB,CAAxB,EAA0BC,CAA1B,EAA4BO,IAA5B,EAAiC;AAC7B,SAAOR,CAAC,GAACQ,IAAI,CAACR,CAAP,IAAYA,CAAC,GAACQ,IAAI,CAACR,CAAL,GAAOQ,IAAI,CAACZ,KAA1B,IAAmCK,CAAC,GAACO,IAAI,CAACP,CAA1C,IAA+CA,CAAC,GAACO,IAAI,CAACP,CAAL,GAAOO,IAAI,CAACX,MAApE;AACH;;AAED1B,MAAM,CAACqD,gBAAP,CAAwB,WAAxB,EAAqCC,CAAC,IAAI;AACtC;AACA,QAAMC,GAAG,GAAG;AACR1B,IAAAA,CAAC,EAAEyB,CAAC,CAACE,OAAF,GAAYxD,MAAM,CAACyD,UADd;AAER3B,IAAAA,CAAC,EAAEwB,CAAC,CAACI,OAAF,GAAY1D,MAAM,CAAC2D;AAFd,GAAZ,CAFsC,CAMtC;;AACA,MAAGP,cAAc,CAACG,GAAG,CAAC1B,CAAL,EAAO0B,GAAG,CAACzB,CAAX,EAAaF,UAAb,CAAjB,EAA0C;AACtC;AACA,QAAG,CAACtB,cAAJ,EAAmB;AACfE,MAAAA,SAAS,GAAG,IAAIU,IAAJ,EAAZ;AACA4B,MAAAA,kBAAkB;AACrB;;AACDxC,IAAAA,cAAc,GAAG,IAAjB;AACAD,IAAAA,aAAa,GAAG,IAAhB;AACH;AACJ,CAhBD;AAkBAL,MAAM,CAACqD,gBAAP,CAAwB,WAAxB,EAAqCC,CAAC,IAAI;AACtC,MAAGjD,aAAa,IAAI,CAACE,WAArB,EAAiC;AACjC;AACA,UAAMgD,GAAG,GAAG;AACR1B,MAAAA,CAAC,EAAEyB,CAAC,CAACE,OAAF,GAAYxD,MAAM,CAACyD,UADd;AAER3B,MAAAA,CAAC,EAAEwB,CAAC,CAACI,OAAF,GAAY1D,MAAM,CAAC2D;AAFd,KAAZ;AAIA/B,IAAAA,UAAU,CAACC,CAAX,GAAe0B,GAAG,CAAC1B,CAAJ,GAAQ,EAAvB;AACAD,IAAAA,UAAU,CAACE,CAAX,GAAeyB,GAAG,CAACzB,CAAJ,GAAQ,EAAvB;AACC;AACJ,CAVD;AAYA9B,MAAM,CAACqD,gBAAP,CAAwB,SAAxB,EAAmC,MAAM;AACrChD,EAAAA,aAAa,GAAG,KAAhB;AACH,CAFD","sourcesContent":["const canvas = document.getElementById(\"canvas\");\nconst ctx = canvas.getContext(\"2d\");\n//Game variables\nlet controlPlayer = false;\nlet hasGameStarted = false;\n//Just to prevent game from working while page reloads\nlet hasGameOver = false;\nlet startDate = null;\nfunction millisecondsToMinutes(millis){\n    let minutes = Math.floor(millis / 60000);\n    let seconds = ((millis % 60000) / 1000).toFixed(0);\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n}\n\nfunction gameOver() {\n    if(!hasGameOver){\n        let endDate = new Date();\n        let timeDiff = endDate - startDate;\n        if(timeDiff < 60000){\n            alert(`You survived ${timeDiff / 1000} seconds!`);\n        }else{\n            let minutesSurvived = millisecondsToMinutes(timeDiff);\n            alert(`You survived ${minutesSurvived} minutes. WOW!`);\n        }\n\n        hasGameOver = true;\n    }\n}\n\n//Canvas Black Border\nfunction drawBorder() {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0,0,canvas.width,canvas.height);\n    ctx.clearRect(50,50,500,500);\n}\n\nlet playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n}\n//Game Elements\nlet rectangles = [\n    {\n        x: 75,\n        y: 75,\n        dx: 5,\n        dy: 4,\n        width: 75,\n        height: 75,\n        color: \"#000099\"\n    },\n    {\n        x: 400,\n        y: 75,\n        dx: -5,\n        dy: 5.5,\n        width: 80,\n        height: 60,\n        color: \"#000099\"\n    },\n    {\n        x: 75,\n        y: 445,\n        dx: 5,\n        dy: -5,\n        width: 40,\n        height: 80,\n        color: \"#000099\"\n    },\n    {\n        x: 420,\n        y: 450,\n        dx: -5,\n        dy: -5,\n        width: 130,\n        height: 25,\n        color: \"#000099\"\n    }\n]\n\n//Render rectangles to canvas.\nfunction drawRect() {\n    //Draw playerRect first\n    ctx.fillStyle = \"#990000\";\n    ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n    rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n    })\n}\n\n//Detect whether player makes contact with border\nfunction playerCollisionDetection() {\n    if(\n        playerRect.x + playerRect.width > 550 ||\n        playerRect.x < 50 ||\n        playerRect.y + playerRect.height > 550 ||\n        playerRect.y < 50\n    ){\n        gameOver();\n    }\n}\n//Returns true if 2 rectangles are colliding\nfunction isRectangleCollision(rect1, rect2){\n    return !(\n        rect1.x>rect2.x+rect2.width ||\n        rect1.x+rect1.width<rect2.x ||\n        rect1.y>rect2.y+rect2.height ||\n        rect1.y+rect1.height<rect2.y\n    );\n}\n\n//Detect whether player makes contact with rectangle\nfunction rectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n        if(isRectangleCollision(playerRect, rect)){\n            gameOver();\n        }\n    })\n}\n\n//Get the blue rectangle to start moving\nfunction moveRectangle() {\n    rectangles.forEach(rect => {\n        rect.x += rect.dx;\n        rect.y += rect.dy;\n    })\n}\n\n//Detect whether rectangles hit edge of canvas\nfunction borderRectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n        if(rect.x + rect.width > canvas.width || rect.x < 0){\n            rect.dx *= -1;\n        }\n        if(rect.y + rect.height > canvas.height || rect.y < 0){\n            rect.dy *= -1;\n        }\n    })\n}\n\n//Speed up game\nlet numberOfSpeed = 0;\n\nfunction configureRectSpeed() {\n    const speedUpGame = setInterval(() => {\n        numberOfSpeed++;\n        rectangles.forEach(rect => {\n            rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n            rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n        });\n        if(numberOfSpeed === 4){\n            clearInterval(speedUpGame);\n        }\n    }, 10000)\n}\n\n\nfunction update() {\n    ctx.clearRect(0,0,canvas.width,canvas.height);\n    drawBorder();\n    drawRect();\n\n    if(hasGameStarted){\n        //Get the blue rectangle to start moving\n        moveRectangle();\n    }\n    //Detect whether rectangles hit edge of canvas\n    borderRectangleCollisionDetection();\n    //Detect whether player makes contact with border\n    playerCollisionDetection();\n    //Detect whether player makes contact with rectangle\n    rectangleCollisionDetection();\n    requestAnimationFrame(update);\n}\n\n//Call update method on initial document load\nupdate();\n\n\n//Returns true if mouse is in player rectangle\nfunction isCursorInRect(x,y,rect){\n    return(x>rect.x && x<rect.x+rect.width && y>rect.y && y<rect.y+rect.height);\n}\n\ncanvas.addEventListener(\"mousedown\", e => {\n    //Get X & Y coordinates in relation to canvas\n    const pos = {\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop\n    }\n    //See if they clicked on the red square in particular\n    if(isCursorInRect(pos.x,pos.y,playerRect)){\n        //Start timer\n        if(!hasGameStarted){\n            startDate = new Date();\n            configureRectSpeed();\n        }\n        hasGameStarted = true;\n        controlPlayer = true;\n    }\n})\n\ncanvas.addEventListener(\"mousemove\", e => {\n    if(controlPlayer && !hasGameOver){\n    //Get X & Y coordinates in relation to canvas\n    const pos = {\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop\n    };\n    playerRect.x = pos.x - 25;\n    playerRect.y = pos.y - 25;\n    }\n})\n\ncanvas.addEventListener(\"mouseup\", () => {\n    controlPlayer = false;\n})\n"]},"metadata":{},"sourceType":"module"}