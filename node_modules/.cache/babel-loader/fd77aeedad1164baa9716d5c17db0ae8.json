{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect, useCallback } from \"react\"; // import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\n\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound'; //\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\n\nimport './style.css';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactAudioPlayer from 'react-audio-player'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FighterScreen = props => {\n  _s();\n\n  var [controlPlayer, setControlPlayer] = useState(false);\n  var [hasGameStarted, setHasGameStarted] = useState(false);\n  var [hasGameOver, setHasGameOver] = useState(true);\n  var [canvas, setCanvas] = useState(false);\n  var [ctx, setCtx] = useState(false); // Prevent game from working whilst page reloads\n\n  let startDate = null;\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n  }; // Game Elements\n\n  let rectangles = [{\n    x: 75,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  }, {\n    x: 400,\n    y: 75,\n    dx: -5,\n    dy: 5.5,\n    width: 80,\n    height: 60,\n    color: \"#000099\"\n  }, {\n    x: 75,\n    y: 445,\n    dx: 5,\n    dy: -5,\n    width: 40,\n    height: 80,\n    color: \"#000099\"\n  }, {\n    x: 420,\n    y: 450,\n    dx: -5,\n    dy: -5,\n    width: 130,\n    height: 25,\n    color: \"#000099\"\n  }];\n  useEffect(() => {\n    const canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext(\"2d\"); // Global Varabales\n\n    function update() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawBoarder();\n      drawRect();\n\n      if (hasGameStarted) {\n        moveRectangle();\n      }\n\n      playerCollisionDetection();\n      rectangleCollisionDetection();\n      boarderRectangleDetection();\n      requestAnimationFrame(update);\n    } // call update methord on initial document load\n\n\n    update(); // Canvas black boarder\n\n    function drawBoarder() {\n      ctx.fillStyle = \"black\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.clearRect(50, 50, 500, 500);\n    }\n\n    function millisecondsToMiutes(millis) {\n      let minutes = Math.floor(millis / 60000);\n      let seconds = Math.floor(millis % 60000 / 1000);\n      return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    } // Render rectangles to canvas\n\n\n    function drawRect() {\n      // Draw player rect first\n      ctx.fillStyle = \"#901234\";\n      ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n      rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n      });\n    } // collision\n\n\n    function playerCollisionDetection() {\n      if (playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50) {\n        gameOver();\n      }\n    }\n\n    function isRectangleCollision(rect1, rect2) {\n      return !(rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y);\n    }\n\n    function rectangleCollisionDetection() {\n      rectangles.forEach(rect => {\n        if (isRectangleCollision(playerRect, rect)) {\n          gameOver();\n        }\n      });\n    }\n\n    function moveRectangle() {\n      rectangles.forEach(rect => {\n        rect.x += rect.dx;\n        rect.y += rect.dy;\n      });\n    }\n\n    function boarderRectangleDetection() {\n      rectangles.forEach(rect => {\n        if (rect.x + rect.width > canvas.width || rect.x < 0) {\n          rect.dx *= -1;\n        }\n\n        if (rect.y + rect.height > canvas.height || rect.y < 0) {\n          rect.dy *= -1;\n        }\n      });\n    }\n\n    let numberOfSpeed = 0;\n\n    function configureRectSpeed() {\n      const speedUpGame = setInterval(() => {\n        numberOfSpeed++;\n        rectangles.forEach(rect => {\n          rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n          rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n        });\n\n        if (numberOfSpeed === 4) {\n          clearInterval(speedUpGame);\n        }\n      }, 10000);\n    } // Returns true if collision\n\n\n    function isCursorInRect(x, y, rect) {\n      return x > rect.x && x < rect.x + rect.width;\n    }\n\n    canvas.addEventListener('mousedown', on_canvas_down, false);\n\n    function on_canvas_down(ev) {\n      console.log(controlPlayer, \"xxxxxxxxx////////\");\n      console.log(!hasGameOver, \"xxxxxxxxx////////\"); // get x & y coordinates in relation to the canvas\n\n      var x = ev.clientX - this.offsetLeft;\n      var y = ev.clientY - this.offsetTop;\n      console.log(x, \"xxxxxxxxx////////\");\n      console.log(y, \"xxxxxxxxx////////\"); // See if they clicked on red square\n\n      if (isCursorInRect(x, y, playerRect)) {\n        //\n        if (!hasGameStarted) {\n          startDate = new Date();\n          configureRectSpeed();\n        }\n\n        setControlPlayer(true);\n        setHasGameStarted(true);\n      }\n    }\n\n    canvas.addEventListener('mousemove', on_canvas_move, false);\n\n    function on_canvas_move(ev) {\n      if (controlPlayer && !hasGameOver) {\n        // get x & y coordinates in relation to the canvas\n        var x = ev.clientX - this.offsetLeft;\n        var y = ev.clientY - this.offsetTop;\n        playerRect.x = x - 25;\n        playerRect.y = y - 25;\n      }\n\n      console.log(x, \"xxxxxxxxxx\");\n    }\n\n    canvas.addEventListener('mouseup', on_canvas_up, false);\n\n    function on_canvas_up(ev) {\n      setControlPlayer(false);\n    }\n  }, [controlPlayer,, hasGameStarted, hasGameOver, canvas, ctx]);\n\n  function gameOver() {\n    if (!hasGameOver) {\n      let endDate = new Date();\n      let timeDiff = endDate - startDate;\n\n      if (timeDiff < 60000) {\n        alert('You survived ' + timeDiff / 1000 + \" seconds!\");\n      } else {\n        // let minutesSurvived = millisecondsToMiutes(timeDiff);\n        alert('You survived ${minutesSurvived} WOW!');\n      }\n\n      setHasGameOver(true);\n    }\n  } //     const timer = window.setInterval( async() => {\n  // }, 1000);\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"center\", {\n      children: [\"Fighter Pilot\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"600\",\n        height: \"600\",\n        id: \"canvas\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FighterScreen, \"ErIsbLrQRaM4rzQNuE6h5nP/wsY=\");\n\n_c = FighterScreen;\nexport default FighterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FighterScreen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js"],"names":["useState","useRef","useEffect","useCallback","Button","Container","Nav","Navbar","NavDropdown","useSound","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactAudioPlayer","FighterScreen","props","controlPlayer","setControlPlayer","hasGameStarted","setHasGameStarted","hasGameOver","setHasGameOver","canvas","setCanvas","ctx","setCtx","startDate","playerRect","x","y","width","height","rectangles","dx","dy","color","document","getElementById","getContext","update","clearRect","drawBoarder","drawRect","moveRectangle","playerCollisionDetection","rectangleCollisionDetection","boarderRectangleDetection","requestAnimationFrame","fillStyle","fillRect","millisecondsToMiutes","millis","minutes","Math","floor","seconds","forEach","rect","gameOver","isRectangleCollision","rect1","rect2","numberOfSpeed","configureRectSpeed","speedUpGame","setInterval","clearInterval","isCursorInRect","addEventListener","on_canvas_down","ev","console","log","clientX","offsetLeft","clientY","offsetTop","Date","on_canvas_move","on_canvas_up","endDate","timeDiff","alert"],"mappings":"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","sourcesContent":["\nimport { useState, useRef, useEffect, useCallback } from \"react\";\n\n// import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\nimport { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound';\n//\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\nimport './style.css';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n// Hook\n\n\n\n\nconst FighterScreen = (props) =>{\n\n\n  var [controlPlayer, setControlPlayer]= useState(false)\n  var [hasGameStarted, setHasGameStarted]= useState(false)\n  var [hasGameOver, setHasGameOver]= useState(true)\n  var [canvas, setCanvas]= useState(false)\n  var [ctx, setCtx]= useState(false)\n\n  // Prevent game from working whilst page reloads\n  let startDate = null;\n\n  let playerRect = {\n    x:275,\n    y:275,\n    width:50,\n    height:50,\n  }\n\n  // Game Elements\n  let rectangles = [\n    {\n      x:75,\n      y:75,\n      dx:5,\n      dy:4,\n      width:75,\n      height:75,\n      color:\"#000099\",\n    },\n    {\n      x:400,\n      y:75,\n      dx:-5,\n      dy:5.5,\n      width:80,\n      height:60,\n      color:\"#000099\",\n    },\n    {\n      x:75,\n      y:445,\n      dx:5,\n      dy:-5,\n      width:40,\n      height:80,\n      color:\"#000099\",\n    },\n    {\n      x:420,\n      y:450,\n      dx:-5,\n      dy:-5,\n      width:130,\n      height:25,\n      color:\"#000099\",\n    },\n  ]\n\n\n\n\n\n  useEffect(() => {\n\n\n\n      const canvas = document.getElementById(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n\n      // Global Varabales\n\n      function update(){\n        ctx.clearRect(0,0,canvas.width,canvas.height);\n\n        drawBoarder();\n        drawRect();\n\n        if (hasGameStarted){\n          moveRectangle();\n        }\n\n        playerCollisionDetection();\n        rectangleCollisionDetection();\n        boarderRectangleDetection();\n        requestAnimationFrame(update);\n      }\n\n      // call update methord on initial document load\n      update();\n\n\n      // Canvas black boarder\n\n      function drawBoarder(){\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(0,0,canvas.width,canvas.height);\n        ctx.clearRect(50,50,500,500);\n      }\n\n\n      function millisecondsToMiutes(millis){\n        let minutes = Math.floor(millis/60000);\n        let seconds = Math.floor((millis % 60000)/1000);\n        return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n\n      }\n\n\n      // Render rectangles to canvas\n\n      function drawRect(){\n        // Draw player rect first\n        ctx.fillStyle = \"#901234\";\n        ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n\n        rectangles.forEach(rect => {\n          ctx.fillStyle = rect.color;\n          ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n        });\n\n      }\n\n      // collision\n      function playerCollisionDetection(){\n        if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n        ){\n          gameOver();\n        }\n      }\n\n      function isRectangleCollision(rect1,rect2){\n        return !(\n          rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n        );\n      }\n\n      function rectangleCollisionDetection(){\n        rectangles.forEach(rect =>{\n          if(isRectangleCollision(playerRect,rect)){\n            gameOver();\n          }\n        })\n      }\n\n      function moveRectangle(){\n        rectangles.forEach(rect => {\n          rect.x += rect.dx;\n          rect.y += rect.dy;\n        })\n      }\n\n      function boarderRectangleDetection(){\n        rectangles.forEach(rect=>{\n          if(rect.x + rect.width > canvas.width || rect.x < 0){\n            rect.dx *= -1;\n          }\n          if(rect.y + rect.height > canvas.height || rect.y < 0){\n            rect.dy *= -1;\n          }\n        })\n      }\n\n      let numberOfSpeed = 0;\n\n      function configureRectSpeed(){\n        const speedUpGame = setInterval(()=>{\n          numberOfSpeed++;\n          rectangles.forEach(rect =>{\n            rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n            rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n\n          });\n          if(numberOfSpeed === 4){\n            clearInterval(speedUpGame);\n          }\n        },10000)\n      }\n\n\n\n\n      // Returns true if collision\n      function isCursorInRect(x,y,rect){\n        return((x > rect.x) && (x < rect.x + rect.width));\n      }\n\n\n\n\n\n      canvas.addEventListener('mousedown', on_canvas_down, false);\n\n      function on_canvas_down(ev) {\n\n\n        console.log(controlPlayer,\"xxxxxxxxx////////\")\n        console.log(!hasGameOver,\"xxxxxxxxx////////\")\n\n          // get x & y coordinates in relation to the canvas\n\n          var x = ev.clientX - this.offsetLeft;\n          var y = ev.clientY - this.offsetTop;\n\n\n\n          console.log(x,\"xxxxxxxxx////////\")\n          console.log(y,\"xxxxxxxxx////////\")\n\n\n          // See if they clicked on red square\n          if(isCursorInRect(x,y,playerRect)){\n            //\n            if(!hasGameStarted){\n              startDate = new Date();\n              configureRectSpeed();\n            }\n            setControlPlayer(true);\n            setHasGameStarted(true);\n\n          }\n\n      }\n\n\n\n\n\n\n\n\n      canvas.addEventListener('mousemove', on_canvas_move, false);\n\n\n        function on_canvas_move(ev) {\n\n          if(controlPlayer && !hasGameOver){\n            // get x & y coordinates in relation to the canvas\n\n            var x = ev.clientX - this.offsetLeft;\n            var y = ev.clientY - this.offsetTop;\n\n            playerRect.x = x - 25;\n            playerRect.y = y - 25;\n          }\n          console.log(x,\"xxxxxxxxxx\")\n      }\n\n\n\n\n\n\n\n      canvas.addEventListener('mouseup', on_canvas_up, false);\n      function on_canvas_up(ev) {\n\n        setControlPlayer(false);\n      }\n\n\n\n    }, [controlPlayer,,hasGameStarted,hasGameOver,canvas,ctx]);\n\n\n\n    function gameOver(){\n      if(!hasGameOver){\n        let endDate = new Date();\n        let timeDiff = endDate - startDate;\n        if (timeDiff < 60000){\n          alert('You survived '+ timeDiff/1000 +\" seconds!\");\n        }else{\n          // let minutesSurvived = millisecondsToMiutes(timeDiff);\n          alert('You survived ${minutesSurvived} WOW!');\n\n        }\n        setHasGameOver(true);\n      }\n    }\n\n//     const timer = window.setInterval( async() => {\n// }, 1000);\n\n\n\n\n  return (\n    <div>\n\n<center>\nFighter Pilot<br/>\n<canvas width=\"600\" height=\"600\" id=\"canvas\"> </canvas>\n\n</center>\n<br/>\n    </div>\n  );\n}\n\nexport default FighterScreen;\n"]},"metadata":{},"sourceType":"module"}