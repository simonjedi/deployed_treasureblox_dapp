{"ast":null,"code":"import Web3 from \"web3\";\nimport Connection from \"./Connection\";\n\nconst getWeb3 = () => new Promise((resolve, reject) => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  window.addEventListener(\"load\", async () => {\n    // Modern dapp browsers...\n    if (window.ethereum) {\n      const Moralis = require('moralis'); // ES6 Minimized\n\n\n      const web3 = await Moralis.enableWeb3({\n        provider: \"walletconnect\"\n      }); // const users = new Web3(window.ethereum);\n      // Add a network\n      // const chainId = 43114;\n      // const chainName = \"Avalanche Mainnet\";\n      // const currencyName = \"AVAX\";\n      // const currencySymbol = \"AVAX\";\n      // const rpcUrl = \"https://api.avax.network/ext/bc/C/rpc\";\n      // const blockExplorerUrl = \"https://cchain.explorer.avax.network/\";\n      // await Moralis.addNetwork(\n      //   chainId,\n      //   chainName,\n      //   currencyName,\n      //   currencySymbol,\n      //   rpcUrl,\n      //   blockExplorerUrl\n      // );\n      // const chainId = \"0x1\"; //Ethereum Mainnet\n\n      const chainId = \"0x38\"; //Meter Mainnet\n      // const chainId = \"0x52\"; //Meter Mainnet\n\n      const chainIdHex = await Moralis.switchNetwork(chainId);\n\n      try {\n        // Request account access if needed\n        await window.ethereum.enable(); // Accounts now exposed\n\n        resolve(web3); // Network switcher\n        // const chainId = \"0x1\"; //Ethereum Mainnet\n\n        const chainId = \"0x38\"; //Meter Mainnet\n        // const chainId = \"0x52\"; //Meter Mainnet\n\n        const chainIdHex = await Moralis.switchNetwork(chainId);\n      } catch (error) {\n        reject(error);\n      }\n    } // Legacy dapp browsers...\n    else if (window.web3) {\n      // Use Mist/MetaMask's provider.\n      const web3 = window.web3;\n      console.log(\"Injected web3 detected.\");\n      resolve(web3); // const chainId = \"0x1\"; //Ethereum Mainnet\n\n      const chainId = \"0x38\"; //Meter Mainnet\n      // const chainId = \"0x52\"; //Meter Mainnet\n\n      const chainIdHex = await Moralis.switchNetwork(chainId);\n    } // Fallback to localhost; use dev console port by default...\n    else {\n      // const provider = new Web3.providers.HttpProvider('https://mainnet.meter.io:8667');\n      const provider = new Web3.providers.HttpProvider('https://data-seed-prebsc-1-s1.binance.org:8545/');\n      const web3 = new Web3(provider);\n      console.log(\"No web3 instance injected, using Local web3.\");\n      resolve(web3);\n    }\n  });\n});\n\nexport default getWeb3;","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/getWeb3.js"],"names":["Web3","Connection","getWeb3","Promise","resolve","reject","window","addEventListener","ethereum","Moralis","require","web3","enableWeb3","provider","chainId","chainIdHex","switchNetwork","enable","error","console","log","providers","HttpProvider"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAGA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,MAAMC,OAAO,GAAG,MACd,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B;AACAC,EAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,YAAY;AAC1C;AACA,QAAID,MAAM,CAACE,QAAX,EAAqB;AAEnB,YAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB,CAFmB,CAGnB;;;AACA,YAAMC,IAAI,GAAG,MAAMF,OAAO,CAACG,UAAR,CAAmB;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAnB,CAAnB,CAJmB,CAKnB;AAEA;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACR;;AACA,YAAMC,OAAO,GAAG,MAAhB,CAvBmB,CAuBK;AACxB;;AAEA,YAAMC,UAAU,GAAG,MAAMN,OAAO,CAACO,aAAR,CAAsBF,OAAtB,CAAzB;;AAKA,UAAI;AACF;AAIA,cAAMR,MAAM,CAACE,QAAP,CAAgBS,MAAhB,EAAN,CALE,CAOF;;AACAb,QAAAA,OAAO,CAACO,IAAD,CAAP,CARE,CASF;AACA;;AACA,cAAMG,OAAO,GAAG,MAAhB,CAXE,CAWsB;AACxB;;AAEA,cAAMC,UAAU,GAAG,MAAMN,OAAO,CAACO,aAAR,CAAsBF,OAAtB,CAAzB;AAID,OAlBD,CAkBE,OAAOI,KAAP,EAAc;AACdb,QAAAA,MAAM,CAACa,KAAD,CAAN;AACD;AACF,KApDD,CAqDA;AArDA,SAsDK,IAAIZ,MAAM,CAACK,IAAX,EAAiB;AACpB;AACA,YAAMA,IAAI,GAAGL,MAAM,CAACK,IAApB;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAhB,MAAAA,OAAO,CAACO,IAAD,CAAP,CAJoB,CAMpB;;AACA,YAAMG,OAAO,GAAG,MAAhB,CAPoB,CAOI;AACxB;;AAEA,YAAMC,UAAU,GAAG,MAAMN,OAAO,CAACO,aAAR,CAAsBF,OAAtB,CAAzB;AAID,KAdI,CAeL;AAfK,SAgBA;AAEH;AAEA,YAAMD,QAAQ,GAAG,IAAIb,IAAI,CAACqB,SAAL,CAAeC,YAAnB,CAAgC,iDAAhC,CAAjB;AAEA,YAAMX,IAAI,GAAG,IAAIX,IAAJ,CAASa,QAAT,CAAb;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ;AACAhB,MAAAA,OAAO,CAACO,IAAD,CAAP;AAED;AACF,GAnFD;AAoFD,CAtFD,CADF;;AA0FA,eAAeT,OAAf","sourcesContent":["import Web3 from \"web3\";\n\n\nimport Connection from \"./Connection\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n\n        const Moralis = require('moralis');\n        // ES6 Minimized\n        const web3 = await Moralis.enableWeb3({ provider: \"walletconnect\" });\n        // const users = new Web3(window.ethereum);\n\n        // Add a network\n                // const chainId = 43114;\n                // const chainName = \"Avalanche Mainnet\";\n                // const currencyName = \"AVAX\";\n                // const currencySymbol = \"AVAX\";\n                // const rpcUrl = \"https://api.avax.network/ext/bc/C/rpc\";\n                // const blockExplorerUrl = \"https://cchain.explorer.avax.network/\";\n                // await Moralis.addNetwork(\n                //   chainId,\n                //   chainName,\n                //   currencyName,\n                //   currencySymbol,\n                //   rpcUrl,\n                //   blockExplorerUrl\n                // );\n        // const chainId = \"0x1\"; //Ethereum Mainnet\n        const chainId = \"0x38\"; //Meter Mainnet\n        // const chainId = \"0x52\"; //Meter Mainnet\n\n        const chainIdHex = await Moralis.switchNetwork(chainId);\n\n\n\n\n        try {\n          // Request account access if needed\n\n\n\n          await window.ethereum.enable();\n\n          // Accounts now exposed\n          resolve(web3);\n          // Network switcher\n          // const chainId = \"0x1\"; //Ethereum Mainnet\n          const chainId = \"0x38\"; //Meter Mainnet\n          // const chainId = \"0x52\"; //Meter Mainnet\n\n          const chainIdHex = await Moralis.switchNetwork(chainId);\n\n\n\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n\n        // const chainId = \"0x1\"; //Ethereum Mainnet\n        const chainId = \"0x38\"; //Meter Mainnet\n        // const chainId = \"0x52\"; //Meter Mainnet\n\n        const chainIdHex = await Moralis.switchNetwork(chainId);\n\n\n\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n\n        // const provider = new Web3.providers.HttpProvider('https://mainnet.meter.io:8667');\n\n        const provider = new Web3.providers.HttpProvider('https://data-seed-prebsc-1-s1.binance.org:8545/');\n\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n\n      }\n    });\n  });\n\n\nexport default getWeb3;\n"]},"metadata":{},"sourceType":"module"}