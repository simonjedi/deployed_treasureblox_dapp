{"ast":null,"code":"export default function CreateBoard(row, col, mines) {\n  // Board for storing the values for each cell\n  let board = []; // Tracking the minelocation \n\n  let mineLocation = []; // Create blank board\n\n  for (let x = 0; x < row; x++) {\n    let subCol = [];\n\n    for (let y = 0; y < col; y++) {\n      subCol.push({\n        value: 0,\n        revealed: false,\n        x: x,\n        y: y,\n        flagged: false\n      });\n    }\n\n    board.push(subCol);\n  } // Randomize Bomb Placement\n\n\n  let minesCount = 0;\n\n  while (minesCount < mines) {\n    // Implementing random function\n    let x = random(0, row - 1);\n    let y = random(0, col - 1); // placing bomb at random location(x,y) on board[x][y]\n\n    if (board[x][y].value === 0) {\n      board[x][y].value = \"X\";\n      mineLocation.push([x, y]);\n      minesCount++;\n    }\n  } // Increasing the value of specific cell \n  // If the cell has mines increasing the cell value by 1.\n  // Add Numbers\n\n\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (board[i][j].value === \"X\") {\n        continue;\n      } // Top\n\n\n      if (i > 0 && board[i - 1][j].value === \"X\") {\n        board[i][j].value++;\n      } // Top Right\n\n\n      if (i > 0 && j < col - 1 && board[i - 1][j + 1].value === \"X\") {\n        board[i][j].value++;\n      } // Right\n\n\n      if (j < col - 1 && board[i][j + 1].value === \"X\") {\n        board[i][j].value++;\n      } // Botoom Right\n\n\n      if (i < row - 1 && j < col - 1 && board[i + 1][j + 1].value === \"X\") {\n        board[i][j].value++;\n      } // Bottom\n\n\n      if (i < row - 1 && board[i + 1][j].value === \"X\") {\n        board[i][j].value++;\n      } // Bottom Left\n\n\n      if (i < row - 1 && j > 0 && board[i + 1][j - 1].value === \"X\") {\n        board[i][j].value++;\n      } // LEft\n\n\n      if (j > 0 && board[i][j - 1].value === \"X\") {\n        board[i][j].value++;\n      } // Top Left\n\n\n      if (i > 0 && j > 0 && board[i - 1][j - 1].value === \"X\") {\n        board[i][j].value++;\n      }\n    }\n  }\n\n  return {\n    board,\n    mineLocation\n  };\n}\n_c = CreateBoard;\n; // Random function used for generating random value of x & y\n\nfunction random(min = 0, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateBoard\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/MineGame/utils/CreateBoard.js"],"names":["CreateBoard","row","col","mines","board","mineLocation","x","subCol","y","push","value","revealed","flagged","minesCount","random","i","j","min","max","Math","floor"],"mappings":"AAAA,eAAe,SAASA,WAAT,CAAqBC,GAArB,EAA0BC,GAA1B,EAA+BC,KAA/B,EAAqC;AAClD;AACE,MAAIC,KAAK,GAAG,EAAZ,CAFgD,CAGlD;;AACE,MAAIC,YAAY,GAAG,EAAnB,CAJgD,CAKhD;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,GAApB,EAAyBK,CAAC,EAA1B,EAA8B;AAC5B,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,GAApB,EAAyBM,CAAC,EAA1B,EAA8B;AAC5BD,MAAAA,MAAM,CAACE,IAAP,CAAY;AACVC,QAAAA,KAAK,EAAE,CADG;AAEVC,QAAAA,QAAQ,EAAE,KAFA;AAGVL,QAAAA,CAAC,EAAEA,CAHO;AAIVE,QAAAA,CAAC,EAAEA,CAJO;AAKVI,QAAAA,OAAO,EAAE;AALC,OAAZ;AAOD;;AACDR,IAAAA,KAAK,CAACK,IAAN,CAAWF,MAAX;AACD,GAnB+C,CAqBhD;;;AACA,MAAIM,UAAU,GAAG,CAAjB;;AACA,SAAOA,UAAU,GAAGV,KAApB,EAA2B;AACzB;AACA,QAAIG,CAAC,GAAGQ,MAAM,CAAC,CAAD,EAAIb,GAAG,GAAG,CAAV,CAAd;AACA,QAAIO,CAAC,GAAGM,MAAM,CAAC,CAAD,EAAIZ,GAAG,GAAG,CAAV,CAAd,CAHyB,CAKzB;;AACA,QAAIE,KAAK,CAACE,CAAD,CAAL,CAASE,CAAT,EAAYE,KAAZ,KAAsB,CAA1B,EAA6B;AAC3BN,MAAAA,KAAK,CAACE,CAAD,CAAL,CAASE,CAAT,EAAYE,KAAZ,GAAoB,GAApB;AACAL,MAAAA,YAAY,CAACI,IAAb,CAAkB,CAACH,CAAD,EAAIE,CAAJ,CAAlB;AACAK,MAAAA,UAAU;AACX;AACF,GAlC+C,CAoChD;AACA;AACA;;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,GAApB,EAAyBc,CAAC,EAA1B,EAA8B;AAC5B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,GAApB,EAAyBc,CAAC,EAA1B,EAA8B;AAC5B,UAAIZ,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYN,KAAZ,KAAsB,GAA1B,EAA+B;AAC7B;AACD,OAH2B,CAK5B;;;AACA,UAAIK,CAAC,GAAG,CAAJ,IAASX,KAAK,CAACW,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAb,EAAgBN,KAAhB,KAA0B,GAAvC,EAA4C;AAC1CN,QAAAA,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYN,KAAZ;AACD,OAR2B,CAU5B;;;AACA,UACEK,CAAC,GAAG,CAAJ,IACAC,CAAC,GAAGd,GAAG,GAAG,CADV,IAEAE,KAAK,CAACW,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAC,GAAG,CAAjB,EAAoBN,KAApB,KAA8B,GAHhC,EAIE;AACAN,QAAAA,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYN,KAAZ;AACD,OAjB2B,CAmB5B;;;AACA,UAAIM,CAAC,GAAGd,GAAG,GAAG,CAAV,IAAeE,KAAK,CAACW,CAAD,CAAL,CAASC,CAAC,GAAG,CAAb,EAAgBN,KAAhB,KAA0B,GAA7C,EAAkD;AAChDN,QAAAA,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYN,KAAZ;AACD,OAtB2B,CAwB5B;;;AACA,UACEK,CAAC,GAAGd,GAAG,GAAG,CAAV,IACAe,CAAC,GAAGd,GAAG,GAAG,CADV,IAEAE,KAAK,CAACW,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAC,GAAG,CAAjB,EAAoBN,KAApB,KAA8B,GAHhC,EAIE;AACAN,QAAAA,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYN,KAAZ;AACD,OA/B2B,CAiC5B;;;AACA,UAAIK,CAAC,GAAGd,GAAG,GAAG,CAAV,IAAeG,KAAK,CAACW,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAb,EAAgBN,KAAhB,KAA0B,GAA7C,EAAkD;AAChDN,QAAAA,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYN,KAAZ;AACD,OApC2B,CAsC5B;;;AACA,UACEK,CAAC,GAAGd,GAAG,GAAG,CAAV,IACAe,CAAC,GAAG,CADJ,IAEAZ,KAAK,CAACW,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAC,GAAG,CAAjB,EAAoBN,KAApB,KAA8B,GAHhC,EAIE;AACAN,QAAAA,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYN,KAAZ;AACD,OA7C2B,CA+C5B;;;AACA,UAAIM,CAAC,GAAG,CAAJ,IAASZ,KAAK,CAACW,CAAD,CAAL,CAASC,CAAC,GAAG,CAAb,EAAgBN,KAAhB,KAA0B,GAAvC,EAA4C;AAC1CN,QAAAA,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYN,KAAZ;AACD,OAlD2B,CAoD5B;;;AACA,UAAIK,CAAC,GAAG,CAAJ,IAASC,CAAC,GAAG,CAAb,IAAkBZ,KAAK,CAACW,CAAC,GAAG,CAAL,CAAL,CAAaC,CAAC,GAAG,CAAjB,EAAoBN,KAApB,KAA8B,GAApD,EAAyD;AACvDN,QAAAA,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,EAAYN,KAAZ;AACD;AACF;AACF;;AACD,SAAO;AAAEN,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACD;KAnGqBL,W;AAmGrB,C,CAED;;AACA,SAASc,MAAT,CAAgBG,GAAG,GAAG,CAAtB,EAAyBC,GAAzB,EAA8B;AAC5B;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACL,MAAL,MAAiBI,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD","sourcesContent":["export default function CreateBoard(row, col, mines){\n  // Board for storing the values for each cell\n    let board = [];\n  // Tracking the minelocation \n    let mineLocation = [];\n    // Create blank board\n  \n    for (let x = 0; x < row; x++) {\n      let subCol = [];\n      for (let y = 0; y < col; y++) {\n        subCol.push({\n          value: 0,\n          revealed: false,\n          x: x,\n          y: y,\n          flagged: false,\n        });\n      }\n      board.push(subCol);\n    }\n  \n    // Randomize Bomb Placement\n    let minesCount = 0;\n    while (minesCount < mines) {\n      // Implementing random function\n      let x = random(0, row - 1);\n      let y = random(0, col - 1);\n  \n      // placing bomb at random location(x,y) on board[x][y]\n      if (board[x][y].value === 0) {\n        board[x][y].value = \"X\";\n        mineLocation.push([x, y]);\n        minesCount++;\n      }\n    }\n  \n    // Increasing the value of specific cell \n    // If the cell has mines increasing the cell value by 1.\n    // Add Numbers\n    for (let i = 0; i < row; i++) {\n      for (let j = 0; j < col; j++) {\n        if (board[i][j].value === \"X\") {\n          continue;\n        }\n  \n        // Top\n        if (i > 0 && board[i - 1][j].value === \"X\") {\n          board[i][j].value++;\n        }\n  \n        // Top Right\n        if (\n          i > 0 &&\n          j < col - 1 &&\n          board[i - 1][j + 1].value === \"X\"\n        ) {\n          board[i][j].value++;\n        }\n  \n        // Right\n        if (j < col - 1 && board[i][j + 1].value === \"X\") {\n          board[i][j].value++;\n        }\n  \n        // Botoom Right\n        if (\n          i < row - 1 &&\n          j < col - 1 &&\n          board[i + 1][j + 1].value === \"X\"\n        ) {\n          board[i][j].value++;\n        }\n  \n        // Bottom\n        if (i < row - 1 && board[i + 1][j].value === \"X\") {\n          board[i][j].value++;\n        }\n  \n        // Bottom Left\n        if (\n          i < row - 1 &&\n          j > 0 &&\n          board[i + 1][j - 1].value === \"X\"\n        ) {\n          board[i][j].value++;\n        }\n  \n        // LEft\n        if (j > 0 && board[i][j - 1].value === \"X\") {\n          board[i][j].value++;\n        }\n  \n        // Top Left\n        if (i > 0 && j > 0 && board[i - 1][j - 1].value === \"X\") {\n          board[i][j].value++;\n        }\n      }\n    }\n    return { board, mineLocation };\n  };\n  \n  // Random function used for generating random value of x & y\n  function random(min = 0, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }"]},"metadata":{},"sourceType":"module"}