{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect, useCallback } from \"react\"; // import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\n\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound'; //\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\n\nimport './style.css';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactAudioPlayer from 'react-audio-player'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FighterScreen = props => {\n  _s();\n\n  useEffect(() => {\n    const canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext(\"2d\"); // Global Varabales\n\n    let controlPlayer = false;\n    let hasGameStarted = false; // Prevent game from working whilst page reloads\n\n    let hasGameOver = false;\n    let startDate = null;\n\n    function millisecondsToMiutes(millis) {\n      let minutes = Math.floor(millis / 60000);\n      let seconds = Math.floor(millis % 60000 / 1000);\n      return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    }\n\n    function gameOver() {\n      if (!hasGameOver) {\n        let endDate = new Date();\n        let timeDiff = endDate - startDate;\n\n        if (timeDiff < 60000) {\n          alert('You survived ' + timeDiff / 1000 + \" seconds!\");\n        } else {\n          let minutesSurvived = millisecondsToMiutes(timeDiff);\n          alert('You survived ${minutesSurvived} WOW!');\n        }\n\n        hasGameOver = true;\n      }\n    } // Canvas black boarder\n\n\n    function drawBoarder() {\n      ctx.fillStyle = \"black\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.clearRect(50, 50, 500, 500);\n    }\n\n    let playerRect = {\n      x: 275,\n      y: 275,\n      width: 50,\n      height: 50\n    }; // Game Elements\n\n    let rectangles = [{\n      x: 75,\n      y: 75,\n      dx: 5,\n      dy: 4,\n      width: 75,\n      height: 75,\n      color: \"#000099\"\n    }, {\n      x: 400,\n      y: 75,\n      dx: -5,\n      dy: 5.5,\n      width: 80,\n      height: 60,\n      color: \"#000099\"\n    }, {\n      x: 75,\n      y: 445,\n      dx: 5,\n      dy: -5,\n      width: 40,\n      height: 80,\n      color: \"#000099\"\n    }, {\n      x: 420,\n      y: 450,\n      dx: -5,\n      dy: -5,\n      width: 130,\n      height: 25,\n      color: \"#000099\"\n    }]; // Render rectangles to canvas\n\n    function drawRect() {\n      // Draw player rect first\n      ctx.fillStyle = \"#901234\";\n      ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n      rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n      });\n    } // collision\n\n\n    function playerCollisionDetection() {\n      if (playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50) {\n        gameOver();\n      }\n    }\n\n    function isRectangleCollision(rect1, rect2) {\n      return !(rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y);\n    }\n\n    function rectangleCollisionDetection() {\n      rectangles.forEach(rect => {\n        if (isRectangleCollision(playerRect, rect)) {\n          gameOver();\n        }\n      });\n    }\n\n    function moveRectangle() {\n      rectangles.forEach(rect => {\n        rect.x += rect.dx;\n        rect.y += rect.dy;\n      });\n    }\n\n    function boarderRectangleDetection() {\n      rectangles.forEach(rect => {\n        if (rect.x + rect.width > canvas.width || rect.x < 0) {\n          rect.dx *= -1;\n        }\n\n        if (rect.y + rect.height > canvas.height || rect.y < 0) {\n          rect.dy *= -1;\n        }\n      });\n    }\n\n    let numberOfSpeed = 0;\n\n    function configureRectSpeed() {\n      const speedUpGame = setInterval(() => {\n        numberOfSpeed++;\n        rectangles.forEach(rect => {\n          rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n          rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n        });\n\n        if (numberOfSpeed === 4) {\n          clearInterval(speedUpGame);\n        }\n      }, 10000);\n    }\n\n    function update() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawBoarder();\n      drawRect();\n\n      if (hasGameStarted) {\n        moveRectangle();\n      }\n\n      playerCollisionDetection();\n      rectangleCollisionDetection();\n      boarderRectangleDetection();\n      requestAnimationFrame(update);\n    } // call update methord on initial document load\n\n\n    update(); // Returns true if collision\n\n    function isCursorInRect(x, y, rect) {\n      return x > rect.x && x < rect.x + rect.width && y > rect.y && y < rect.y + rect.height;\n    }\n\n    canvas.addEventListener('mousedown', on_canvas_down, false);\n\n    function on_canvas_down(ev) {\n      console.log(controlPlayer, \"xxxxxxxxx////////\");\n      console.log(!hasGameOver, \"xxxxxxxxx////////\"); // get x & y coordinates in relation to the canvas\n\n      var x = ev.clientX - this.offsetLeft;\n      var y = ev.clientY - this.offsetTop; // See if they clicked on red square\n\n      if (isCursorInRect(x, y, playerRect)) {\n        //\n        if (!hasGameStarted) {\n          startDate = new Date();\n          configureRectSpeed();\n        }\n\n        hasGameStarted = true;\n        controlPlayer = true;\n      }\n\n      console.log(hasGameStarted, \"xxxxxxxxxx\");\n    } // canvas.addEventListener('mousemove', on_canvas_move, false);\n    //\n    // function on_canvas_move(ev) {\n    //     var x = ev.clientX - this.offsetLeft;\n    //     var y = ev.clientY - this.offsetTop;\n    //\n    //     console.log(x,\"xxxxxxxxxx\")\n    // }\n\n\n    canvas.addEventListener('mousemove', on_canvas_move, false);\n\n    function on_canvas_move(ev) {\n      if (controlPlayer && !hasGameOver) {\n        // get x & y coordinates in relation to the canvas\n        var x = ev.clientX - this.offsetLeft;\n        var y = ev.clientY - this.offsetTop;\n        playerRect.x = x - 25;\n        playerRect.y = y - 25;\n      }\n\n      console.log(x, \"xxxxxxxxxx\");\n    }\n\n    canvas.addEventListener(\"mouseup\", () => {\n      controlPlayer = false;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"center\", {\n      children: [\"Fighter Pilot\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"600\",\n        height: \"600\",\n        id: \"canvas\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FighterScreen, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = FighterScreen;\nexport default FighterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FighterScreen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js"],"names":["useState","useRef","useEffect","useCallback","Button","Container","Nav","Navbar","NavDropdown","useSound","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactAudioPlayer","FighterScreen","props","canvas","document","getElementById","ctx","getContext","controlPlayer","hasGameStarted","hasGameOver","startDate","millisecondsToMiutes","millis","minutes","Math","floor","seconds","gameOver","endDate","Date","timeDiff","alert","minutesSurvived","drawBoarder","fillStyle","fillRect","width","height","clearRect","playerRect","x","y","rectangles","dx","dy","color","drawRect","forEach","rect","playerCollisionDetection","isRectangleCollision","rect1","rect2","rectangleCollisionDetection","moveRectangle","boarderRectangleDetection","numberOfSpeed","configureRectSpeed","speedUpGame","setInterval","clearInterval","update","requestAnimationFrame","isCursorInRect","addEventListener","on_canvas_down","ev","console","log","clientX","offsetLeft","clientY","offsetTop","on_canvas_move"],"mappings":"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","sourcesContent":["\nimport { useState, useRef, useEffect, useCallback } from \"react\";\n\n// import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\nimport { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound';\n//\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\nimport './style.css';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n// Hook\n\n\n\n\nconst FighterScreen = (props) =>{\n\n\n\n\n  useEffect(() => {\n\n\n\n\n\n\n\n      const canvas = document.getElementById(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n\n      // Global Varabales\n\n      let controlPlayer = false;\n      let hasGameStarted = false;\n\n\n      // Prevent game from working whilst page reloads\n      let hasGameOver = false;\n      let startDate = null;\n\n      function millisecondsToMiutes(millis){\n        let minutes = Math.floor(millis/60000);\n        let seconds = Math.floor((millis % 60000)/1000);\n        return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n\n      }\n\n      function gameOver(){\n        if(!hasGameOver){\n          let endDate = new Date();\n          let timeDiff = endDate - startDate;\n          if (timeDiff < 60000){\n            alert('You survived '+ timeDiff/1000 +\" seconds!\");\n          }else{\n            let minutesSurvived = millisecondsToMiutes(timeDiff);\n            alert('You survived ${minutesSurvived} WOW!');\n\n          }\n\n          hasGameOver = true;\n        }\n      }\n\n\n      // Canvas black boarder\n\n      function drawBoarder(){\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(0,0,canvas.width,canvas.height);\n        ctx.clearRect(50,50,500,500);\n      }\n\n      let playerRect = {\n        x:275,\n        y:275,\n        width:50,\n        height:50,\n      }\n\n      // Game Elements\n      let rectangles = [\n        {\n          x:75,\n          y:75,\n          dx:5,\n          dy:4,\n          width:75,\n          height:75,\n          color:\"#000099\",\n        },\n        {\n          x:400,\n          y:75,\n          dx:-5,\n          dy:5.5,\n          width:80,\n          height:60,\n          color:\"#000099\",\n        },\n        {\n          x:75,\n          y:445,\n          dx:5,\n          dy:-5,\n          width:40,\n          height:80,\n          color:\"#000099\",\n        },\n        {\n          x:420,\n          y:450,\n          dx:-5,\n          dy:-5,\n          width:130,\n          height:25,\n          color:\"#000099\",\n        },\n      ]\n\n      // Render rectangles to canvas\n\n      function drawRect(){\n        // Draw player rect first\n        ctx.fillStyle = \"#901234\";\n        ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n\n        rectangles.forEach(rect => {\n          ctx.fillStyle = rect.color;\n          ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n        });\n\n      }\n\n      // collision\n      function playerCollisionDetection(){\n        if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n        ){\n          gameOver();\n        }\n      }\n\n      function isRectangleCollision(rect1,rect2){\n        return !(\n          rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n        );\n      }\n\n      function rectangleCollisionDetection(){\n        rectangles.forEach(rect =>{\n          if(isRectangleCollision(playerRect,rect)){\n            gameOver();\n          }\n        })\n      }\n\n      function moveRectangle(){\n        rectangles.forEach(rect => {\n          rect.x += rect.dx;\n          rect.y += rect.dy;\n        })\n      }\n\n      function boarderRectangleDetection(){\n        rectangles.forEach(rect=>{\n          if(rect.x + rect.width > canvas.width || rect.x < 0){\n            rect.dx *= -1;\n          }\n          if(rect.y + rect.height > canvas.height || rect.y < 0){\n            rect.dy *= -1;\n          }\n        })\n      }\n\n      let numberOfSpeed = 0;\n\n      function configureRectSpeed(){\n        const speedUpGame = setInterval(()=>{\n          numberOfSpeed++;\n          rectangles.forEach(rect =>{\n            rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n            rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n\n          });\n          if(numberOfSpeed === 4){\n            clearInterval(speedUpGame);\n          }\n        },10000)\n      }\n\n      function update(){\n        ctx.clearRect(0,0,canvas.width,canvas.height);\n\n        drawBoarder();\n        drawRect();\n\n        if (hasGameStarted){\n          moveRectangle();\n        }\n\n        playerCollisionDetection();\n        rectangleCollisionDetection();\n        boarderRectangleDetection();\n        requestAnimationFrame(update);\n      }\n\n      // call update methord on initial document load\n      update();\n\n\n      // Returns true if collision\n      function isCursorInRect(x,y,rect){\n        return(x > rect.x && x < rect.x+rect.width && y > rect.y && y < rect.y+rect.height);\n      }\n\n      canvas.addEventListener('mousedown', on_canvas_down, false);\n\n\n      function on_canvas_down(ev) {\n\n        console.log(controlPlayer,\"xxxxxxxxx////////\")\n        console.log(!hasGameOver,\"xxxxxxxxx////////\")\n\n\n\n          // get x & y coordinates in relation to the canvas\n\n          var x = ev.clientX - this.offsetLeft;\n          var y = ev.clientY - this.offsetTop;\n\n          // See if they clicked on red square\n          if (isCursorInRect(x,y,playerRect)){\n            //\n            if(!hasGameStarted){\n              startDate = new Date();\n              configureRectSpeed();\n            }\n            hasGameStarted = true;\n            controlPlayer = true;\n          }\n\n        console.log(hasGameStarted,\"xxxxxxxxxx\")\n      }\n\n\n\n\n\n\n      // canvas.addEventListener('mousemove', on_canvas_move, false);\n      //\n      // function on_canvas_move(ev) {\n      //     var x = ev.clientX - this.offsetLeft;\n      //     var y = ev.clientY - this.offsetTop;\n      //\n      //     console.log(x,\"xxxxxxxxxx\")\n      // }\n\n\n      canvas.addEventListener('mousemove', on_canvas_move, false);\n\n\n        function on_canvas_move(ev) {\n\n          if(controlPlayer && !hasGameOver){\n            // get x & y coordinates in relation to the canvas\n\n            var x = ev.clientX - this.offsetLeft;\n            var y = ev.clientY - this.offsetTop;\n\n            playerRect.x = x - 25;\n            playerRect.y = y - 25;\n          }\n          console.log(x,\"xxxxxxxxxx\")\n      }\n\n\n\n\n\n\n\n\n      canvas.addEventListener(\"mouseup\", () =>{\n        controlPlayer = false;\n      })\n\n\n\n\n    }, []);\n\n\n\n\n\n\n\n  return (\n    <div>\n\n<center>\nFighter Pilot<br/>\n<canvas width=\"600\" height=\"600\" id=\"canvas\"> </canvas>\n\n</center>\n<br/>\n    </div>\n  );\n}\n\nexport default FighterScreen;\n"]},"metadata":{},"sourceType":"module"}