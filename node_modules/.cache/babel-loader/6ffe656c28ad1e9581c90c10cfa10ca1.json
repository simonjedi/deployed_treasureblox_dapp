{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/treasure-blox/src/components/Structure/Timer.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Countdown from 'react-countdown';\nimport moment from 'moment';\nimport { CardColumns, CardGroup, Card, Button, Container, Nav, Navbar, NavDropdown, Row, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Card.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timer = props => {\n  _s();\n\n  var moment = require('moment'); // require\n  // Timer\n  // const currentTimestamp = Math.floor(Date.now()/1000);\n  // const currentTimestamp = Math.floor();\n  // console.log(currentTimestamp); // get current timestamp\n  // let date = new Intl.DateTimeFormat('en-US', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' }).format(currentTimestamp)\n  // console.log(currentTimestamp);\n  // let time = props.allGame1_deadline_time - currentTimestamp\n  // console.log(currentTimestamp);\n  // const time1 = currentTimestamp + 10;\n  //   function secondsSinceEpoch() {\n  //     return new Date/1000 | 0;\n  // }\n  // const set = new theTime - secondsSinceEpoch();\n  // console.log(secondsSinceEpoch(allGame1_deadline_time));\n  // var diff = moment.unix(Date/1000 | 0).from(props.allGame1_deadline_time);\n  // const time2 = 10;\n  // const time3 = 69;\n  // console.log(game1_clue)\n  // props.allGame1_deadline_time\n  // console.log(\"Deadline:\", mytime)\n  // var diff = moment.unix(props.allGame1_deadline_time).from(Date/1000 | 0);\n  // console.log(secondsSinceEpoch(diff));\n  // var eventTime = props.allGame1_deadline_time;\n  //\n  // var currentTime = Date.now();\n  //\n  // var diffTime = eventTime-currentTime;\n  // .text(duration.hours()+\":\"+duration.minutes()+\":\"+duration.seconds())\n  // console.log(props.allGame1_deadline_time);\n  // function findDayDifference(date1, date2) {\n  // \t// always round down\n  //   return Math.floor((Math.abs(date2-date1))/(1000*60*60*24*60*60));\n  // }\n  // console.log(findDayDifference(props.allGame1_deadline_time,Date.now()))\n  // console.log(diffTime);\n\n\n  let startDate = Date.now(); // Do\n\n  var endDate = props.allGame1_deadline_time;\n  var seconds = (endDate.getTime() - startDate.getTime()) / 1000;\n  const [count, setTime] = useState(seconds);\n  useEffect(() => {\n    const timer = window.setInterval(() => {\n      // console.log(findDayDifference(props.allGame1_deadline_time))s\n      // console.log(findDayDifference(props.allGame1_deadline_time,Date.now()))\n      setTime(prevTime => prevTime - 1); // <-- Change this line!\n    }, 1000);\n    return () => {\n      window.clearInterval(timer);\n    };\n    console.log('test');\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attemptPrize\",\n      children: [\"This time slot will expire in \", count, \" seconds!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Timer, \"IpAn3PUcfXGVnNj2SwEplG1lRgU=\");\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/treasure-blox/src/components/Structure/Timer.js"],"names":["React","Component","useState","useEffect","ReactDOM","Countdown","moment","CardColumns","CardGroup","Card","Button","Container","Nav","Navbar","NavDropdown","Row","Col","Timer","props","require","startDate","Date","now","endDate","allGame1_deadline_time","seconds","getTime","count","setTime","timer","window","setInterval","prevTime","clearInterval","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAGA,SAASC,WAAT,EAAqBC,SAArB,EAA+BC,IAA/B,EAAoCC,MAApC,EAA2CC,SAA3C,EAAqDC,GAArD,EAAyDC,MAAzD,EAAgEC,WAAhE,EAA4EC,GAA5E,EAAgFC,GAAhF,QAA2F,iBAA3F;AAEA,OAAO,sCAAP;AACA,OAAO,YAAP;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AAAA;;AACvB,MAAIZ,MAAM,GAAGa,OAAO,CAAC,QAAD,CAApB,CADuB,CACS;AAEhC;AACA;AACA;AAEA;AACE;AAEF;AACA;AACA;AACA;AAGF;AACA;AACA;AACA;AACA;AAGA;AAGE;AACA;AAEA;AAEF;AAEE;AACA;AACA;AACF;AACA;AACA;AACA;AACA;AAGA;AAGE;AAEA;AACA;AACA;AACA;AAEA;AACF;;;AAIE,MAAIC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAhB,CA1DuB,CA2DvB;;AACA,MAAIC,OAAO,GAAKL,KAAK,CAACM,sBAAtB;AACA,MAAIC,OAAO,GAAG,CAACF,OAAO,CAACG,OAAR,KAAoBN,SAAS,CAACM,OAAV,EAArB,IAA4C,IAA1D;AAGA,QAAM,CAACC,KAAD,EAAQC,OAAR,IAAmB1B,QAAQ,CAACuB,OAAD,CAAjC;AAGAtB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM0B,KAAK,GAAGC,MAAM,CAACC,WAAP,CAAmB,MAAM;AACrC;AACA;AAEAH,MAAAA,OAAO,CAACI,QAAQ,IAAIA,QAAQ,GAAG,CAAxB,CAAP,CAJqC,CAIF;AAEpC,KANa,EAMX,IANW,CAAd;AAOA,WAAO,MAAM;AACXF,MAAAA,MAAM,CAACG,aAAP,CAAqBJ,KAArB;AACD,KAFD;AAIFK,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AAEC,GAdQ,EAcN,EAdM,CAAT;AAuBA,sBAEE;AAAA,2BAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,mDAA6DR,KAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UAFF;AAUD,CApGD;;GAAMV,K;;KAAAA,K;AAsGN,eAAeA,KAAf","sourcesContent":["import React, { Component, useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom';\nimport Countdown from 'react-countdown';\nimport moment from 'moment';\n\n\nimport { CardColumns,CardGroup,Card,Button,Container,Nav,Navbar,NavDropdown,Row,Col } from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Card.css';\n\nconst Timer = (props) => {\n  var moment = require('moment'); // require\n\n  // Timer\n  // const currentTimestamp = Math.floor(Date.now()/1000);\n  // const currentTimestamp = Math.floor();\n\n  // console.log(currentTimestamp); // get current timestamp\n    // let date = new Intl.DateTimeFormat('en-US', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' }).format(currentTimestamp)\n\n  // console.log(currentTimestamp);\n  // let time = props.allGame1_deadline_time - currentTimestamp\n  // console.log(currentTimestamp);\n  // const time1 = currentTimestamp + 10;\n\n\n//   function secondsSinceEpoch() {\n//     return new Date/1000 | 0;\n// }\n// const set = new theTime - secondsSinceEpoch();\n// console.log(secondsSinceEpoch(allGame1_deadline_time));\n\n\n// var diff = moment.unix(Date/1000 | 0).from(props.allGame1_deadline_time);\n\n\n  // const time2 = 10;\n  // const time3 = 69;\n\n  // console.log(game1_clue)\n\n// props.allGame1_deadline_time\n\n  // console.log(\"Deadline:\", mytime)\n  // var diff = moment.unix(props.allGame1_deadline_time).from(Date/1000 | 0);\n  // console.log(secondsSinceEpoch(diff));\n// var eventTime = props.allGame1_deadline_time;\n//\n// var currentTime = Date.now();\n//\n// var diffTime = eventTime-currentTime;\n\n\n// .text(duration.hours()+\":\"+duration.minutes()+\":\"+duration.seconds())\n\n\n  // console.log(props.allGame1_deadline_time);\n\n  // function findDayDifference(date1, date2) {\n  // \t// always round down\n  //   return Math.floor((Math.abs(date2-date1))/(1000*60*60*24*60*60));\n  // }\n\n  // console.log(findDayDifference(props.allGame1_deadline_time,Date.now()))\n// console.log(diffTime);\n\n\n\n  let startDate = Date.now();\n  // Do\n  var endDate   = props.allGame1_deadline_time;\n  var seconds = (endDate.getTime() - startDate.getTime()) / 1000;\n\n\n  const [count, setTime] = useState(seconds);\n\n\n  useEffect(() => {\n    const timer = window.setInterval(() => {\n      // console.log(findDayDifference(props.allGame1_deadline_time))s\n      // console.log(findDayDifference(props.allGame1_deadline_time,Date.now()))\n\n      setTime(prevTime => prevTime - 1); // <-- Change this line!\n\n    }, 1000);\n    return () => {\n      window.clearInterval(timer);\n    };\n\n  console.log('test');\n\n  }, []);\n\n\n\n\n\n\n\n\n  return(\n\n    <div>\n\n      <div className=\"attemptPrize\">This time slot will expire in {count} seconds!</div>\n\n    </div>\n\n  );\n\n};\n\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}