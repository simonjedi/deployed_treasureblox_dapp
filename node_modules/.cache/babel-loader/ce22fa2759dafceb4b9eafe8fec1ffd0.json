{"ast":null,"code":"'use strict';\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar errors = __importStar(require(\"../errors\"));\n\nvar bytes_1 = require(\"./bytes\");\n\nvar utf8_1 = require(\"./utf8\");\n\nvar keccak256_1 = require(\"./keccak256\"); ///////////////////////////////\n\n\nvar Zeros = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nvar Partition = new RegExp(\"^((.*)\\\\.)?([^.]+)$\");\nvar UseSTD3ASCIIRules = new RegExp(\"^[a-z0-9.-]*$\");\n\nfunction namehash(name) {\n  if (typeof name !== 'string') {\n    errors.throwError('invalid address - ' + String(name), errors.INVALID_ARGUMENT, {\n      argument: 'name',\n      value: name\n    });\n  }\n\n  name = name.toLowerCase(); // Supporting the full UTF-8 space requires additional (and large)\n  // libraries, so for now we simply do not support them.\n  // It should be fairly easy in the future to support systems with\n  // String.normalize, but that is future work.\n\n  if (!name.match(UseSTD3ASCIIRules)) {\n    errors.throwError('contains invalid UseSTD3ASCIIRules characters', errors.INVALID_ARGUMENT, {\n      argument: 'name',\n      value: name\n    });\n  }\n\n  var result = Zeros;\n\n  while (name.length) {\n    var partition = name.match(Partition);\n    var label = utf8_1.toUtf8Bytes(partition[3]);\n    result = keccak256_1.keccak256(bytes_1.concat([result, keccak256_1.keccak256(label)]));\n    name = partition[2] || '';\n  }\n\n  return bytes_1.hexlify(result);\n}\n\nexports.namehash = namehash;\n\nfunction id(text) {\n  return keccak256_1.keccak256(utf8_1.toUtf8Bytes(text));\n}\n\nexports.id = id;\n\nfunction hashMessage(message) {\n  return keccak256_1.keccak256(bytes_1.concat([utf8_1.toUtf8Bytes('\\x19Ethereum Signed Message:\\n'), utf8_1.toUtf8Bytes(String(message.length)), typeof message === 'string' ? utf8_1.toUtf8Bytes(message) : message]));\n}\n\nexports.hashMessage = hashMessage;","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/node_modules/@meterio/ethers/utils/hash.js"],"names":["__importStar","mod","__esModule","result","k","Object","hasOwnProperty","call","defineProperty","exports","value","errors","require","bytes_1","utf8_1","keccak256_1","Zeros","Uint8Array","Partition","RegExp","UseSTD3ASCIIRules","namehash","name","throwError","String","INVALID_ARGUMENT","argument","toLowerCase","match","length","partition","label","toUtf8Bytes","keccak256","concat","hexlify","id","text","hashMessage","message"],"mappings":"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","sourcesContent":["'use strict';\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n    result[\"default\"] = mod;\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar errors = __importStar(require(\"../errors\"));\nvar bytes_1 = require(\"./bytes\");\nvar utf8_1 = require(\"./utf8\");\nvar keccak256_1 = require(\"./keccak256\");\n///////////////////////////////\nvar Zeros = new Uint8Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\nvar Partition = new RegExp(\"^((.*)\\\\.)?([^.]+)$\");\nvar UseSTD3ASCIIRules = new RegExp(\"^[a-z0-9.-]*$\");\nfunction namehash(name) {\n    if (typeof (name) !== 'string') {\n        errors.throwError('invalid address - ' + String(name), errors.INVALID_ARGUMENT, {\n            argument: 'name',\n            value: name\n        });\n    }\n    name = name.toLowerCase();\n    // Supporting the full UTF-8 space requires additional (and large)\n    // libraries, so for now we simply do not support them.\n    // It should be fairly easy in the future to support systems with\n    // String.normalize, but that is future work.\n    if (!name.match(UseSTD3ASCIIRules)) {\n        errors.throwError('contains invalid UseSTD3ASCIIRules characters', errors.INVALID_ARGUMENT, {\n            argument: 'name',\n            value: name\n        });\n    }\n    var result = Zeros;\n    while (name.length) {\n        var partition = name.match(Partition);\n        var label = utf8_1.toUtf8Bytes(partition[3]);\n        result = keccak256_1.keccak256(bytes_1.concat([result, keccak256_1.keccak256(label)]));\n        name = partition[2] || '';\n    }\n    return bytes_1.hexlify(result);\n}\nexports.namehash = namehash;\nfunction id(text) {\n    return keccak256_1.keccak256(utf8_1.toUtf8Bytes(text));\n}\nexports.id = id;\nfunction hashMessage(message) {\n    return keccak256_1.keccak256(bytes_1.concat([\n        utf8_1.toUtf8Bytes('\\x19Ethereum Signed Message:\\n'),\n        utf8_1.toUtf8Bytes(String(message.length)),\n        ((typeof (message) === 'string') ? utf8_1.toUtf8Bytes(message) : message)\n    ]));\n}\nexports.hashMessage = hashMessage;\n"]},"metadata":{},"sourceType":"script"}