{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst blake2b_1 = require(\"./cry/blake2b\");\n/**\n * 2048 bits Bloom filter\n */\n\n\nclass Bloom {\n  /**\n   * new bloom filter instance\n   * @param k number of hash functions\n   * @param bits leave it out to construct an empty one\n   */\n  constructor(k, bits) {\n    if (bits) {\n      this.bits = bits;\n    } else {\n      this.bits = Buffer.alloc(Bloom.BITS_LENGTH / 8);\n    }\n\n    this.k = k;\n  }\n  /** estimate k(number of hash functions) according to item count */\n\n\n  static estimateK(itemCount) {\n    const k = Math.round(this.BITS_LENGTH / itemCount * Math.LN2);\n    return Math.max(Math.min(k, this.MAX_K), 1);\n  }\n  /**\n   * add item\n   * @param item\n   */\n\n\n  add(item) {\n    this.distribute(item, (index, bit) => {\n      this.bits[index] |= bit;\n      return true;\n    });\n  }\n  /**\n   * test if an item contained. (false positive)\n   * @param item\n   */\n\n\n  test(item) {\n    return this.distribute(item, (index, bit) => {\n      return (this.bits[index] & bit) === bit;\n    });\n  }\n\n  distribute(item, cb) {\n    const hash = blake2b_1.blake2b256(item);\n\n    for (let i = 0; i < this.k; i += 1) {\n      const d = (hash[i * 2 + 1] + (hash[i * 2] << 8)) % Bloom.BITS_LENGTH;\n      const bit = 1 << d % 8;\n\n      if (!cb(Math.floor(d / 8), bit)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\nexports.Bloom = Bloom;\n/** number of hash functions */\n\nBloom.MAX_K = 16;\n/** bit length */\n\nBloom.BITS_LENGTH = 2048;","map":{"version":3,"sources":["../src/bloom.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,SAAA,GAAA,OAAA,CAAA,eAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,KAAb,CAAkB;AAiBhB;;;;AAIG;AACH,EAAA,WAAA,CAAY,CAAZ,EAAuB,IAAvB,EAAoC;AAClC,QAAI,IAAJ,EAAU;AACR,WAAK,IAAL,GAAY,IAAZ;AACD,KAFD,MAEO;AACL,WAAK,IAAL,GAAY,MAAM,CAAC,KAAP,CAAa,KAAK,CAAC,WAAN,GAAoB,CAAjC,CAAZ;AACD;;AACD,SAAK,CAAL,GAAS,CAAT;AACD;AAtBD;;;AACuB,SAAT,SAAS,CAAC,SAAD,EAAkB;AACvC,UAAM,CAAC,GAAG,IAAI,CAAC,KAAL,CAAY,KAAK,WAAL,GAAmB,SAApB,GAAiC,IAAI,CAAC,GAAjD,CAAV;AACA,WAAO,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,KAAK,KAAjB,CAAT,EAAkC,CAAlC,CAAP;AACD;AAoBD;;;AAGG;;;AACI,EAAA,GAAG,CAAC,IAAD,EAAa;AACrB,SAAK,UAAL,CAAgB,IAAhB,EAAsB,CAAC,KAAD,EAAQ,GAAR,KAAe;AACnC,WAAK,IAAL,CAAU,KAAV,KAAoB,GAApB;AACA,aAAO,IAAP;AACD,KAHD;AAID;AAED;;;AAGG;;;AACI,EAAA,IAAI,CAAC,IAAD,EAAa;AACtB,WAAO,KAAK,UAAL,CAAgB,IAAhB,EAAsB,CAAC,KAAD,EAAQ,GAAR,KAAe;AAC1C,aAAO,CAAC,KAAK,IAAL,CAAU,KAAV,IAAmB,GAApB,MAA6B,GAApC;AACD,KAFM,CAAP;AAGD;;AAEO,EAAA,UAAU,CAAC,IAAD,EAAe,EAAf,EAA0D;AAC1E,UAAM,IAAI,GAAG,SAAA,CAAA,UAAA,CAAW,IAAX,CAAb;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAzB,EAA4B,CAAC,IAAI,CAAjC,EAAoC;AAClC,YAAM,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAJ,GAAQ,CAAT,CAAJ,IAAmB,IAAI,CAAC,CAAC,GAAG,CAAL,CAAJ,IAAe,CAAlC,CAAD,IAAyC,KAAK,CAAC,WAAzD;AACA,YAAM,GAAG,GAAG,KAAK,CAAC,GAAG,CAArB;;AACA,UAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAL,CAAW,CAAC,GAAG,CAAf,CAAD,EAAoB,GAApB,CAAP,EAAiC;AAC/B,eAAO,KAAP;AACD;AACF;;AACD,WAAO,IAAP;AACD;;AA9De;;AAAlB,OAAA,CAAA,KAAA,GAAA,KAAA;AACE;;AACuB,KAAA,CAAA,KAAA,GAAQ,EAAR;AAEvB;;AACuB,KAAA,CAAA,WAAA,GAAc,IAAd","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst blake2b_1 = require(\"./cry/blake2b\");\n/**\n * 2048 bits Bloom filter\n */\nclass Bloom {\n    /**\n     * new bloom filter instance\n     * @param k number of hash functions\n     * @param bits leave it out to construct an empty one\n     */\n    constructor(k, bits) {\n        if (bits) {\n            this.bits = bits;\n        }\n        else {\n            this.bits = Buffer.alloc(Bloom.BITS_LENGTH / 8);\n        }\n        this.k = k;\n    }\n    /** estimate k(number of hash functions) according to item count */\n    static estimateK(itemCount) {\n        const k = Math.round((this.BITS_LENGTH / itemCount) * Math.LN2);\n        return Math.max(Math.min(k, this.MAX_K), 1);\n    }\n    /**\n     * add item\n     * @param item\n     */\n    add(item) {\n        this.distribute(item, (index, bit) => {\n            this.bits[index] |= bit;\n            return true;\n        });\n    }\n    /**\n     * test if an item contained. (false positive)\n     * @param item\n     */\n    test(item) {\n        return this.distribute(item, (index, bit) => {\n            return (this.bits[index] & bit) === bit;\n        });\n    }\n    distribute(item, cb) {\n        const hash = blake2b_1.blake2b256(item);\n        for (let i = 0; i < this.k; i += 1) {\n            const d = (hash[i * 2 + 1] + (hash[i * 2] << 8)) % Bloom.BITS_LENGTH;\n            const bit = 1 << d % 8;\n            if (!cb(Math.floor(d / 8), bit)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nexports.Bloom = Bloom;\n/** number of hash functions */\nBloom.MAX_K = 16;\n/** bit length */\nBloom.BITS_LENGTH = 2048;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvb20uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvYmxvb20udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwyQ0FBMkM7QUFFM0M7O0dBRUc7QUFDSCxNQUFhLEtBQUs7SUFpQmhCOzs7O09BSUc7SUFDSCxZQUFZLENBQVMsRUFBRSxJQUFhO1FBQ2xDLElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FDbEI7YUFBTTtZQUNMLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2pEO1FBQ0QsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDYixDQUFDO0lBdEJELG1FQUFtRTtJQUM1RCxNQUFNLENBQUMsU0FBUyxDQUFDLFNBQWlCO1FBQ3ZDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNoRSxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFvQkQ7OztPQUdHO0lBQ0ksR0FBRyxDQUFDLElBQVk7UUFDckIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUM7WUFDeEIsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7O09BR0c7SUFDSSxJQUFJLENBQUMsSUFBWTtRQUN0QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQztRQUMxQyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFTyxVQUFVLENBQUMsSUFBWSxFQUFFLEVBQTJDO1FBQzFFLE1BQU0sSUFBSSxHQUFHLG9CQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNsQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7WUFDckUsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDdkIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRTtnQkFDL0IsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOztBQTlESCxzQkErREM7QUE5REMsK0JBQStCO0FBQ1IsV0FBSyxHQUFHLEVBQUUsQ0FBQztBQUVsQyxpQkFBaUI7QUFDTSxpQkFBVyxHQUFHLElBQUksQ0FBQyJ9"]},"metadata":{},"sourceType":"script"}