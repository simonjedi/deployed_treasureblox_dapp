"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rlp_1 = require("./rlp");
const bignumber_js_1 = require("bignumber.js");
const blake = require('blakejs');
var ScriptEngine;
(function (ScriptEngine) {
    ScriptEngine.SCRIPT_ENGINE_PREFIX = Buffer.from('ffffffff', 'hex');
    ScriptEngine.SCRIPT_ENGINE_VERSION = 0;
    ScriptEngine.SCRIPT_DATA_PREFIX = Buffer.from('deadbeef', 'hex');
    ScriptEngine.STAKING_VERSION = 0;
    ScriptEngine.AUCTION_VERSION = 0;
    ScriptEngine.EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';
    ScriptEngine.EMPTY_BYTE32 = '0x0000000000000000000000000000000000000000000000000000000000000000';
    let ModuleID;
    (function (ModuleID) {
        ModuleID[ModuleID["Staking"] = 1000] = "Staking";
        ModuleID[ModuleID["Auction"] = 1001] = "Auction";
        ModuleID[ModuleID["AccountLock"] = 1002] = "AccountLock";
    })(ModuleID = ScriptEngine.ModuleID || (ScriptEngine.ModuleID = {}));
    let Token;
    (function (Token) {
        Token[Token["Meter"] = 0] = "Meter";
        Token[Token["MeterGov"] = 1] = "MeterGov";
    })(Token = ScriptEngine.Token || (ScriptEngine.Token = {}));
    let StakingOpCode;
    (function (StakingOpCode) {
        StakingOpCode[StakingOpCode["Bound"] = 1] = "Bound";
        StakingOpCode[StakingOpCode["Unbound"] = 2] = "Unbound";
        StakingOpCode[StakingOpCode["Candidate"] = 3] = "Candidate";
        StakingOpCode[StakingOpCode["Uncandidate"] = 4] = "Uncandidate";
        StakingOpCode[StakingOpCode["Delegate"] = 5] = "Delegate";
        StakingOpCode[StakingOpCode["Undelegate"] = 6] = "Undelegate";
        StakingOpCode[StakingOpCode["CandidateUpdate"] = 7] = "CandidateUpdate";
        StakingOpCode[StakingOpCode["BucketUpdate"] = 8] = "BucketUpdate";
        StakingOpCode[StakingOpCode["DelegateStats"] = 101] = "DelegateStats";
        StakingOpCode[StakingOpCode["BailOut"] = 102] = "BailOut";
        StakingOpCode[StakingOpCode["FlushAllStats"] = 103] = "FlushAllStats";
        StakingOpCode[StakingOpCode["Governing"] = 10001] = "Governing";
    })(StakingOpCode = ScriptEngine.StakingOpCode || (ScriptEngine.StakingOpCode = {}));
    ScriptEngine.explainStakingOpCode = (opCode) => {
        switch (opCode) {
            case StakingOpCode.Bound:
                return 'staking bound';
            case StakingOpCode.Unbound:
                return 'staking unbound';
            case StakingOpCode.Candidate:
                return 'staking candidate';
            case StakingOpCode.Uncandidate:
                return 'staking uncandidate';
            case StakingOpCode.Delegate:
                return 'staking delegate';
            case StakingOpCode.Undelegate:
                return 'staking undelegate';
            case StakingOpCode.CandidateUpdate:
                return 'staking candidate update';
            case StakingOpCode.BucketUpdate:
                return 'staking bucket update';
            case StakingOpCode.DelegateStats:
                return 'staking delegate stats';
            case StakingOpCode.BailOut:
                return 'staking bailout';
            case StakingOpCode.FlushAllStats:
                return 'staking clean stats';
            case StakingOpCode.Governing:
                return 'staking governing';
        }
    };
    let StakingOption;
    (function (StakingOption) {
        StakingOption[StakingOption["Empty"] = 0] = "Empty";
        // staking bound
        StakingOption[StakingOption["OneWeekLock"] = 1] = "OneWeekLock";
        StakingOption[StakingOption["TwoWeekLock"] = 2] = "TwoWeekLock";
        StakingOption[StakingOption["ThreeWeekLock"] = 3] = "ThreeWeekLock";
        StakingOption[StakingOption["FourWeekLock"] = 4] = "FourWeekLock";
    })(StakingOption = ScriptEngine.StakingOption || (ScriptEngine.StakingOption = {}));
    let AuctionOpCode;
    (function (AuctionOpCode) {
        AuctionOpCode[AuctionOpCode["Start"] = 1] = "Start";
        AuctionOpCode[AuctionOpCode["End"] = 2] = "End";
        AuctionOpCode[AuctionOpCode["Bid"] = 3] = "Bid";
    })(AuctionOpCode = ScriptEngine.AuctionOpCode || (ScriptEngine.AuctionOpCode = {}));
    let AuctionOption;
    (function (AuctionOption) {
        AuctionOption[AuctionOption["Userbid"] = 0] = "Userbid";
        AuctionOption[AuctionOption["Autobid"] = 1] = "Autobid";
    })(AuctionOption = ScriptEngine.AuctionOption || (ScriptEngine.AuctionOption = {}));
    ScriptEngine.explainAuctionOpCode = (opCode, option) => {
        switch (opCode) {
            case AuctionOpCode.Start:
                return 'auction start';
            case AuctionOpCode.End:
                return 'auction end';
            case AuctionOpCode.Bid:
                if (option === AuctionOption.Userbid) {
                    return 'auction userbid';
                }
                else if (option === AuctionOption.Autobid) {
                    return 'auction autobid';
                }
                else {
                    return 'auction bid';
                }
        }
    };
    let AccountLockOpCode;
    (function (AccountLockOpCode) {
        // account lock
        AccountLockOpCode[AccountLockOpCode["Add"] = 1] = "Add";
        AccountLockOpCode[AccountLockOpCode["Remove"] = 2] = "Remove";
        AccountLockOpCode[AccountLockOpCode["Transfer"] = 3] = "Transfer";
        AccountLockOpCode[AccountLockOpCode["Governing"] = 4] = "Governing";
    })(AccountLockOpCode = ScriptEngine.AccountLockOpCode || (ScriptEngine.AccountLockOpCode = {}));
    ScriptEngine.explainAccountLockOpCode = (opCode) => {
        switch (opCode) {
            case AccountLockOpCode.Add:
                return 'account lock add';
            case AccountLockOpCode.Remove:
                return 'account lock remove';
            case AccountLockOpCode.Transfer:
                return 'account lock transfer';
            case AccountLockOpCode.Governing:
                return 'account lock governing';
        }
    };
    function getRandomInt(max) {
        return Math.floor(Math.random() * Math.floor(max));
    }
    function getRandomInt64() {
        return getRandomInt(9007199254740992);
    }
    class DecodeError extends Error {
        constructor(message) {
            super(message); // 'Error' breaks prototype chain here
            Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
        }
    }
    class EncodeError extends Error {
        constructor(message) {
            super(message); // 'Error' breaks prototype chain here
            Object.setPrototypeOf(this, new.target.prototype); // restore prototype chain
        }
    }
    function IsScriptEngineData(hexStr) {
        let str = hexStr;
        if (hexStr.startsWith('0x')) {
            str = hexStr.replace('0x', '');
        }
        const enginePrefix = ScriptEngine.SCRIPT_ENGINE_PREFIX.toString('hex');
        const dataPrefix = ScriptEngine.SCRIPT_DATA_PREFIX.toString('hex');
        return str.startsWith(enginePrefix + dataPrefix);
    }
    ScriptEngine.IsScriptEngineData = IsScriptEngineData;
    // ScriptData encode/decode
    function encodeScriptData(moduleID, body) {
        switch (moduleID) {
            case ModuleID.Staking:
                if (!(body instanceof StakingBody)) {
                    throw new EncodeError('module is set to staking, but no staking body is provided');
                }
                return new ScriptData(moduleID, body.encode()).encode();
            case ModuleID.Auction:
                if (!(body instanceof AuctionBody)) {
                    throw new EncodeError('module is set to auction, but no auction body is provided');
                }
                return new ScriptData(moduleID, body.encode()).encode();
            default:
                throw new EncodeError(`unrecognized moduleID: ${moduleID}`);
        }
    }
    ScriptEngine.encodeScriptData = encodeScriptData;
    function decodeScriptData(input) {
        let buf;
        if (typeof input === 'string') {
            buf = Buffer.from(input.replace('0x', ''), 'hex');
        }
        else {
            buf = input;
        }
        let hexStr = buf.toString('hex');
        const sePrefixStr = ScriptEngine.SCRIPT_ENGINE_PREFIX.toString('hex');
        const sdPrefixStr = ScriptEngine.SCRIPT_DATA_PREFIX.toString('hex');
        if (hexStr.startsWith(sePrefixStr)) {
            hexStr = hexStr.substring(sePrefixStr.length);
        }
        if (!hexStr.startsWith(sdPrefixStr)) {
            throw new DecodeError('could not decode script data: 0x' + buf.toString('hex'));
        }
        const truncated = Buffer.from(hexStr.substring(sdPrefixStr.length), 'hex');
        return new rlp_1.RLP(ScriptEngine.ScriptDataProfile).decode(truncated);
    } // end of Script Data encode/decode
    ScriptEngine.decodeScriptData = decodeScriptData;
    // Staking Body decode
    function decodeStakingBody(input) {
        let buf;
        if (typeof input === 'string') {
            buf = Buffer.from(input.replace('0x', ''), 'hex');
        }
        else {
            buf = input;
        }
        return new rlp_1.RLP(ScriptEngine.StakingBodyProfile).decode(buf);
    }
    ScriptEngine.decodeStakingBody = decodeStakingBody;
    // Auction Body decode
    function decodeAuctionBody(input) {
        let buf;
        if (typeof input === 'string') {
            buf = Buffer.from(input.replace('0x', ''), 'hex');
        }
        else {
            buf = input;
        }
        return new rlp_1.RLP(ScriptEngine.AuctionBodyProfile).decode(buf);
    }
    ScriptEngine.decodeAuctionBody = decodeAuctionBody;
    // Account Lock Body decode
    function decodeAccountLockBody(input) {
        let buf;
        if (typeof input === 'string') {
            buf = Buffer.from(input.replace('0x', ''), 'hex');
        }
        else {
            buf = input;
        }
        return new rlp_1.RLP(ScriptEngine.AccountLockBodyProfile).decode(buf);
    }
    ScriptEngine.decodeAccountLockBody = decodeAccountLockBody;
    // Staking Governing Extra decode
    function decodeStakingGoverningExtra(input) {
        let buf;
        if (typeof input === 'string') {
            buf = Buffer.from(input.replace('0x', ''), 'hex');
        }
        else {
            buf = input;
        }
        return new rlp_1.RLP(ScriptEngine.StakingGoverningExtraProfile).decode(buf);
    }
    ScriptEngine.decodeStakingGoverningExtra = decodeStakingGoverningExtra;
    // Auction Tx decode
    function getAuctionTxFromAuctionBody(body) {
        if (body.opCode === AuctionOpCode.Bid) {
            return new AuctionTx('0x' + body.bidder.toString('hex'), body.amount, body.option, body.timestamp, body.nonce);
        }
        return undefined;
    }
    ScriptEngine.getAuctionTxFromAuctionBody = getAuctionTxFromAuctionBody;
    // ------------------------------------------------
    //                 SCRIPT DATA
    // ------------------------------------------------
    ScriptEngine.ScriptDataProfile = {
        name: 'scriptDataProfile',
        kind: [
            {
                name: 'header',
                kind: [
                    { name: 'version', kind: new rlp_1.RLP.NumericKind() },
                    { name: 'modId', kind: new rlp_1.RLP.NumericKind() },
                ],
            },
            { name: 'payload', kind: new rlp_1.RLP.BufferKind() },
        ],
    };
    class ScriptDataHeader {
        constructor(version, modId) {
            this.version = version;
            this.modId = modId;
        }
    }
    ScriptEngine.ScriptDataHeader = ScriptDataHeader;
    class ScriptData {
        constructor(modId, payload) {
            this.header = new ScriptDataHeader(ScriptEngine.SCRIPT_ENGINE_VERSION, modId);
            this.payload = payload;
        }
        encode() {
            return Buffer.concat([
                ScriptEngine.SCRIPT_ENGINE_PREFIX,
                ScriptEngine.SCRIPT_DATA_PREFIX,
                new rlp_1.RLP(ScriptEngine.ScriptDataProfile).encode(this),
            ]);
        }
    }
    ScriptEngine.ScriptData = ScriptData;
    // ------------------------------------------
    //                STAKING
    // ------------------------------------------
    ScriptEngine.StakingGoverningExtraProfile = {
        name: 'stakingGoverningExtraProfile',
        kind: {
            item: [
                { name: 'address', kind: new rlp_1.RLP.BufferKind() },
                { name: 'amount', kind: new rlp_1.RLP.NumericKind() },
            ],
        },
    };
    class RewardInfo {
        constructor(address, amount) {
            this.address = address;
            this.amount = amount;
        }
    }
    ScriptEngine.RewardInfo = RewardInfo;
    ScriptEngine.StakingBodyProfile = {
        name: 'stakingBodyProfile',
        kind: [
            { name: 'opCode', kind: new rlp_1.RLP.NumericKind() },
            { name: 'version', kind: new rlp_1.RLP.NumericKind() },
            { name: 'option', kind: new rlp_1.RLP.NumericKind() },
            { name: 'holderAddr', kind: new rlp_1.RLP.BufferKind() },
            { name: 'candidateAddr', kind: new rlp_1.RLP.BufferKind() },
            { name: 'candidateName', kind: new rlp_1.RLP.BufferKind() },
            { name: 'candidateDescription', kind: new rlp_1.RLP.BufferKind() },
            { name: 'candidatePubKey', kind: new rlp_1.RLP.BufferKind() },
            { name: 'candidateIP', kind: new rlp_1.RLP.BufferKind() },
            { name: 'candidatePort', kind: new rlp_1.RLP.NumericKind() },
            { name: 'bucketID', kind: new rlp_1.RLP.BufferKind() },
            { name: 'amount', kind: new rlp_1.RLP.NumericKind() },
            { name: 'token', kind: new rlp_1.RLP.NumericKind() },
            { name: 'autobid', kind: new rlp_1.RLP.NumericKind() },
            { name: 'timestamp', kind: new rlp_1.RLP.NumericKind() },
            { name: 'nonce', kind: new rlp_1.RLP.NumericKind() },
            { name: 'extra', kind: new rlp_1.RLP.BufferKind() },
        ],
    };
    ScriptEngine.BucketIDProfile = {
        name: 'bucketID',
        kind: [
            { name: 'owner', kind: new rlp_1.RLP.BufferKind() },
            { name: 'nonce', kind: new rlp_1.RLP.NumericKind() },
            { name: 'timestamp', kind: new rlp_1.RLP.NumericKind() },
        ],
    };
    class StakingBody {
        constructor(op, option, holderAddr, candidateAddr, candidateName, candidateDescription, candidatePubKey, candidateIP, candidatePort, bucketID, amount, token, autobid, timestamp = 0, nonce = 0) {
            this.opCode = op;
            this.version = ScriptEngine.STAKING_VERSION;
            this.option = option;
            // set autobid to be in range [0,100]
            let autobidVal = autobid;
            if (autobid > 100) {
                autobidVal = 100;
            }
            if (autobid < 0) {
                autobidVal = 0;
            }
            this.autobid = autobidVal;
            let holderAddrStr = holderAddr;
            let candidateAddrStr = candidateAddr;
            let bucketIDStr = bucketID;
            if (holderAddrStr === '' || holderAddrStr === '0x') {
                holderAddrStr = ScriptEngine.EMPTY_ADDRESS;
            }
            if (candidateAddrStr === '' || candidateAddrStr === '0x') {
                candidateAddrStr = ScriptEngine.EMPTY_ADDRESS;
            }
            if (bucketIDStr === '' || bucketIDStr === '0x') {
                bucketIDStr = ScriptEngine.EMPTY_BYTE32;
            }
            // remove 0x prefix
            if (holderAddrStr.startsWith('0x')) {
                holderAddrStr = holderAddrStr.replace('0x', '');
            }
            if (candidateAddrStr.startsWith('0x')) {
                candidateAddrStr = candidateAddrStr.replace('0x', '');
            }
            if (bucketIDStr.toString().startsWith('0x')) {
                bucketIDStr = bucketIDStr.replace('0x', '');
            }
            this.holderAddr = Buffer.from(holderAddrStr, 'hex');
            this.candidateAddr = Buffer.from(candidateAddrStr, 'hex');
            this.candidateName = Buffer.from(candidateName);
            this.candidateDescription = Buffer.from(candidateDescription);
            this.candidatePubKey = Buffer.from(candidatePubKey);
            this.candidateIP = Buffer.from(candidateIP);
            this.candidatePort = candidatePort;
            this.bucketID = Buffer.from(bucketIDStr, 'hex');
            this.amount = amount.toString();
            this.token = token;
            if (timestamp != 0) {
                this.timestamp = timestamp;
            }
            else {
                this.timestamp = Math.ceil(new Date().getTime() / 1000);
            }
            if (nonce != 0) {
                this.nonce = nonce;
            }
            else {
                this.nonce = getRandomInt64();
            }
            this.extra = Buffer.from('', 'hex');
        }
        encode() {
            return new rlp_1.RLP(ScriptEngine.StakingBodyProfile).encode(this);
        }
    }
    ScriptEngine.StakingBody = StakingBody;
    function jsonFromStakingBody(sb) {
        return Object.assign(Object.assign({}, sb), { bucketID: '0x' + sb.bucketID.toString('hex'), holderAddr: '0x' + sb.holderAddr.toString('hex'), candidateAddr: '0x' + sb.candidateAddr.toString('hex'), candidateDescription: sb.candidateDescription.toString(), candidateIP: sb.candidateIP.toString(), candidateName: sb.candidateName.toString(), candidatePubKey: sb.candidatePubKey.toString(), extra: sb.extra.toString('hex'), amount: new bignumber_js_1.default(sb.amount).toFixed() });
    }
    ScriptEngine.jsonFromStakingBody = jsonFromStakingBody;
    function getBoundData(option, holderAddr, candidateAddr, amount, timestamp = 0, nonce = 0, autobid = 0) {
        const body = new StakingBody(StakingOpCode.Bound, option, holderAddr, candidateAddr, '', // name
        '', // desc
        '', // pubkey
        '', // ip
        0, // port
        '', // bucket id
        amount, Token.MeterGov, autobid, // autobid
        timestamp, nonce);
        return new ScriptData(ModuleID.Staking, body.encode()).encode();
    }
    ScriptEngine.getBoundData = getBoundData;
    function getUnboundData(holderAddr, stakingIDStr, amount, timestamp = 0, nonce = 0) {
        const body = new StakingBody(StakingOpCode.Unbound, StakingOption.Empty, holderAddr, '', // candidate addr
        '', // name
        '', // desc
        '', // pubkey
        '', // ip
        0, // port
        stakingIDStr, // bucket id
        amount, Token.MeterGov, 0, // autobid
        timestamp, nonce);
        return new ScriptData(ModuleID.Staking, body.encode()).encode();
    }
    ScriptEngine.getUnboundData = getUnboundData;
    function getBucketUpdateData(holderAddr, bucketID, amount, timestamp = 0, nonce = 0) {
        const body = new StakingBody(StakingOpCode.BucketUpdate, 0, holderAddr, holderAddr, '', // name
        '', // desc
        '', //
        '', // ip
        0, // port
        bucketID, amount.toString(), Token.MeterGov, 0, // autobid
        timestamp, nonce);
        return new ScriptData(ModuleID.Staking, body.encode()).encode();
    }
    ScriptEngine.getBucketUpdateData = getBucketUpdateData;
    function getCandidateData(
    // omitted option, every bucket is forever
    holderAddr, candidateName, candidateDescription, candidatePubKey, candidateIP, candidatePort, amount, commission, timestamp = 0, nonce = 0, autobid = 0) {
        let option = 0;
        if (commission >= 100 && commission <= 1000) {
            option = commission * 1e5;
        }
        const body = new StakingBody(StakingOpCode.Candidate, option, holderAddr, holderAddr, candidateName, candidateDescription, candidatePubKey, candidateIP, candidatePort, '', amount.toString(), Token.MeterGov, autobid, // autobid
        timestamp, nonce);
        return new ScriptData(ModuleID.Staking, body.encode()).encode();
        // return body.encode();
    }
    ScriptEngine.getCandidateData = getCandidateData;
    function getUncandidateData(candidateAddr, timestamp = 0, nonce = 0) {
        const body = new StakingBody(StakingOpCode.Uncandidate, StakingOption.Empty, ScriptEngine.EMPTY_ADDRESS, candidateAddr, // candidate addr
        '', // name
        '', // desc
        '', // pubkey
        '', // ip
        0, // port
        '', // bucket id
        0, // amount
        Token.MeterGov, // token
        0, // autobid
        timestamp, nonce);
        return new ScriptData(ModuleID.Staking, body.encode()).encode();
    }
    ScriptEngine.getUncandidateData = getUncandidateData;
    function getDelegateData(holderAddr, candidateAddr, bucketID, amount, timestamp = 0, nonce = 0, autobid = 0) {
        const body = new StakingBody(StakingOpCode.Delegate, StakingOption.Empty, holderAddr, candidateAddr, '', // name
        '', // desc
        '', // pubkey
        '', // ip
        0, // port
        bucketID, // bucket id
        amount.toString(), Token.MeterGov, autobid, timestamp, nonce);
        return new ScriptData(ModuleID.Staking, body.encode()).encode();
        // return body.encode();
    }
    ScriptEngine.getDelegateData = getDelegateData;
    function getUndelegateData(holderAddr, stakingIDStr, amount, timestamp = 0, nonce = 0) {
        const body = new StakingBody(StakingOpCode.Undelegate, StakingOption.Empty, holderAddr, '', // candidate addr
        '', // name
        '', // desc
        '', // pubkey
        '', // ip
        0, // port
        stakingIDStr, amount.toString(), Token.MeterGov, 0, // autobid
        timestamp, nonce);
        return new ScriptData(ModuleID.Staking, body.encode()).encode();
        // return body.encode();
    }
    ScriptEngine.getUndelegateData = getUndelegateData;
    function getCandidateUpdateData(holderAddr, candidateName, candidateDescription, candidatePubKey, candidateIP, candidatePort, commission, timestamp = 0, nonce = 0, autobid = 0) {
        let option = 0;
        if (commission >= 100 && commission <= 1000) {
            option = commission * 1e5;
        }
        const body = new StakingBody(StakingOpCode.CandidateUpdate, option, holderAddr, holderAddr, candidateName, candidateDescription, candidatePubKey, candidateIP, candidatePort, '', 0, Token.MeterGov, autobid, // autobid
        timestamp, nonce);
        return new ScriptData(ModuleID.Staking, body.encode()).encode();
        // return body.encode();
    }
    ScriptEngine.getCandidateUpdateData = getCandidateUpdateData;
    function getBailOutData(holderAddr, timestamp = 0, nonce = 0) {
        const body = new StakingBody(StakingOpCode.BailOut, StakingOption.Empty, holderAddr, holderAddr, '', // name
        '', // desc
        '', // pubkey
        '', // ip
        0, // port
        '', // bucket id
        '0', // amount
        Token.MeterGov, 0, // autobid
        timestamp, nonce);
        return new ScriptData(ModuleID.Staking, body.encode()).encode();
        // return body.encode();
    }
    ScriptEngine.getBailOutData = getBailOutData;
    // ------------------------------------------
    //                AUCTION
    // ------------------------------------------
    ScriptEngine.AuctionControlBlockProfile = {
        name: 'auctionControlBlock',
        kind: [
            { name: 'startHeight', kind: new rlp_1.RLP.NumericKind() },
            { name: 'startEpoch', kind: new rlp_1.RLP.NumericKind() },
            { name: 'endHeight', kind: new rlp_1.RLP.NumericKind() },
            { name: 'endEpoch', kind: new rlp_1.RLP.NumericKind() },
            { name: 'rlsdMTRG', kind: new rlp_1.RLP.NumericKind() },
            { name: 'rsvdMTRG', kind: new rlp_1.RLP.NumericKind() },
            { name: 'rsvdPrice', kind: new rlp_1.RLP.NumericKind() },
            { name: 'createTime', kind: new rlp_1.RLP.NumericKind() },
        ],
    };
    class AuctionControlBlock {
        constructor(startHeight, startEpoch, endHeight, endEpoch, rlsdMTRG, rsvdMTRG, rsvdPrice, createTime) {
            this.startHeight = startHeight;
            this.startEpoch = startEpoch;
            this.endHeight = endHeight;
            this.endEpoch = endEpoch;
            this.rlsdMTRG = rlsdMTRG.toString();
            this.rsvdMTRG = rsvdMTRG.toString();
            this.rsvdPrice = rsvdPrice.toString();
            this.createTime = createTime;
        }
        ID() {
            const bytes = new rlp_1.RLP(ScriptEngine.AuctionControlBlockProfile).encode(this);
            const idBuf = blake.blake2bHex(bytes, null, 32);
            return '0x' + idBuf.toString('hex');
        }
    }
    ScriptEngine.AuctionControlBlock = AuctionControlBlock;
    ScriptEngine.AuctionTxProfile = {
        name: 'acutionTx',
        kind: [
            { name: 'address', kind: new rlp_1.RLP.BufferKind() },
            { name: 'amount', kind: new rlp_1.RLP.NumericKind() },
            { name: 'type', kind: new rlp_1.RLP.NumericKind() },
            { name: 'timestamp', kind: new rlp_1.RLP.NumericKind() },
            { name: 'nonce', kind: new rlp_1.RLP.NumericKind() },
        ],
    };
    class AuctionTx {
        constructor(address, amount, type, timestamp, nonce) {
            this.address = Buffer.from(address.replace('0x', ''), 'hex');
            this.amount = amount.toString();
            this.type = type;
            this.timestamp = timestamp;
            this.nonce = nonce.toString();
        }
        ID() {
            const bytes = new rlp_1.RLP(ScriptEngine.AuctionTxProfile).encode(this);
            const idBuf = blake.blake2bHex(bytes, null, 32);
            return '0x' + idBuf.toString('hex');
        }
    }
    ScriptEngine.AuctionTx = AuctionTx;
    ScriptEngine.AuctionBodyProfile = {
        name: 'auctionBody',
        kind: [
            { name: 'opCode', kind: new rlp_1.RLP.NumericKind() },
            { name: 'version', kind: new rlp_1.RLP.NumericKind() },
            { name: 'option', kind: new rlp_1.RLP.NumericKind() },
            { name: 'startHeight', kind: new rlp_1.RLP.NumericKind() },
            { name: 'startEpoch', kind: new rlp_1.RLP.NumericKind() },
            { name: 'endHeight', kind: new rlp_1.RLP.NumericKind() },
            { name: 'endEpoch', kind: new rlp_1.RLP.NumericKind() },
            { name: 'sequence', kind: new rlp_1.RLP.NumericKind() },
            { name: 'auctionID', kind: new rlp_1.RLP.BufferKind() },
            { name: 'bidder', kind: new rlp_1.RLP.BufferKind() },
            { name: 'amount', kind: new rlp_1.RLP.NumericKind() },
            { name: 'reserveAmount', kind: new rlp_1.RLP.NumericKind() },
            { name: 'token', kind: new rlp_1.RLP.NumericKind() },
            { name: 'timestamp', kind: new rlp_1.RLP.NumericKind() },
            { name: 'nonce', kind: new rlp_1.RLP.NumericKind() },
        ],
    };
    class AuctionBody {
        constructor(opCode, option, auctionID, bidder, amount, timestamp = 0, nonce = 0) {
            let bidderStr = bidder;
            let auctionIDStr = auctionID;
            if (bidderStr === '' || bidderStr === '0x') {
                bidderStr = ScriptEngine.EMPTY_ADDRESS;
            }
            if (auctionIDStr === '' || auctionIDStr === '0x') {
                auctionIDStr = ScriptEngine.EMPTY_BYTE32;
            }
            if (bidderStr.startsWith('0x')) {
                bidderStr = bidderStr.replace('0x', '');
            }
            if (auctionIDStr.startsWith('0x')) {
                auctionIDStr = auctionIDStr.replace('0x', '');
            }
            this.opCode = opCode;
            this.version = ScriptEngine.AUCTION_VERSION;
            this.option = option;
            this.startHeight = 0;
            this.startEpoch = 0;
            this.endHeight = 0;
            this.endEpoch = 0;
            this.sequence = 0;
            this.auctionID = Buffer.from(auctionIDStr, 'hex');
            this.bidder = Buffer.from(bidderStr, 'hex');
            this.amount = amount.toString();
            this.reserveAmount = '0';
            this.token = Token.Meter;
            if (timestamp != 0) {
                this.timestamp = timestamp;
            }
            else {
                this.timestamp = Math.ceil(new Date().getTime() / 1000);
            }
            if (nonce != 0) {
                this.nonce = nonce;
            }
            else {
                this.nonce = getRandomInt64();
            }
        }
        encode() {
            return new rlp_1.RLP(ScriptEngine.AuctionBodyProfile).encode(this);
        }
    }
    ScriptEngine.AuctionBody = AuctionBody;
    function jsonFromAuctionBody(ab) {
        return Object.assign(Object.assign({}, ab), { auctionID: '0x' + ab.auctionID.toString('hex'), bidder: '0x' + ab.bidder.toString('hex'), amount: new bignumber_js_1.default(ab.amount).toFixed(), reserveAmount: new bignumber_js_1.default(ab.reserveAmount).toFixed() });
    }
    ScriptEngine.jsonFromAuctionBody = jsonFromAuctionBody;
    function getBidData(bidder, amount, timestamp = 0, nonce = 0) {
        const body = new AuctionBody(AuctionOpCode.Bid, AuctionOption.Userbid, ScriptEngine.EMPTY_BYTE32, bidder, amount, timestamp, nonce);
        return new ScriptData(ModuleID.Auction, body.encode()).encode();
    }
    ScriptEngine.getBidData = getBidData;
    // ------------------------------------------
    //                ACCOUNT LOCK
    // ------------------------------------------
    ScriptEngine.AccountLockBodyProfile = {
        name: 'accountLockBodyProfile',
        kind: [
            { name: 'opCode', kind: new rlp_1.RLP.NumericKind() },
            { name: 'version', kind: new rlp_1.RLP.NumericKind() },
            { name: 'option', kind: new rlp_1.RLP.NumericKind() },
            { name: 'lockEpoch', kind: new rlp_1.RLP.NumericKind() },
            { name: 'releaseEpoch', kind: new rlp_1.RLP.NumericKind() },
            { name: 'fromAddr', kind: new rlp_1.RLP.BufferKind() },
            { name: 'toAddr', kind: new rlp_1.RLP.BufferKind() },
            { name: 'meterAmount', kind: new rlp_1.RLP.NumericKind() },
            { name: 'meterGovAmount', kind: new rlp_1.RLP.NumericKind() },
            { name: 'memo', kind: new rlp_1.RLP.BufferKind() },
        ],
    };
    class AccountLockBody {
        constructor(op, lockEpoch, releaseEpoch, fromAddr, toAddr, meterAmount, meterGovAmount, memo) {
            this.opCode = op;
            this.version = ScriptEngine.STAKING_VERSION;
            this.option = 0;
            let fromAddrStr = fromAddr;
            let toAddrStr = toAddr;
            if (fromAddrStr === '' || fromAddrStr === '0x') {
                fromAddrStr = ScriptEngine.EMPTY_ADDRESS;
            }
            if (toAddrStr === '' || toAddrStr === '0x') {
                toAddrStr = ScriptEngine.EMPTY_ADDRESS;
            }
            if (fromAddrStr.startsWith('0x')) {
                fromAddrStr = fromAddrStr.replace('0x', '');
            }
            if (toAddrStr.startsWith('0x')) {
                toAddrStr = toAddrStr.replace('0x', '');
            }
            this.fromAddr = Buffer.from(fromAddrStr, 'hex');
            this.toAddr = Buffer.from(toAddrStr, 'hex');
            this.lockEpoch = lockEpoch;
            this.releaseEpoch = releaseEpoch;
            this.meterAmount = meterAmount.toString();
            this.meterGovAmount = meterGovAmount.toString();
            this.memo = Buffer.from(memo, 'utf-8');
        }
        encode() {
            return new rlp_1.RLP(ScriptEngine.AccountLockBodyProfile).encode(this);
        }
    }
    ScriptEngine.AccountLockBody = AccountLockBody;
    function jsonFromAccountLockBody(alb) {
        return Object.assign(Object.assign({}, alb), { fromAddr: '0x' + alb.fromAddr.toString('hex'), toAddr: '0x' + alb.toAddr.toString('hex'), meterAmount: new bignumber_js_1.default(alb.meterAmount).toFixed(), meterGovAmount: new bignumber_js_1.default(alb.meterGovAmount).toFixed(), memo: alb.memo.toString() });
    }
    ScriptEngine.jsonFromAccountLockBody = jsonFromAccountLockBody;
    function getLockedTransferData(lockEpoch, releaseEpoch, fromAddr, toAddr, meterAmount, meterGovAmount, memo) {
        const body = new AccountLockBody(AccountLockOpCode.Transfer, lockEpoch, releaseEpoch, fromAddr, toAddr, meterAmount, meterGovAmount, memo);
        return new ScriptData(ModuleID.AccountLock, body.encode()).encode();
    }
    ScriptEngine.getLockedTransferData = getLockedTransferData;
    function getBucketID(owner, nonce, timestamp) {
        const bytes = new rlp_1.RLP(ScriptEngine.BucketIDProfile).encode({
            owner,
            nonce,
            timestamp,
        });
        const idBuf = blake.blake2bHex(bytes, null, 32);
        return '0x' + idBuf.toString('hex');
    }
    ScriptEngine.getBucketID = getBucketID;
})(ScriptEngine = exports.ScriptEngine || (exports.ScriptEngine = {}));
//# sourceMappingURL=data:application/json;base64,