{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PhoneNumberUtils = exports.getExampleNumber = exports.parsePhoneNumber = exports.isE164NumberStrict = exports.getE164Number = exports.getE164DisplayNumber = exports.getDisplayNumberInternational = exports.getDisplayPhoneNumber = exports.getRegionCodeFromCountryCode = exports.getRegionCode = exports.getCountryCode = exports.getCountryEmoji = exports.getPhoneHash = exports.isE164Number = exports.anonymizedPhone = void 0;\n\nvar phoneNumbers_1 = require(\"@celo/base/lib/phoneNumbers\");\n\nvar country_data_1 = __importDefault(require(\"country-data\"));\n\nvar google_libphonenumber_1 = require(\"google-libphonenumber\");\n\nvar web3_utils_1 = require(\"web3-utils\"); // Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\n\n\nvar phoneNumbers_2 = require(\"@celo/base/lib/phoneNumbers\");\n\nObject.defineProperty(exports, \"anonymizedPhone\", {\n  enumerable: true,\n  get: function () {\n    return phoneNumbers_2.anonymizedPhone;\n  }\n});\nObject.defineProperty(exports, \"isE164Number\", {\n  enumerable: true,\n  get: function () {\n    return phoneNumbers_2.isE164Number;\n  }\n});\n\nvar sha3 = function (v) {\n  return (0, web3_utils_1.soliditySha3)({\n    type: 'string',\n    value: v\n  });\n};\n\nvar getPhoneHash = function (phoneNumber, salt) {\n  return (0, phoneNumbers_1.getPhoneHash)(sha3, phoneNumber, salt);\n};\n\nexports.getPhoneHash = getPhoneHash;\nvar phoneUtil = google_libphonenumber_1.PhoneNumberUtil.getInstance();\nvar MIN_PHONE_LENGTH = 4;\n\nfunction getCountryEmoji(e164PhoneNumber, countryCodePossible, regionCodePossible) {\n  // The country code and region code can both be passed in, or it can be inferred from the e164PhoneNumber\n  var countryCode;\n  var regionCode;\n  countryCode = countryCodePossible;\n  regionCode = regionCodePossible;\n\n  if (!countryCode || !regionCode) {\n    countryCode = getCountryCode(e164PhoneNumber);\n    regionCode = getRegionCode(e164PhoneNumber);\n  }\n\n  var countries = country_data_1.default.lookup.countries({\n    countryCallingCodes: \"+\" + countryCode\n  });\n  var userCountryArray = countries.filter(function (c) {\n    return c.alpha2 === regionCode;\n  });\n  var country = userCountryArray.length > 0 ? userCountryArray[0] : undefined;\n  return country ? country.emoji : '';\n}\n\nexports.getCountryEmoji = getCountryEmoji;\n\nfunction getCountryCode(e164PhoneNumber) {\n  if (!e164PhoneNumber) {\n    return null;\n  }\n\n  try {\n    return phoneUtil.parse(e164PhoneNumber).getCountryCode();\n  } catch (error) {\n    console.debug(\"getCountryCode, number: \" + e164PhoneNumber + \", error: \" + error);\n    return null;\n  }\n}\n\nexports.getCountryCode = getCountryCode;\n\nfunction getRegionCode(e164PhoneNumber) {\n  if (!e164PhoneNumber) {\n    return null;\n  }\n\n  try {\n    return phoneUtil.getRegionCodeForNumber(phoneUtil.parse(e164PhoneNumber));\n  } catch (error) {\n    console.debug(\"getRegionCodeForNumber, number: \" + e164PhoneNumber + \", error: \" + error);\n    return null;\n  }\n}\n\nexports.getRegionCode = getRegionCode;\n\nfunction getRegionCodeFromCountryCode(countryCode) {\n  if (!countryCode) {\n    return null;\n  }\n\n  try {\n    return phoneUtil.getRegionCodeForCountryCode(parseInt(countryCode, 10));\n  } catch (error) {\n    console.debug(\"getRegionCodeFromCountryCode, countrycode: \" + countryCode + \", error: \" + error);\n    return null;\n  }\n}\n\nexports.getRegionCodeFromCountryCode = getRegionCodeFromCountryCode;\n\nfunction getDisplayPhoneNumber(phoneNumber, defaultCountryCode) {\n  var phoneDetails = parsePhoneNumber(phoneNumber, defaultCountryCode);\n\n  if (phoneDetails) {\n    return phoneDetails.displayNumber;\n  } else {\n    // Fallback to input instead of showing nothing for invalid numbers\n    return phoneNumber;\n  }\n}\n\nexports.getDisplayPhoneNumber = getDisplayPhoneNumber;\n\nfunction getDisplayNumberInternational(e164PhoneNumber) {\n  var countryCode = getCountryCode(e164PhoneNumber);\n  var phoneDetails = parsePhoneNumber(e164PhoneNumber, (countryCode || '').toString());\n\n  if (phoneDetails) {\n    return phoneDetails.displayNumberInternational;\n  } else {\n    // Fallback to input instead of showing nothing for invalid numbers\n    return e164PhoneNumber;\n  }\n}\n\nexports.getDisplayNumberInternational = getDisplayNumberInternational;\n\nfunction getE164DisplayNumber(e164PhoneNumber) {\n  var countryCode = getCountryCode(e164PhoneNumber);\n  return getDisplayPhoneNumber(e164PhoneNumber, (countryCode || '').toString());\n}\n\nexports.getE164DisplayNumber = getE164DisplayNumber;\n\nfunction getE164Number(phoneNumber, defaultCountryCode) {\n  var phoneDetails = parsePhoneNumber(phoneNumber, defaultCountryCode);\n\n  if (phoneDetails && (0, phoneNumbers_1.isE164Number)(phoneDetails.e164Number)) {\n    return phoneDetails.e164Number;\n  } else {\n    return null;\n  }\n}\n\nexports.getE164Number = getE164Number; // Actually runs through the parsing instead of using a regex\n\nfunction isE164NumberStrict(phoneNumber) {\n  try {\n    var parsedPhoneNumber = phoneUtil.parse(phoneNumber);\n\n    if (!phoneUtil.isValidNumber(parsedPhoneNumber)) {\n      return false;\n    }\n\n    return phoneUtil.format(parsedPhoneNumber, google_libphonenumber_1.PhoneNumberFormat.E164) === phoneNumber;\n  } catch (_a) {\n    return false;\n  }\n}\n\nexports.isE164NumberStrict = isE164NumberStrict;\n\nfunction parsePhoneNumber(phoneNumberRaw, defaultCountryCode) {\n  try {\n    if (!phoneNumberRaw || phoneNumberRaw.length < MIN_PHONE_LENGTH) {\n      return null;\n    }\n\n    var defaultRegionCode = defaultCountryCode ? getRegionCodeFromCountryCode(defaultCountryCode) : null;\n    var parsedNumberUnfixed = phoneUtil.parse(phoneNumberRaw, defaultRegionCode || undefined);\n    var parsedCountryCode = parsedNumberUnfixed.getCountryCode();\n    var parsedRegionCode = phoneUtil.getRegionCodeForNumber(parsedNumberUnfixed);\n    var parsedNumber = handleSpecialCasesForParsing(parsedNumberUnfixed, parsedCountryCode, parsedRegionCode);\n\n    if (!parsedNumber) {\n      return null;\n    }\n\n    var isValid = phoneUtil.isValidNumberForRegion(parsedNumber, parsedRegionCode);\n    return isValid ? {\n      e164Number: phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.E164),\n      displayNumber: handleSpecialCasesForDisplay(parsedNumber, parsedCountryCode),\n      displayNumberInternational: phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.INTERNATIONAL),\n      countryCode: parsedCountryCode,\n      regionCode: parsedRegionCode\n    } : null;\n  } catch (error) {\n    console.debug(\"phoneNumbers/parsePhoneNumber/Failed to parse phone number, error: \" + error);\n    return null;\n  }\n}\n\nexports.parsePhoneNumber = parsePhoneNumber;\n\nfunction handleSpecialCasesForParsing(parsedNumber, countryCode, regionCode) {\n  if (!countryCode || !regionCode) {\n    return parsedNumber;\n  }\n\n  switch (countryCode) {\n    // Argentina\n    // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#why-is-this-number-from-argentina-ar-or-mexico-mx-not-identified-as-the-right-number-type\n    // https://en.wikipedia.org/wiki/Telephone_numbers_in_Argentina\n    case 54:\n      return prependToFormMobilePhoneNumber(parsedNumber, regionCode, '9');\n\n    default:\n      return parsedNumber;\n  }\n} // TODO(Rossy) Given the inconsistencies of numbers around the world, we should\n// display e164 everywhere to ensure users knows exactly who their sending money to\n\n\nfunction handleSpecialCasesForDisplay(parsedNumber, countryCode) {\n  switch (countryCode) {\n    // Argentina\n    // The Google lib formatter incorretly adds '15' to the nationally formatted number for Argentina\n    // However '15' is only needed when calling a mobile from a landline\n    case 54:\n      return phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.INTERNATIONAL).replace(/\\+54(\\s)?/, '');\n\n    case 231:\n      var formatted = phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.NATIONAL);\n      return formatted && formatted[0] === '0' ? formatted.slice(1) : formatted;\n\n    default:\n      return phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.NATIONAL);\n  }\n}\n/**\n * Some countries require a prefix before the area code depending on if the number is\n * mobile vs landline and international vs national\n */\n\n\nfunction prependToFormMobilePhoneNumber(parsedNumber, regionCode, prefix) {\n  if (phoneUtil.getNumberType(parsedNumber) === google_libphonenumber_1.PhoneNumberType.MOBILE) {\n    return parsedNumber;\n  }\n\n  var nationalNumber = phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.NATIONAL); // Nationally formatted numbers sometimes contain leading 0\n\n  if (nationalNumber.charAt(0) === '0') {\n    nationalNumber = nationalNumber.slice(1);\n  } // If the number already starts with prefix, don't prepend it again\n\n\n  if (nationalNumber.startsWith(prefix)) {\n    return null;\n  }\n\n  var adjustedNumber = phoneUtil.parse(prefix + nationalNumber, regionCode);\n  return phoneUtil.getNumberType(adjustedNumber) === google_libphonenumber_1.PhoneNumberType.MOBILE ? adjustedNumber : null;\n}\n\nfunction getExampleNumber(regionCode, useOnlyZeroes, isInternational) {\n  if (useOnlyZeroes === void 0) {\n    useOnlyZeroes = true;\n  }\n\n  if (isInternational === void 0) {\n    isInternational = false;\n  }\n\n  var examplePhone = phoneUtil.getExampleNumber(getRegionCodeFromCountryCode(regionCode));\n\n  if (!examplePhone) {\n    return;\n  }\n\n  var formatedExample = phoneUtil.format(examplePhone, isInternational ? google_libphonenumber_1.PhoneNumberFormat.INTERNATIONAL : google_libphonenumber_1.PhoneNumberFormat.NATIONAL);\n\n  if (useOnlyZeroes) {\n    if (isInternational) {\n      return formatedExample.replace(/(^\\+[0-9]{1,3} |[0-9])/g, function (value, _, i) {\n        return i ? '0' : value;\n      });\n    }\n\n    return formatedExample.replace(/[0-9]/g, '0');\n  }\n\n  return formatedExample;\n}\n\nexports.getExampleNumber = getExampleNumber;\nexports.PhoneNumberUtils = {\n  getPhoneHash: exports.getPhoneHash,\n  getCountryCode: getCountryCode,\n  getRegionCode: getRegionCode,\n  getDisplayPhoneNumber: getDisplayPhoneNumber,\n  getE164Number: getE164Number,\n  isE164Number: phoneNumbers_1.isE164Number,\n  parsePhoneNumber: parsePhoneNumber\n};","map":{"version":3,"sources":["../src/phoneNumbers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PhoneNumberUtils = exports.getExampleNumber = exports.parsePhoneNumber = exports.isE164NumberStrict = exports.getE164Number = exports.getE164DisplayNumber = exports.getDisplayNumberInternational = exports.getDisplayPhoneNumber = exports.getRegionCodeFromCountryCode = exports.getRegionCode = exports.getCountryCode = exports.getCountryEmoji = exports.getPhoneHash = exports.isE164Number = exports.anonymizedPhone = void 0;\nvar phoneNumbers_1 = require(\"@celo/base/lib/phoneNumbers\");\nvar country_data_1 = __importDefault(require(\"country-data\"));\nvar google_libphonenumber_1 = require(\"google-libphonenumber\");\nvar web3_utils_1 = require(\"web3-utils\");\n// Exports moved to @celo/base, forwarding them\n// here for backwards compatibility\nvar phoneNumbers_2 = require(\"@celo/base/lib/phoneNumbers\");\nObject.defineProperty(exports, \"anonymizedPhone\", { enumerable: true, get: function () { return phoneNumbers_2.anonymizedPhone; } });\nObject.defineProperty(exports, \"isE164Number\", { enumerable: true, get: function () { return phoneNumbers_2.isE164Number; } });\nvar sha3 = function (v) { return (0, web3_utils_1.soliditySha3)({ type: 'string', value: v }); };\nvar getPhoneHash = function (phoneNumber, salt) {\n    return (0, phoneNumbers_1.getPhoneHash)(sha3, phoneNumber, salt);\n};\nexports.getPhoneHash = getPhoneHash;\nvar phoneUtil = google_libphonenumber_1.PhoneNumberUtil.getInstance();\nvar MIN_PHONE_LENGTH = 4;\nfunction getCountryEmoji(e164PhoneNumber, countryCodePossible, regionCodePossible) {\n    // The country code and region code can both be passed in, or it can be inferred from the e164PhoneNumber\n    var countryCode;\n    var regionCode;\n    countryCode = countryCodePossible;\n    regionCode = regionCodePossible;\n    if (!countryCode || !regionCode) {\n        countryCode = getCountryCode(e164PhoneNumber);\n        regionCode = getRegionCode(e164PhoneNumber);\n    }\n    var countries = country_data_1.default.lookup.countries({ countryCallingCodes: \"+\" + countryCode });\n    var userCountryArray = countries.filter(function (c) { return c.alpha2 === regionCode; });\n    var country = userCountryArray.length > 0 ? userCountryArray[0] : undefined;\n    return country ? country.emoji : '';\n}\nexports.getCountryEmoji = getCountryEmoji;\nfunction getCountryCode(e164PhoneNumber) {\n    if (!e164PhoneNumber) {\n        return null;\n    }\n    try {\n        return phoneUtil.parse(e164PhoneNumber).getCountryCode();\n    }\n    catch (error) {\n        console.debug(\"getCountryCode, number: \" + e164PhoneNumber + \", error: \" + error);\n        return null;\n    }\n}\nexports.getCountryCode = getCountryCode;\nfunction getRegionCode(e164PhoneNumber) {\n    if (!e164PhoneNumber) {\n        return null;\n    }\n    try {\n        return phoneUtil.getRegionCodeForNumber(phoneUtil.parse(e164PhoneNumber));\n    }\n    catch (error) {\n        console.debug(\"getRegionCodeForNumber, number: \" + e164PhoneNumber + \", error: \" + error);\n        return null;\n    }\n}\nexports.getRegionCode = getRegionCode;\nfunction getRegionCodeFromCountryCode(countryCode) {\n    if (!countryCode) {\n        return null;\n    }\n    try {\n        return phoneUtil.getRegionCodeForCountryCode(parseInt(countryCode, 10));\n    }\n    catch (error) {\n        console.debug(\"getRegionCodeFromCountryCode, countrycode: \" + countryCode + \", error: \" + error);\n        return null;\n    }\n}\nexports.getRegionCodeFromCountryCode = getRegionCodeFromCountryCode;\nfunction getDisplayPhoneNumber(phoneNumber, defaultCountryCode) {\n    var phoneDetails = parsePhoneNumber(phoneNumber, defaultCountryCode);\n    if (phoneDetails) {\n        return phoneDetails.displayNumber;\n    }\n    else {\n        // Fallback to input instead of showing nothing for invalid numbers\n        return phoneNumber;\n    }\n}\nexports.getDisplayPhoneNumber = getDisplayPhoneNumber;\nfunction getDisplayNumberInternational(e164PhoneNumber) {\n    var countryCode = getCountryCode(e164PhoneNumber);\n    var phoneDetails = parsePhoneNumber(e164PhoneNumber, (countryCode || '').toString());\n    if (phoneDetails) {\n        return phoneDetails.displayNumberInternational;\n    }\n    else {\n        // Fallback to input instead of showing nothing for invalid numbers\n        return e164PhoneNumber;\n    }\n}\nexports.getDisplayNumberInternational = getDisplayNumberInternational;\nfunction getE164DisplayNumber(e164PhoneNumber) {\n    var countryCode = getCountryCode(e164PhoneNumber);\n    return getDisplayPhoneNumber(e164PhoneNumber, (countryCode || '').toString());\n}\nexports.getE164DisplayNumber = getE164DisplayNumber;\nfunction getE164Number(phoneNumber, defaultCountryCode) {\n    var phoneDetails = parsePhoneNumber(phoneNumber, defaultCountryCode);\n    if (phoneDetails && (0, phoneNumbers_1.isE164Number)(phoneDetails.e164Number)) {\n        return phoneDetails.e164Number;\n    }\n    else {\n        return null;\n    }\n}\nexports.getE164Number = getE164Number;\n// Actually runs through the parsing instead of using a regex\nfunction isE164NumberStrict(phoneNumber) {\n    try {\n        var parsedPhoneNumber = phoneUtil.parse(phoneNumber);\n        if (!phoneUtil.isValidNumber(parsedPhoneNumber)) {\n            return false;\n        }\n        return phoneUtil.format(parsedPhoneNumber, google_libphonenumber_1.PhoneNumberFormat.E164) === phoneNumber;\n    }\n    catch (_a) {\n        return false;\n    }\n}\nexports.isE164NumberStrict = isE164NumberStrict;\nfunction parsePhoneNumber(phoneNumberRaw, defaultCountryCode) {\n    try {\n        if (!phoneNumberRaw || phoneNumberRaw.length < MIN_PHONE_LENGTH) {\n            return null;\n        }\n        var defaultRegionCode = defaultCountryCode\n            ? getRegionCodeFromCountryCode(defaultCountryCode)\n            : null;\n        var parsedNumberUnfixed = phoneUtil.parse(phoneNumberRaw, defaultRegionCode || undefined);\n        var parsedCountryCode = parsedNumberUnfixed.getCountryCode();\n        var parsedRegionCode = phoneUtil.getRegionCodeForNumber(parsedNumberUnfixed);\n        var parsedNumber = handleSpecialCasesForParsing(parsedNumberUnfixed, parsedCountryCode, parsedRegionCode);\n        if (!parsedNumber) {\n            return null;\n        }\n        var isValid = phoneUtil.isValidNumberForRegion(parsedNumber, parsedRegionCode);\n        return isValid\n            ? {\n                e164Number: phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.E164),\n                displayNumber: handleSpecialCasesForDisplay(parsedNumber, parsedCountryCode),\n                displayNumberInternational: phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.INTERNATIONAL),\n                countryCode: parsedCountryCode,\n                regionCode: parsedRegionCode,\n            }\n            : null;\n    }\n    catch (error) {\n        console.debug(\"phoneNumbers/parsePhoneNumber/Failed to parse phone number, error: \" + error);\n        return null;\n    }\n}\nexports.parsePhoneNumber = parsePhoneNumber;\nfunction handleSpecialCasesForParsing(parsedNumber, countryCode, regionCode) {\n    if (!countryCode || !regionCode) {\n        return parsedNumber;\n    }\n    switch (countryCode) {\n        // Argentina\n        // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#why-is-this-number-from-argentina-ar-or-mexico-mx-not-identified-as-the-right-number-type\n        // https://en.wikipedia.org/wiki/Telephone_numbers_in_Argentina\n        case 54:\n            return prependToFormMobilePhoneNumber(parsedNumber, regionCode, '9');\n        default:\n            return parsedNumber;\n    }\n}\n// TODO(Rossy) Given the inconsistencies of numbers around the world, we should\n// display e164 everywhere to ensure users knows exactly who their sending money to\nfunction handleSpecialCasesForDisplay(parsedNumber, countryCode) {\n    switch (countryCode) {\n        // Argentina\n        // The Google lib formatter incorretly adds '15' to the nationally formatted number for Argentina\n        // However '15' is only needed when calling a mobile from a landline\n        case 54:\n            return phoneUtil\n                .format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.INTERNATIONAL)\n                .replace(/\\+54(\\s)?/, '');\n        case 231:\n            var formatted = phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.NATIONAL);\n            return formatted && formatted[0] === '0' ? formatted.slice(1) : formatted;\n        default:\n            return phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.NATIONAL);\n    }\n}\n/**\n * Some countries require a prefix before the area code depending on if the number is\n * mobile vs landline and international vs national\n */\nfunction prependToFormMobilePhoneNumber(parsedNumber, regionCode, prefix) {\n    if (phoneUtil.getNumberType(parsedNumber) === google_libphonenumber_1.PhoneNumberType.MOBILE) {\n        return parsedNumber;\n    }\n    var nationalNumber = phoneUtil.format(parsedNumber, google_libphonenumber_1.PhoneNumberFormat.NATIONAL);\n    // Nationally formatted numbers sometimes contain leading 0\n    if (nationalNumber.charAt(0) === '0') {\n        nationalNumber = nationalNumber.slice(1);\n    }\n    // If the number already starts with prefix, don't prepend it again\n    if (nationalNumber.startsWith(prefix)) {\n        return null;\n    }\n    var adjustedNumber = phoneUtil.parse(prefix + nationalNumber, regionCode);\n    return phoneUtil.getNumberType(adjustedNumber) === google_libphonenumber_1.PhoneNumberType.MOBILE ? adjustedNumber : null;\n}\nfunction getExampleNumber(regionCode, useOnlyZeroes, isInternational) {\n    if (useOnlyZeroes === void 0) { useOnlyZeroes = true; }\n    if (isInternational === void 0) { isInternational = false; }\n    var examplePhone = phoneUtil.getExampleNumber(getRegionCodeFromCountryCode(regionCode));\n    if (!examplePhone) {\n        return;\n    }\n    var formatedExample = phoneUtil.format(examplePhone, isInternational ? google_libphonenumber_1.PhoneNumberFormat.INTERNATIONAL : google_libphonenumber_1.PhoneNumberFormat.NATIONAL);\n    if (useOnlyZeroes) {\n        if (isInternational) {\n            return formatedExample.replace(/(^\\+[0-9]{1,3} |[0-9])/g, function (value, _, i) { return (i ? '0' : value); });\n        }\n        return formatedExample.replace(/[0-9]/g, '0');\n    }\n    return formatedExample;\n}\nexports.getExampleNumber = getExampleNumber;\nexports.PhoneNumberUtils = {\n    getPhoneHash: exports.getPhoneHash,\n    getCountryCode: getCountryCode,\n    getRegionCode: getRegionCode,\n    getDisplayPhoneNumber: getDisplayPhoneNumber,\n    getE164Number: getE164Number,\n    isE164Number: phoneNumbers_1.isE164Number,\n    parsePhoneNumber: parsePhoneNumber,\n};\n//# sourceMappingURL=phoneNumbers.js.map"]},"metadata":{},"sourceType":"script"}