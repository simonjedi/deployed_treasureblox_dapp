import { IEvents } from "@walletconnect/jsonrpc-types";
import { Logger } from "pino";
import { IClient } from "./client";
import { Reason } from "./misc";
import { RelayerTypes } from "./relayer";
export declare abstract class ISubscriptionTopicMap {
    map: Map<string, string[]>;
    abstract readonly topics: string[];
    abstract set(topic: string, id: string): void;
    abstract get(topic: string): string[];
    abstract exists(topic: string, id: string): boolean;
    abstract delete(topic: string, id?: string): void;
    abstract clear(): void;
}
export interface SubscriptionParams extends RelayerTypes.SubscribeOptions {
    id: string;
    topic: string;
    expiry: number;
}
export declare namespace SubscriptionEvent {
    type Created = SubscriptionParams;
    interface Deleted extends SubscriptionParams {
        reason: Reason;
    }
    type Expired = Deleted;
}
export declare abstract class ISubscription extends IEvents {
    client: IClient;
    logger: Logger;
    abstract subscriptions: Map<string, SubscriptionParams>;
    abstract topicMap: ISubscriptionTopicMap;
    abstract readonly length: number;
    abstract readonly ids: string[];
    abstract readonly values: SubscriptionParams[];
    abstract readonly topics: string[];
    abstract name: string;
    abstract readonly context: string;
    constructor(client: IClient, logger: Logger);
    abstract init(): Promise<void>;
    abstract set(id: string, subscription: SubscriptionParams): Promise<void>;
    abstract get(id: string): Promise<SubscriptionParams>;
    abstract delete(id: string, reason: Reason): Promise<void>;
    abstract exists(id: string, topic: string): Promise<boolean>;
    abstract enable(): Promise<void>;
    abstract disable(): Promise<void>;
}
//# sourceMappingURL=subscription.d.ts.map