{"ast":null,"code":"'use strict';\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RPCMethodMap = void 0;\n\nconst utils = require(\"../utils\");\n\nconst devkit_1 = require(\"@meterio/devkit\");\n\nconst simple_http_1 = require(\"./simple-http\");\n\nconst debug = require('debug')('meter:http-provider:rpc');\n\nexports.RPCMethodMap = new Map();\n\nconst HTTPPostProcessor = function (res) {\n  if (res.Code === 0) {\n    return Promise.reject(new Error(`[meter-provider] Invalid response, check the host`));\n  }\n\n  if (res.Code !== 200) {\n    return Promise.reject(new Error(res.Body ? res.Body : '[meter-provider] Invalid response code from provider: ' + res.Code));\n  }\n\n  return Promise.resolve(res.Body);\n};\n\nexports.RPCMethodMap.set('eth_getBlockByNumber', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const URL = host + '/blocks/' + utils.fromETHBlockNumber(rpc.params[0]);\n    const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n    return rpc.makeResult(res);\n  });\n});\nexports.RPCMethodMap.set('eth_getBlockByHash', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const URL = host + '/blocks/' + rpc.params[0];\n    const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n    return rpc.makeResult(res);\n  });\n});\nexports.RPCMethodMap.set('eth_blockNumber', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const URL = host + '/blocks/best';\n    const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n    return rpc.makeResult(!res ? null : res.number);\n  });\n});\nexports.RPCMethodMap.set('eth_getBalance', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const URL = host + '/accounts/' + rpc.params[0] + '?revision=' + utils.fromETHBlockNumberOrHash(rpc.params[1]);\n    const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n    return rpc.makeResult(!res ? null : res.balance);\n  });\n});\nexports.RPCMethodMap.set('eth_getEnergy', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const URL = host + '/accounts/' + rpc.params[0] + '?revision=' + utils.fromETHBlockNumberOrHash(rpc.params[1]);\n    const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n    return rpc.makeResult(!res ? null : res.energy);\n  });\n});\nexports.RPCMethodMap.set('eth_getCode', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const URL = host + '/accounts/' + rpc.params[0] + '/code?revision=' + utils.fromETHBlockNumberOrHash(rpc.params[1]);\n    const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n    return rpc.makeResult(!res ? null : res.code);\n  });\n});\nexports.RPCMethodMap.set('eth_getStorageAt', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const URL = host + '/accounts/' + rpc.params[0] + '/storage/' + utils.leftPadToBytes32(rpc.params[1]) + '?revision=' + utils.fromETHBlockNumberOrHash(rpc.params[2]);\n    const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n    return rpc.makeResult(!res ? null : res.value);\n  });\n});\nexports.RPCMethodMap.set('eth_sendRawTransaction', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const URL = host + '/transactions';\n    const reqBody = {\n      raw: rpc.params[0]\n    };\n    const res = yield simple_http_1.HTTP.post(URL, reqBody, timeout).then(HTTPPostProcessor);\n    return rpc.makeResult(!res ? null : res.id);\n  });\n});\nexports.RPCMethodMap.set('eth_getTransactionByHash', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const URL = host + '/transactions/' + rpc.params[0];\n    const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n\n    if (!res) {\n      return rpc.makeResult(null);\n    }\n\n    res.blockNumber = res.meta.blockNumber;\n    return rpc.makeResult(res);\n  });\n});\nexports.RPCMethodMap.set('eth_getTransactionReceipt', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const URL = host + '/transactions/' + rpc.params[0] + '/receipt';\n    const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n\n    if (!res) {\n      return rpc.makeResult(null);\n    }\n\n    res.blockNumber = res.meta.blockNumber;\n    res.blockHash = res.meta.blockID;\n    res.transactionHash = res.meta.txID; // For compatible with ethereum's receipt\n\n    if (res.reverted) {\n      res.status = '0x0';\n    } else {\n      res.status = '0x1';\n    }\n\n    if (res.outputs.length === 1) {\n      res.contractAddress = res.outputs[0].contractAddress;\n    }\n\n    return rpc.makeResult(res);\n  });\n});\nexports.RPCMethodMap.set('eth_call', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let extraURI = '';\n\n    if (rpc.params[0].to) {\n      extraURI = '/' + rpc.params[0].to;\n    }\n\n    extraURI += '?revision=' + utils.fromETHBlockNumberOrHash(rpc.params[1]);\n    const URL = host + '/accounts' + extraURI;\n    const reqBody = {\n      value: rpc.params[0].value || '',\n      data: rpc.params[0].data || '0x',\n      gasPrice: rpc.params[0].gasPrice || ''\n    };\n\n    if (rpc.params[0].gas) {\n      if (typeof rpc.params[0].gas === 'number') {\n        reqBody.gas = rpc.params[0].gas;\n      } else {\n        reqBody.gas = parseInt(utils.sanitizeHex(rpc.params[0].gas), 16);\n      }\n    }\n\n    if (rpc.params[0].from) {\n      reqBody.caller = rpc.params[0].from;\n    }\n\n    const res = yield simple_http_1.HTTP.post(URL, reqBody, timeout).then(HTTPPostProcessor);\n    debug('eth_call returns', res);\n\n    if (!res) {\n      return rpc.makeResult(null);\n    } else {\n      if (res.reverted || res.vmError) {\n        if (res.data && res.data.startsWith('0x08c379a0')) {\n          return rpc.makeError('VM reverted: ' + require('web3-eth-abi').decodeParameter('string', res.data.replace(/^0x08c379a0/i, '')));\n        } else {\n          return rpc.makeError('VM executing failed' + (res.vmError ? ': ' + res.vmError : ''));\n        }\n      } else {\n        return rpc.makeResult(res.data === '0x' ? '' : res.data);\n      }\n    }\n  });\n});\nexports.RPCMethodMap.set('eth_estimateGas', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const extraURI = '?revision=' + utils.fromETHBlockNumberOrHash(rpc.params[1]);\n    const URL = host + '/accounts/*' + extraURI;\n    const reqBody = {\n      clauses: [{\n        to: rpc.params[0].to || null,\n        value: rpc.params[0].value || '',\n        data: rpc.params[0].data || '0x',\n        token: rpc.params[0].token || 0\n      }],\n      gasPrice: rpc.params[0].gasPrice || undefined\n    };\n\n    if (rpc.params[0].gas) {\n      if (typeof rpc.params[0].gas === 'number') {\n        reqBody.gas = rpc.params[0].gas;\n      } else {\n        reqBody.gas = parseInt(utils.sanitizeHex(rpc.params[0].gas), 16);\n      }\n    }\n\n    if (rpc.params[0].from) {\n      reqBody.caller = rpc.params[0].from;\n    }\n\n    const res = yield simple_http_1.HTTP.post(URL, reqBody, timeout).then(HTTPPostProcessor);\n\n    if (!res || res.length === 0) {\n      return rpc.makeResult(null);\n    } else {\n      const result = res[0];\n\n      if (result.reverted || result.vmError) {\n        if (result.data && result.data.startsWith('0x08c379a0')) {\n          return rpc.makeError('Gas estimation failed with VM reverted: ' + require('web3-eth-abi').decodeParameter('string', result.data.replace(/^0x08c379a0/i, '')));\n        } else {\n          return rpc.makeError('Gas estimation failed' + (result.vmError ? ': ' + result.vmError : ''));\n        }\n      } else {\n        debug('VM gas:', result.gasUsed); // ignore the overflow since block gas limit is uint64 and JavaScript's max number is 2^53\n\n        const intrinsicGas = devkit_1.Transaction.intrinsicGas(reqBody.clauses); // increase vm gas by 15000 for safe since it's estimated from current block state, final state for the transaction is not determined for now\n\n        return rpc.makeResult(intrinsicGas + (result.gasUsed ? result.gasUsed + 15000 : 0));\n      }\n    }\n  });\n});\nexports.RPCMethodMap.set('eth_getLogs', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let query = '';\n\n    if (rpc.params[0].address) {\n      query = '&address=' + rpc.params[0].address;\n    }\n\n    if (rpc.params[0].order && (rpc.params[0].order.toUpperCase() === 'ASC' || rpc.params[0].order.toUpperCase() === 'DESC')) {\n      query += '&order=' + rpc.params[0].order.toUpperCase();\n    }\n\n    query = query.replace('&', '?');\n    const URL = host + '/logs/events' + query;\n    const reqBody = utils.formatLogQuery(rpc.params[0]);\n    const res = yield simple_http_1.HTTP.post(URL, reqBody, timeout).then(HTTPPostProcessor);\n\n    if (!res) {\n      return rpc.makeResult(null);\n    }\n\n    for (const item of res) {\n      item.blockNumber = item.meta.blockNumber;\n      item.blockHash = item.meta.blockID;\n      item.transactionHash = item.meta.txID;\n    }\n\n    return rpc.makeResult(res);\n  });\n});\nexports.RPCMethodMap.set('eth_getBlockRef', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const URL = host + '/blocks/best';\n    const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n\n    if (!res || !res.id) {\n      return rpc.makeResult(null);\n    }\n\n    return rpc.makeResult(res.id.substr(0, 18));\n  });\n});\nexports.RPCMethodMap.set('eth_getChainTag', function (rpc, host, timeout) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const URL = host + '/blocks/0';\n    const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n\n    if (!res || !res.id || res.id.length !== 66) {\n      return rpc.makeResult(null);\n    }\n\n    return rpc.makeResult('0x' + res.id.substr(64, 2));\n  });\n});","map":{"version":3,"sources":["../../src/provider/rpc-methods.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["'use strict';\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RPCMethodMap = void 0;\nconst utils = require(\"../utils\");\nconst devkit_1 = require(\"@meterio/devkit\");\nconst simple_http_1 = require(\"./simple-http\");\nconst debug = require('debug')('meter:http-provider:rpc');\nexports.RPCMethodMap = new Map();\nconst HTTPPostProcessor = function (res) {\n    if (res.Code === 0) {\n        return Promise.reject(new Error(`[meter-provider] Invalid response, check the host`));\n    }\n    if (res.Code !== 200) {\n        return Promise.reject(new Error(res.Body ? res.Body : ('[meter-provider] Invalid response code from provider: ' + res.Code)));\n    }\n    return Promise.resolve(res.Body);\n};\nexports.RPCMethodMap.set('eth_getBlockByNumber', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const URL = host + '/blocks/' + utils.fromETHBlockNumber(rpc.params[0]);\n        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n        return rpc.makeResult(res);\n    });\n});\nexports.RPCMethodMap.set('eth_getBlockByHash', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const URL = host + '/blocks/' + rpc.params[0];\n        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n        return rpc.makeResult(res);\n    });\n});\nexports.RPCMethodMap.set('eth_blockNumber', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const URL = host + '/blocks/best';\n        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n        return rpc.makeResult(!res ? null : res.number);\n    });\n});\nexports.RPCMethodMap.set('eth_getBalance', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const URL = host + '/accounts/' + rpc.params[0] + '?revision=' + utils.fromETHBlockNumberOrHash(rpc.params[1]);\n        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n        return rpc.makeResult(!res ? null : res.balance);\n    });\n});\nexports.RPCMethodMap.set('eth_getEnergy', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const URL = host + '/accounts/' + rpc.params[0] + '?revision=' + utils.fromETHBlockNumberOrHash(rpc.params[1]);\n        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n        return rpc.makeResult(!res ? null : res.energy);\n    });\n});\nexports.RPCMethodMap.set('eth_getCode', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const URL = host + '/accounts/' + rpc.params[0] + '/code?revision=' + utils.fromETHBlockNumberOrHash(rpc.params[1]);\n        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n        return rpc.makeResult(!res ? null : res.code);\n    });\n});\nexports.RPCMethodMap.set('eth_getStorageAt', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const URL = host + '/accounts/' + rpc.params[0] + '/storage/' + utils.leftPadToBytes32(rpc.params[1]) + '?revision=' + utils.fromETHBlockNumberOrHash(rpc.params[2]);\n        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n        return rpc.makeResult(!res ? null : res.value);\n    });\n});\nexports.RPCMethodMap.set('eth_sendRawTransaction', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const URL = host + '/transactions';\n        const reqBody = {\n            raw: rpc.params[0],\n        };\n        const res = yield simple_http_1.HTTP.post(URL, reqBody, timeout).then(HTTPPostProcessor);\n        return rpc.makeResult(!res ? null : res.id);\n    });\n});\nexports.RPCMethodMap.set('eth_getTransactionByHash', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const URL = host + '/transactions/' + rpc.params[0];\n        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n        if (!res) {\n            return rpc.makeResult(null);\n        }\n        res.blockNumber = res.meta.blockNumber;\n        return rpc.makeResult(res);\n    });\n});\nexports.RPCMethodMap.set('eth_getTransactionReceipt', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const URL = host + '/transactions/' + rpc.params[0] + '/receipt';\n        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n        if (!res) {\n            return rpc.makeResult(null);\n        }\n        res.blockNumber = res.meta.blockNumber;\n        res.blockHash = res.meta.blockID;\n        res.transactionHash = res.meta.txID;\n        // For compatible with ethereum's receipt\n        if (res.reverted) {\n            res.status = '0x0';\n        }\n        else {\n            res.status = '0x1';\n        }\n        if (res.outputs.length === 1) {\n            res.contractAddress = res.outputs[0].contractAddress;\n        }\n        return rpc.makeResult(res);\n    });\n});\nexports.RPCMethodMap.set('eth_call', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let extraURI = '';\n        if (rpc.params[0].to) {\n            extraURI = '/' + rpc.params[0].to;\n        }\n        extraURI += '?revision=' + utils.fromETHBlockNumberOrHash(rpc.params[1]);\n        const URL = host + '/accounts' + extraURI;\n        const reqBody = {\n            value: rpc.params[0].value || '',\n            data: rpc.params[0].data || '0x',\n            gasPrice: rpc.params[0].gasPrice || '',\n        };\n        if (rpc.params[0].gas) {\n            if (typeof rpc.params[0].gas === 'number') {\n                reqBody.gas = rpc.params[0].gas;\n            }\n            else {\n                reqBody.gas = parseInt(utils.sanitizeHex(rpc.params[0].gas), 16);\n            }\n        }\n        if (rpc.params[0].from) {\n            reqBody.caller = rpc.params[0].from;\n        }\n        const res = yield simple_http_1.HTTP.post(URL, reqBody, timeout).then(HTTPPostProcessor);\n        debug('eth_call returns', res);\n        if (!res) {\n            return rpc.makeResult(null);\n        }\n        else {\n            if (res.reverted || res.vmError) {\n                if (res.data && res.data.startsWith('0x08c379a0')) {\n                    return rpc.makeError('VM reverted: ' + require('web3-eth-abi').decodeParameter('string', res.data.replace(/^0x08c379a0/i, '')));\n                }\n                else {\n                    return rpc.makeError('VM executing failed' + (res.vmError ? ': ' + res.vmError : ''));\n                }\n            }\n            else {\n                return rpc.makeResult(res.data === '0x' ? '' : res.data);\n            }\n        }\n    });\n});\nexports.RPCMethodMap.set('eth_estimateGas', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const extraURI = '?revision=' + utils.fromETHBlockNumberOrHash(rpc.params[1]);\n        const URL = host + '/accounts/*' + extraURI;\n        const reqBody = {\n            clauses: [{\n                    to: rpc.params[0].to || null,\n                    value: rpc.params[0].value || '',\n                    data: rpc.params[0].data || '0x',\n                    token: rpc.params[0].token || 0,\n                }],\n            gasPrice: rpc.params[0].gasPrice || undefined,\n        };\n        if (rpc.params[0].gas) {\n            if (typeof rpc.params[0].gas === 'number') {\n                reqBody.gas = rpc.params[0].gas;\n            }\n            else {\n                reqBody.gas = parseInt(utils.sanitizeHex(rpc.params[0].gas), 16);\n            }\n        }\n        if (rpc.params[0].from) {\n            reqBody.caller = rpc.params[0].from;\n        }\n        const res = yield simple_http_1.HTTP.post(URL, reqBody, timeout).then(HTTPPostProcessor);\n        if (!res || res.length === 0) {\n            return rpc.makeResult(null);\n        }\n        else {\n            const result = res[0];\n            if (result.reverted || result.vmError) {\n                if (result.data && result.data.startsWith('0x08c379a0')) {\n                    return rpc.makeError('Gas estimation failed with VM reverted: ' + require('web3-eth-abi').decodeParameter('string', result.data.replace(/^0x08c379a0/i, '')));\n                }\n                else {\n                    return rpc.makeError('Gas estimation failed' + (result.vmError ? ': ' + result.vmError : ''));\n                }\n            }\n            else {\n                debug('VM gas:', result.gasUsed);\n                // ignore the overflow since block gas limit is uint64 and JavaScript's max number is 2^53\n                const intrinsicGas = devkit_1.Transaction.intrinsicGas(reqBody.clauses);\n                // increase vm gas by 15000 for safe since it's estimated from current block state, final state for the transaction is not determined for now\n                return rpc.makeResult(intrinsicGas + (result.gasUsed ? (result.gasUsed + 15000) : 0));\n            }\n        }\n    });\n});\nexports.RPCMethodMap.set('eth_getLogs', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let query = '';\n        if (rpc.params[0].address) {\n            query = '&address=' + rpc.params[0].address;\n        }\n        if (rpc.params[0].order && (rpc.params[0].order.toUpperCase() === 'ASC' || rpc.params[0].order.toUpperCase() === 'DESC')) {\n            query += '&order=' + rpc.params[0].order.toUpperCase();\n        }\n        query = query.replace('&', '?');\n        const URL = host + '/logs/events' + query;\n        const reqBody = utils.formatLogQuery(rpc.params[0]);\n        const res = yield simple_http_1.HTTP.post(URL, reqBody, timeout).then(HTTPPostProcessor);\n        if (!res) {\n            return rpc.makeResult(null);\n        }\n        for (const item of res) {\n            item.blockNumber = item.meta.blockNumber;\n            item.blockHash = item.meta.blockID;\n            item.transactionHash = item.meta.txID;\n        }\n        return rpc.makeResult(res);\n    });\n});\nexports.RPCMethodMap.set('eth_getBlockRef', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const URL = host + '/blocks/best';\n        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n        if (!res || !res.id) {\n            return rpc.makeResult(null);\n        }\n        return rpc.makeResult(res.id.substr(0, 18));\n    });\n});\nexports.RPCMethodMap.set('eth_getChainTag', function (rpc, host, timeout) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const URL = host + '/blocks/0';\n        const res = yield simple_http_1.HTTP.get(URL, timeout).then(HTTPPostProcessor);\n        if (!res || !res.id || res.id.length !== 66) {\n            return rpc.makeResult(null);\n        }\n        return rpc.makeResult('0x' + res.id.substr(64, 2));\n    });\n});\n//# sourceMappingURL=data:application/json;base64,"]},"metadata":{},"sourceType":"script"}