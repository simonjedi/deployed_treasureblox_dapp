import { RelayClientMetadata, AppMetadata } from "@walletconnect/types";
export declare const REACT_NATIVE_PRODUCT = "ReactNative";
export declare const ENV_MAP: {
    reactNative: string;
    node: string;
    browser: string;
    unknown: string;
};
export declare const EMPTY_SPACE = " ";
export declare const COLON = ":";
export declare const SLASH = "/";
export declare const DEFAULT_DEPTH = 2;
export declare const ONE_THOUSAND = 1000;
export declare function isNode(): boolean;
export declare function isReactNative(): boolean;
export declare function isBrowser(): boolean;
export declare function getEnvironment(): string;
export declare function appendToQueryString(queryString: string, newQueryParams: any): string;
export declare function getAppMetadata(): AppMetadata | undefined;
export declare function getRelayClientMetadata(protocol: string, version: number): RelayClientMetadata;
export declare function formatRelayRpcUrl(protocol: string, version: number, url: string, apiKey?: string): string;
export declare function assertType(obj: any, key: string, type: string): void;
export declare function parseContextNames(context: string, depth?: number): any[];
export declare function formatMessageContext(context: string): string;
export declare function formatStorageKeyName(context: string): string;
export declare function hasOverlap(a: any[], b: any[]): boolean;
export declare function getLastItems(arr: any[], depth?: number): any[];
export declare function mergeArrays(a: any[], b: any[]): any[];
export declare function mapToObj<T = any>(map: Map<string, T>): Record<string, T>;
export declare function objToMap<T = any>(obj: Record<string, T>): Map<string, T>;
export declare function mapEntries<A = any, B = any>(obj: Record<string, A>, cb: (x: A) => B): Record<string, B>;
export declare const enumify: <T extends {
    [index: string]: U;
}, U extends string>(x: T) => T;
export declare function capitalizeWord(word: string): string;
export declare function capitalize(str: string): string;
export declare function toMiliseconds(seconds: number): number;
export declare function fromMiliseconds(miliseconds: number): number;
export declare function calcExpiry(ttl: number, now?: number): number;
//# sourceMappingURL=misc.d.ts.map