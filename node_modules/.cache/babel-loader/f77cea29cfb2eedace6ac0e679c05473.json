{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport { IJsonRpcHistory } from \"@walletconnect/types\";\nimport { ERROR, formatMessageContext } from \"@walletconnect/utils\";\nimport { formatJsonRpcRequest, isJsonRpcError } from \"@walletconnect/jsonrpc-utils\";\nimport { generateChildLogger, getLoggerContext } from \"@walletconnect/logger\";\nimport { HISTORY_CONTEXT, HISTORY_EVENTS } from \"../constants\";\nexport class JsonRpcHistory extends IJsonRpcHistory {\n  constructor(client, logger) {\n    super(client, logger);\n    this.client = client;\n    this.logger = logger;\n    this.records = new Map();\n    this.events = new EventEmitter();\n    this.name = HISTORY_CONTEXT;\n    this.cached = [];\n    this.client;\n    this.logger = generateChildLogger(logger, this.name);\n    this.registerEventListeners();\n  }\n\n  async init() {\n    this.logger.trace(`Initialized`);\n    await this.initialize();\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get size() {\n    return this.records.size;\n  }\n\n  get keys() {\n    return Array.from(this.records.keys());\n  }\n\n  get values() {\n    return Array.from(this.records.values());\n  }\n\n  get pending() {\n    const requests = [];\n    this.values.forEach(record => {\n      if (typeof record.response !== \"undefined\") return;\n      const requestEvent = {\n        topic: record.topic,\n        request: formatJsonRpcRequest(record.request.method, record.request.params, record.id),\n        chainId: record.chainId\n      };\n      return requests.push(requestEvent);\n    });\n    return requests;\n  }\n\n  async set(topic, request, chainId) {\n    await this.isInitialized();\n    this.logger.debug(`Setting JSON-RPC request history record`);\n    this.logger.trace({\n      type: \"method\",\n      method: \"set\",\n      topic,\n      request,\n      chainId\n    });\n    if (this.records.has(request.id)) return;\n    const record = {\n      id: request.id,\n      topic,\n      request: {\n        method: request.method,\n        params: request.params || null\n      },\n      chainId\n    };\n    this.records.set(record.id, record);\n    this.events.emit(HISTORY_EVENTS.created, record);\n  }\n\n  async resolve(response) {\n    await this.isInitialized();\n    this.logger.debug(`Updating JSON-RPC response history record`);\n    this.logger.trace({\n      type: \"method\",\n      method: \"update\",\n      response\n    });\n    if (!this.records.has(response.id)) return;\n    const record = await this.getRecord(response.id);\n    if (typeof record.response !== \"undefined\") return;\n    record.response = isJsonRpcError(response) ? {\n      error: response.error\n    } : {\n      result: response.result\n    };\n    this.records.set(record.id, record);\n    this.events.emit(HISTORY_EVENTS.updated, record);\n  }\n\n  async get(topic, id) {\n    await this.isInitialized();\n    this.logger.debug(`Getting record`);\n    this.logger.trace({\n      type: \"method\",\n      method: \"get\",\n      topic,\n      id\n    });\n    const record = await this.getRecord(id);\n\n    if (record.topic !== topic) {\n      const error = ERROR.MISMATCHED_TOPIC.format({\n        context: formatMessageContext(this.context),\n        id\n      });\n      throw new Error(error.message);\n    }\n\n    return record;\n  }\n\n  async delete(topic, id) {\n    await this.isInitialized();\n    this.logger.debug(`Deleting record`);\n    this.logger.trace({\n      type: \"method\",\n      method: \"delete\",\n      id\n    });\n    this.values.forEach(record => {\n      if (record.topic === topic) {\n        if (typeof id !== \"undefined\" && record.id !== id) return;\n        this.records.delete(record.id);\n        this.events.emit(HISTORY_EVENTS.deleted, record);\n      }\n    });\n  }\n\n  async exists(topic, id) {\n    await this.isInitialized();\n    if (!this.records.has(id)) return false;\n    const record = await this.getRecord(id);\n    return record.topic === topic;\n  }\n\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n\n  async getRecord(id) {\n    await this.isInitialized();\n    const record = this.records.get(id);\n\n    if (!record) {\n      const error = ERROR.NO_MATCHING_ID.format({\n        context: formatMessageContext(this.context),\n        id\n      });\n      throw new Error(error.message);\n    }\n\n    return record;\n  }\n\n  async persist() {\n    await this.client.storage.setJsonRpcRecords(this.context, this.values);\n    this.events.emit(HISTORY_EVENTS.sync);\n  }\n\n  async restore() {\n    try {\n      const persisted = await this.client.storage.getJsonRpcRecords(this.context);\n      if (typeof persisted === \"undefined\") return;\n      if (!persisted.length) return;\n\n      if (this.records.size) {\n        const error = ERROR.RESTORE_WILL_OVERRIDE.format({\n          context: formatMessageContext(this.context)\n        });\n        this.logger.error(error.message);\n        throw new Error(error.message);\n      }\n\n      this.cached = persisted;\n      this.logger.debug(`Successfully Restored records for ${formatMessageContext(this.context)}`);\n      this.logger.trace({\n        type: \"method\",\n        method: \"restore\",\n        records: this.values\n      });\n    } catch (e) {\n      this.logger.debug(`Failed to Restore records for ${formatMessageContext(this.context)}`);\n      this.logger.error(e);\n    }\n  }\n\n  async initialize() {\n    await this.restore();\n    this.reset();\n    this.onInit();\n  }\n\n  reset() {\n    this.cached.forEach(record => this.records.set(record.id, record));\n  }\n\n  onInit() {\n    this.cached = [];\n    this.events.emit(HISTORY_EVENTS.init);\n  }\n\n  async isInitialized() {\n    if (!this.cached.length) return;\n    return new Promise(resolve => {\n      this.events.once(HISTORY_EVENTS.init, () => resolve());\n    });\n  }\n\n  registerEventListeners() {\n    this.events.on(HISTORY_EVENTS.created, record => {\n      const eventName = HISTORY_EVENTS.created;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        record\n      });\n      this.persist();\n    });\n    this.events.on(HISTORY_EVENTS.updated, record => {\n      const eventName = HISTORY_EVENTS.updated;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        record\n      });\n      this.persist();\n    });\n    this.events.on(HISTORY_EVENTS.deleted, record => {\n      const eventName = HISTORY_EVENTS.deleted;\n      this.logger.info(`Emitting ${eventName}`);\n      this.logger.debug({\n        type: \"event\",\n        event: eventName,\n        record\n      });\n      this.persist();\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/controllers/history.ts"],"names":[],"mappings":"AAAA,SAAS,YAAT,QAA6B,QAA7B;AAEA,SAAkB,eAAlB,QAAsE,sBAAtE;AACA,SAAS,KAAT,EAAgB,oBAAhB,QAA4C,sBAA5C;AACA,SACE,oBADF,EAEE,cAFF,QAKO,8BALP;AAMA,SAAS,mBAAT,EAA8B,gBAA9B,QAAsD,uBAAtD;AAEA,SAAS,eAAT,EAA0B,cAA1B,QAAgD,cAAhD;AAEA,OAAM,MAAO,cAAP,SAA8B,eAA9B,CAA6C;AASjD,EAAA,WAAA,CAAmB,MAAnB,EAA2C,MAA3C,EAAyD;AACvD,UAAM,MAAN,EAAc,MAAd;AADiB,SAAA,MAAA,GAAA,MAAA;AAAwB,SAAA,MAAA,GAAA,MAAA;AARpC,SAAA,OAAA,GAAU,IAAI,GAAJ,EAAV;AAEA,SAAA,MAAA,GAAS,IAAI,YAAJ,EAAT;AAEA,SAAA,IAAA,GAAe,eAAf;AAEC,SAAA,MAAA,GAA0B,EAA1B;AAIN,SAAK,MAAL;AACA,SAAK,MAAL,GAAc,mBAAmB,CAAC,MAAD,EAAS,KAAK,IAAd,CAAjC;AACA,SAAK,sBAAL;AACD;;AAEgB,QAAJ,IAAI,GAAA;AACf,SAAK,MAAL,CAAY,KAAZ,CAAkB,aAAlB;AACA,UAAM,KAAK,UAAL,EAAN;AACD;;AAEU,MAAP,OAAO,GAAA;AACT,WAAO,gBAAgB,CAAC,KAAK,MAAN,CAAvB;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,KAAK,OAAL,CAAa,IAApB;AACD;;AAEO,MAAJ,IAAI,GAAA;AACN,WAAO,KAAK,CAAC,IAAN,CAAW,KAAK,OAAL,CAAa,IAAb,EAAX,CAAP;AACD;;AAES,MAAN,MAAM,GAAA;AACR,WAAO,KAAK,CAAC,IAAN,CAAW,KAAK,OAAL,CAAa,MAAb,EAAX,CAAP;AACD;;AAEU,MAAP,OAAO,GAAA;AACT,UAAM,QAAQ,GAAmB,EAAjC;AACA,SAAK,MAAL,CAAY,OAAZ,CAAoB,MAAM,IAAG;AAC3B,UAAI,OAAO,MAAM,CAAC,QAAd,KAA2B,WAA/B,EAA4C;AAC5C,YAAM,YAAY,GAAiB;AACjC,QAAA,KAAK,EAAE,MAAM,CAAC,KADmB;AAEjC,QAAA,OAAO,EAAE,oBAAoB,CAAC,MAAM,CAAC,OAAP,CAAe,MAAhB,EAAwB,MAAM,CAAC,OAAP,CAAe,MAAvC,EAA+C,MAAM,CAAC,EAAtD,CAFI;AAGjC,QAAA,OAAO,EAAE,MAAM,CAAC;AAHiB,OAAnC;AAKA,aAAO,QAAQ,CAAC,IAAT,CAAc,YAAd,CAAP;AACD,KARD;AASA,WAAO,QAAP;AACD;;AAEe,QAAH,GAAG,CAAC,KAAD,EAAgB,OAAhB,EAAyC,OAAzC,EAAyD;AACvE,UAAM,KAAK,aAAL,EAAN;AACA,SAAK,MAAL,CAAY,KAAZ,CAAkB,yCAAlB;AACA,SAAK,MAAL,CAAY,KAAZ,CAAkB;AAAE,MAAA,IAAI,EAAE,QAAR;AAAkB,MAAA,MAAM,EAAE,KAA1B;AAAiC,MAAA,KAAjC;AAAwC,MAAA,OAAxC;AAAiD,MAAA;AAAjD,KAAlB;AACA,QAAI,KAAK,OAAL,CAAa,GAAb,CAAiB,OAAO,CAAC,EAAzB,CAAJ,EAAkC;AAClC,UAAM,MAAM,GAAkB;AAC5B,MAAA,EAAE,EAAE,OAAO,CAAC,EADgB;AAE5B,MAAA,KAF4B;AAG5B,MAAA,OAAO,EAAE;AAAE,QAAA,MAAM,EAAE,OAAO,CAAC,MAAlB;AAA0B,QAAA,MAAM,EAAE,OAAO,CAAC,MAAR,IAAkB;AAApD,OAHmB;AAI5B,MAAA;AAJ4B,KAA9B;AAMA,SAAK,OAAL,CAAa,GAAb,CAAiB,MAAM,CAAC,EAAxB,EAA4B,MAA5B;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,cAAc,CAAC,OAAhC,EAAyC,MAAzC;AACD;;AAEmB,QAAP,OAAO,CAAC,QAAD,EAA0B;AAC5C,UAAM,KAAK,aAAL,EAAN;AACA,SAAK,MAAL,CAAY,KAAZ,CAAkB,2CAAlB;AACA,SAAK,MAAL,CAAY,KAAZ,CAAkB;AAAE,MAAA,IAAI,EAAE,QAAR;AAAkB,MAAA,MAAM,EAAE,QAA1B;AAAoC,MAAA;AAApC,KAAlB;AACA,QAAI,CAAC,KAAK,OAAL,CAAa,GAAb,CAAiB,QAAQ,CAAC,EAA1B,CAAL,EAAoC;AACpC,UAAM,MAAM,GAAG,MAAM,KAAK,SAAL,CAAe,QAAQ,CAAC,EAAxB,CAArB;AACA,QAAI,OAAO,MAAM,CAAC,QAAd,KAA2B,WAA/B,EAA4C;AAC5C,IAAA,MAAM,CAAC,QAAP,GAAkB,cAAc,CAAC,QAAD,CAAd,GACd;AAAE,MAAA,KAAK,EAAE,QAAQ,CAAC;AAAlB,KADc,GAEd;AAAE,MAAA,MAAM,EAAE,QAAQ,CAAC;AAAnB,KAFJ;AAGA,SAAK,OAAL,CAAa,GAAb,CAAiB,MAAM,CAAC,EAAxB,EAA4B,MAA5B;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,cAAc,CAAC,OAAhC,EAAyC,MAAzC;AACD;;AAEe,QAAH,GAAG,CAAC,KAAD,EAAgB,EAAhB,EAA0B;AACxC,UAAM,KAAK,aAAL,EAAN;AACA,SAAK,MAAL,CAAY,KAAZ,CAAkB,gBAAlB;AACA,SAAK,MAAL,CAAY,KAAZ,CAAkB;AAAE,MAAA,IAAI,EAAE,QAAR;AAAkB,MAAA,MAAM,EAAE,KAA1B;AAAiC,MAAA,KAAjC;AAAwC,MAAA;AAAxC,KAAlB;AACA,UAAM,MAAM,GAAG,MAAM,KAAK,SAAL,CAAe,EAAf,CAArB;;AACA,QAAI,MAAM,CAAC,KAAP,KAAiB,KAArB,EAA4B;AAC1B,YAAM,KAAK,GAAG,KAAK,CAAC,gBAAN,CAAuB,MAAvB,CAA8B;AAC1C,QAAA,OAAO,EAAE,oBAAoB,CAAC,KAAK,OAAN,CADa;AAE1C,QAAA;AAF0C,OAA9B,CAAd;AAMA,YAAM,IAAI,KAAJ,CAAU,KAAK,CAAC,OAAhB,CAAN;AACD;;AACD,WAAO,MAAP;AACD;;AAEkB,QAAN,MAAM,CAAC,KAAD,EAAgB,EAAhB,EAA2B;AAC5C,UAAM,KAAK,aAAL,EAAN;AACA,SAAK,MAAL,CAAY,KAAZ,CAAkB,iBAAlB;AACA,SAAK,MAAL,CAAY,KAAZ,CAAkB;AAAE,MAAA,IAAI,EAAE,QAAR;AAAkB,MAAA,MAAM,EAAE,QAA1B;AAAoC,MAAA;AAApC,KAAlB;AACA,SAAK,MAAL,CAAY,OAAZ,CAAqB,MAAD,IAA0B;AAC5C,UAAI,MAAM,CAAC,KAAP,KAAiB,KAArB,EAA4B;AAC1B,YAAI,OAAO,EAAP,KAAc,WAAd,IAA6B,MAAM,CAAC,EAAP,KAAc,EAA/C,EAAmD;AACnD,aAAK,OAAL,CAAa,MAAb,CAAoB,MAAM,CAAC,EAA3B;AACA,aAAK,MAAL,CAAY,IAAZ,CAAiB,cAAc,CAAC,OAAhC,EAAyC,MAAzC;AACD;AACF,KAND;AAOD;;AAEkB,QAAN,MAAM,CAAC,KAAD,EAAgB,EAAhB,EAA0B;AAC3C,UAAM,KAAK,aAAL,EAAN;AACA,QAAI,CAAC,KAAK,OAAL,CAAa,GAAb,CAAiB,EAAjB,CAAL,EAA2B,OAAO,KAAP;AAC3B,UAAM,MAAM,GAAG,MAAM,KAAK,SAAL,CAAe,EAAf,CAArB;AACA,WAAO,MAAM,CAAC,KAAP,KAAiB,KAAxB;AACD;;AAEM,EAAA,EAAE,CAAC,KAAD,EAAgB,QAAhB,EAA6B;AACpC,SAAK,MAAL,CAAY,EAAZ,CAAe,KAAf,EAAsB,QAAtB;AACD;;AAEM,EAAA,IAAI,CAAC,KAAD,EAAgB,QAAhB,EAA6B;AACtC,SAAK,MAAL,CAAY,IAAZ,CAAiB,KAAjB,EAAwB,QAAxB;AACD;;AAEM,EAAA,GAAG,CAAC,KAAD,EAAgB,QAAhB,EAA6B;AACrC,SAAK,MAAL,CAAY,GAAZ,CAAgB,KAAhB,EAAuB,QAAvB;AACD;;AAEM,EAAA,cAAc,CAAC,KAAD,EAAgB,QAAhB,EAA6B;AAChD,SAAK,MAAL,CAAY,cAAZ,CAA2B,KAA3B,EAAkC,QAAlC;AACD;;AAIsB,QAAT,SAAS,CAAC,EAAD,EAAW;AAChC,UAAM,KAAK,aAAL,EAAN;AACA,UAAM,MAAM,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,EAAjB,CAAf;;AACA,QAAI,CAAC,MAAL,EAAa;AACX,YAAM,KAAK,GAAG,KAAK,CAAC,cAAN,CAAqB,MAArB,CAA4B;AACxC,QAAA,OAAO,EAAE,oBAAoB,CAAC,KAAK,OAAN,CADW;AAExC,QAAA;AAFwC,OAA5B,CAAd;AAMA,YAAM,IAAI,KAAJ,CAAU,KAAK,CAAC,OAAhB,CAAN;AACD;;AACD,WAAO,MAAP;AACD;;AAEoB,QAAP,OAAO,GAAA;AACnB,UAAM,KAAK,MAAL,CAAY,OAAZ,CAAoB,iBAApB,CAAsC,KAAK,OAA3C,EAAoD,KAAK,MAAzD,CAAN;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,cAAc,CAAC,IAAhC;AACD;;AAEoB,QAAP,OAAO,GAAA;AACnB,QAAI;AACF,YAAM,SAAS,GAAG,MAAM,KAAK,MAAL,CAAY,OAAZ,CAAoB,iBAApB,CAAsC,KAAK,OAA3C,CAAxB;AACA,UAAI,OAAO,SAAP,KAAqB,WAAzB,EAAsC;AACtC,UAAI,CAAC,SAAS,CAAC,MAAf,EAAuB;;AACvB,UAAI,KAAK,OAAL,CAAa,IAAjB,EAAuB;AACrB,cAAM,KAAK,GAAG,KAAK,CAAC,qBAAN,CAA4B,MAA5B,CAAmC;AAC/C,UAAA,OAAO,EAAE,oBAAoB,CAAC,KAAK,OAAN;AADkB,SAAnC,CAAd;AAGA,aAAK,MAAL,CAAY,KAAZ,CAAkB,KAAK,CAAC,OAAxB;AACA,cAAM,IAAI,KAAJ,CAAU,KAAK,CAAC,OAAhB,CAAN;AACD;;AACD,WAAK,MAAL,GAAc,SAAd;AACA,WAAK,MAAL,CAAY,KAAZ,CAAkB,qCAAqC,oBAAoB,CAAC,KAAK,OAAN,CAAc,EAAzF;AACA,WAAK,MAAL,CAAY,KAAZ,CAAkB;AAAE,QAAA,IAAI,EAAE,QAAR;AAAkB,QAAA,MAAM,EAAE,SAA1B;AAAqC,QAAA,OAAO,EAAE,KAAK;AAAnD,OAAlB;AACD,KAdD,CAcE,OAAO,CAAP,EAAU;AACV,WAAK,MAAL,CAAY,KAAZ,CAAkB,iCAAiC,oBAAoB,CAAC,KAAK,OAAN,CAAc,EAArF;AACA,WAAK,MAAL,CAAY,KAAZ,CAAkB,CAAlB;AACD;AACF;;AAEuB,QAAV,UAAU,GAAA;AACtB,UAAM,KAAK,OAAL,EAAN;AACA,SAAK,KAAL;AACA,SAAK,MAAL;AACD;;AAEO,EAAA,KAAK,GAAA;AACX,SAAK,MAAL,CAAY,OAAZ,CAAoB,MAAM,IAAI,KAAK,OAAL,CAAa,GAAb,CAAiB,MAAM,CAAC,EAAxB,EAA4B,MAA5B,CAA9B;AACD;;AAEO,EAAA,MAAM,GAAA;AACZ,SAAK,MAAL,GAAc,EAAd;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,cAAc,CAAC,IAAhC;AACD;;AAE0B,QAAb,aAAa,GAAA;AACzB,QAAI,CAAC,KAAK,MAAL,CAAY,MAAjB,EAAyB;AACzB,WAAO,IAAI,OAAJ,CAAY,OAAO,IAAG;AAC3B,WAAK,MAAL,CAAY,IAAZ,CAAiB,cAAc,CAAC,IAAhC,EAAsC,MAAM,OAAO,EAAnD;AACD,KAFM,CAAP;AAGD;;AAEO,EAAA,sBAAsB,GAAA;AAC5B,SAAK,MAAL,CAAY,EAAZ,CAAe,cAAc,CAAC,OAA9B,EAAwC,MAAD,IAA0B;AAC/D,YAAM,SAAS,GAAG,cAAc,CAAC,OAAjC;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,YAAY,SAAS,EAAtC;AACA,WAAK,MAAL,CAAY,KAAZ,CAAkB;AAAE,QAAA,IAAI,EAAE,OAAR;AAAiB,QAAA,KAAK,EAAE,SAAxB;AAAmC,QAAA;AAAnC,OAAlB;AACA,WAAK,OAAL;AACD,KALD;AAMA,SAAK,MAAL,CAAY,EAAZ,CAAe,cAAc,CAAC,OAA9B,EAAwC,MAAD,IAA0B;AAC/D,YAAM,SAAS,GAAG,cAAc,CAAC,OAAjC;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,YAAY,SAAS,EAAtC;AACA,WAAK,MAAL,CAAY,KAAZ,CAAkB;AAAE,QAAA,IAAI,EAAE,OAAR;AAAiB,QAAA,KAAK,EAAE,SAAxB;AAAmC,QAAA;AAAnC,OAAlB;AACA,WAAK,OAAL;AACD,KALD;AAOA,SAAK,MAAL,CAAY,EAAZ,CAAe,cAAc,CAAC,OAA9B,EAAwC,MAAD,IAA0B;AAC/D,YAAM,SAAS,GAAG,cAAc,CAAC,OAAjC;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,YAAY,SAAS,EAAtC;AACA,WAAK,MAAL,CAAY,KAAZ,CAAkB;AAAE,QAAA,IAAI,EAAE,OAAR;AAAiB,QAAA,KAAK,EAAE,SAAxB;AAAmC,QAAA;AAAnC,OAAlB;AACA,WAAK,OAAL;AACD,KALD;AAMD;;AA1NgD","sourceRoot":"","sourcesContent":["import { EventEmitter } from \"events\";\nimport { IJsonRpcHistory } from \"@walletconnect/types\";\nimport { ERROR, formatMessageContext } from \"@walletconnect/utils\";\nimport { formatJsonRpcRequest, isJsonRpcError, } from \"@walletconnect/jsonrpc-utils\";\nimport { generateChildLogger, getLoggerContext } from \"@walletconnect/logger\";\nimport { HISTORY_CONTEXT, HISTORY_EVENTS } from \"../constants\";\nexport class JsonRpcHistory extends IJsonRpcHistory {\n    constructor(client, logger) {\n        super(client, logger);\n        this.client = client;\n        this.logger = logger;\n        this.records = new Map();\n        this.events = new EventEmitter();\n        this.name = HISTORY_CONTEXT;\n        this.cached = [];\n        this.client;\n        this.logger = generateChildLogger(logger, this.name);\n        this.registerEventListeners();\n    }\n    async init() {\n        this.logger.trace(`Initialized`);\n        await this.initialize();\n    }\n    get context() {\n        return getLoggerContext(this.logger);\n    }\n    get size() {\n        return this.records.size;\n    }\n    get keys() {\n        return Array.from(this.records.keys());\n    }\n    get values() {\n        return Array.from(this.records.values());\n    }\n    get pending() {\n        const requests = [];\n        this.values.forEach(record => {\n            if (typeof record.response !== \"undefined\")\n                return;\n            const requestEvent = {\n                topic: record.topic,\n                request: formatJsonRpcRequest(record.request.method, record.request.params, record.id),\n                chainId: record.chainId,\n            };\n            return requests.push(requestEvent);\n        });\n        return requests;\n    }\n    async set(topic, request, chainId) {\n        await this.isInitialized();\n        this.logger.debug(`Setting JSON-RPC request history record`);\n        this.logger.trace({ type: \"method\", method: \"set\", topic, request, chainId });\n        if (this.records.has(request.id))\n            return;\n        const record = {\n            id: request.id,\n            topic,\n            request: { method: request.method, params: request.params || null },\n            chainId,\n        };\n        this.records.set(record.id, record);\n        this.events.emit(HISTORY_EVENTS.created, record);\n    }\n    async resolve(response) {\n        await this.isInitialized();\n        this.logger.debug(`Updating JSON-RPC response history record`);\n        this.logger.trace({ type: \"method\", method: \"update\", response });\n        if (!this.records.has(response.id))\n            return;\n        const record = await this.getRecord(response.id);\n        if (typeof record.response !== \"undefined\")\n            return;\n        record.response = isJsonRpcError(response)\n            ? { error: response.error }\n            : { result: response.result };\n        this.records.set(record.id, record);\n        this.events.emit(HISTORY_EVENTS.updated, record);\n    }\n    async get(topic, id) {\n        await this.isInitialized();\n        this.logger.debug(`Getting record`);\n        this.logger.trace({ type: \"method\", method: \"get\", topic, id });\n        const record = await this.getRecord(id);\n        if (record.topic !== topic) {\n            const error = ERROR.MISMATCHED_TOPIC.format({\n                context: formatMessageContext(this.context),\n                id,\n            });\n            throw new Error(error.message);\n        }\n        return record;\n    }\n    async delete(topic, id) {\n        await this.isInitialized();\n        this.logger.debug(`Deleting record`);\n        this.logger.trace({ type: \"method\", method: \"delete\", id });\n        this.values.forEach((record) => {\n            if (record.topic === topic) {\n                if (typeof id !== \"undefined\" && record.id !== id)\n                    return;\n                this.records.delete(record.id);\n                this.events.emit(HISTORY_EVENTS.deleted, record);\n            }\n        });\n    }\n    async exists(topic, id) {\n        await this.isInitialized();\n        if (!this.records.has(id))\n            return false;\n        const record = await this.getRecord(id);\n        return record.topic === topic;\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    async getRecord(id) {\n        await this.isInitialized();\n        const record = this.records.get(id);\n        if (!record) {\n            const error = ERROR.NO_MATCHING_ID.format({\n                context: formatMessageContext(this.context),\n                id,\n            });\n            throw new Error(error.message);\n        }\n        return record;\n    }\n    async persist() {\n        await this.client.storage.setJsonRpcRecords(this.context, this.values);\n        this.events.emit(HISTORY_EVENTS.sync);\n    }\n    async restore() {\n        try {\n            const persisted = await this.client.storage.getJsonRpcRecords(this.context);\n            if (typeof persisted === \"undefined\")\n                return;\n            if (!persisted.length)\n                return;\n            if (this.records.size) {\n                const error = ERROR.RESTORE_WILL_OVERRIDE.format({\n                    context: formatMessageContext(this.context),\n                });\n                this.logger.error(error.message);\n                throw new Error(error.message);\n            }\n            this.cached = persisted;\n            this.logger.debug(`Successfully Restored records for ${formatMessageContext(this.context)}`);\n            this.logger.trace({ type: \"method\", method: \"restore\", records: this.values });\n        }\n        catch (e) {\n            this.logger.debug(`Failed to Restore records for ${formatMessageContext(this.context)}`);\n            this.logger.error(e);\n        }\n    }\n    async initialize() {\n        await this.restore();\n        this.reset();\n        this.onInit();\n    }\n    reset() {\n        this.cached.forEach(record => this.records.set(record.id, record));\n    }\n    onInit() {\n        this.cached = [];\n        this.events.emit(HISTORY_EVENTS.init);\n    }\n    async isInitialized() {\n        if (!this.cached.length)\n            return;\n        return new Promise(resolve => {\n            this.events.once(HISTORY_EVENTS.init, () => resolve());\n        });\n    }\n    registerEventListeners() {\n        this.events.on(HISTORY_EVENTS.created, (record) => {\n            const eventName = HISTORY_EVENTS.created;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, record });\n            this.persist();\n        });\n        this.events.on(HISTORY_EVENTS.updated, (record) => {\n            const eventName = HISTORY_EVENTS.updated;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, record });\n            this.persist();\n        });\n        this.events.on(HISTORY_EVENTS.deleted, (record) => {\n            const eventName = HISTORY_EVENTS.deleted;\n            this.logger.info(`Emitting ${eventName}`);\n            this.logger.debug({ type: \"event\", event: eventName, record });\n            this.persist();\n        });\n    }\n}\n//# sourceMappingURL=history.js.map"]},"metadata":{},"sourceType":"module"}