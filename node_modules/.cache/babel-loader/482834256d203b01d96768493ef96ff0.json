{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/SkillSlider/SliderGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState, useEffect } from 'react';\nimport { Tooltip, OverlayTrigger, Form, ButtonGroup, ButtonToolbar, CardColumns, CardGroup, Card, Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './SliderGame.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Results from \"./SliderResults\";\nimport Row from \"./SliderRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SliderGame = props => {\n  _s();\n\n  const [rows, setRows] = useState([{\n    name: 'top',\n    index: 0,\n    value: 0,\n    endValue: 0,\n    speed: 200,\n    isRunning: true,\n    key: Math.random(),\n    direction: 'ltr'\n  }, {\n    name: 'center',\n    value: 0,\n    index: 1,\n    endValue: 0,\n    speed: 200,\n    isRunning: true,\n    key: Math.random(),\n    direction: 'rtl'\n  }, {\n    name: 'bottom',\n    value: 0,\n    index: 2,\n    endValue: 0,\n    speed: 200,\n    isRunning: true,\n    key: Math.random(),\n    direction: 'ltr'\n  }]); // ,\n  //   prize: 'none',\n  //   activeRowIndex: 0\n  // })\n  //\n  //   this.handleClick = this.handleClick.bind(this);\n  //   this.updateActiveRow = this.updateActiveRow.bind(this);\n  //   this.setEndValue = this.setEndValue.bind(this);\n  //   this.setRotatingValue = this.setRotatingValue.bind(this);\n  //   this.cancelInterval = this.cancelInterval.bind(this);\n  //   this.resetGame = this.resetGame.bind(this);\n  //   this.determinePrize = this.determinePrize.bind(this);\n  //   document.body.addEventListener('touchstart', this.handleClick.bind(this));\n  //   window.addEventListener('keypress', this.handleClick.bind(this));\n  // }\n  //\n  // handleClick(){\n  //   var index = this.state.activeRowIndex;\n  //   // If click occurs while a row is active\n  //   if(index < this.state.rows.length){\n  //     //Cancel the row's timer\n  //     this.cancelInterval(index);\n  //     //And set the value it ended on\n  //     this.setEndValue(index, this.state.rows[index].value);\n  //     this.determinePrize();\n  //   }\n  //   // Update the active row index every click\n  //   this.updateActiveRow();\n  // }\n  //\n  // updateActiveRow(){\n  //   //If the active section isn't a row\n  //   if( this.state.activeRowIndex < this.state.rows.length){\n  //     var index = this.state.activeRowIndex + 1;\n  //     this.setState({activeRowIndex: index });\n  //   } else{\n  //     this.resetGame();\n  //   }\n  // }\n  //\n  // determinePrize(){\n  //   var rows = this.state.rows;\n  //   var endValues = rows.map( function(row){\n  //     return row.endValue;\n  //   });\n  //\n  //   var prize = '';\n  //   endValues.forEach( function(value, index){\n  //     if(endValues[index] !== endValues[0]){\n  //       prize = 3; //code for 'No Prize'\n  //     } else{\n  //       prize = endValues[0];\n  //     }\n  //   });\n  //\n  //   console.log(prize);\n  //   this.setState({prize: prize});\n  // }\n  //\n  // resetGame(){\n  //   //Generate new key for each row. This forces re-rendering and resetting of timers.\n  //   var rows = this.state.rows.map( function(row){\n  //     //Generate new key\n  //     row.key = Math.random();\n  //     //Reset running timer\n  //     row.isRunning = true;\n  //     return row;\n  //   });\n  //\n  //   //Set the state\n  //   this.setState({rows: rows});\n  //   this.setState({activeRowIndex: 0});\n  // }\n  //\n  // setRotatingValue(index, value){\n  //   var rows = this.state.rows;\n  //   var row = rows[index];\n  //   row.value = value;\n  //   rows[index] = row;\n  //   this.setState({rows: rows});\n  // }\n  //\n  // setEndValue(index, value){\n  //   var rows = this.state.rows;\n  //   var row = rows[index];\n  //   row.endValue = value;\n  //   rows[index] = row;\n  //   this.setState({rows: rows});\n  // }\n  //\n  // cancelInterval(index){\n  //   var rows = this.state.rows;\n  //   var row = rows[index];\n  //   row.isRunning = false;\n  //   rows[index] = row;\n  //   this.setState({rows: rows});\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spaceTopHome\",\n      children: [\"Hello World\", /*#__PURE__*/_jsxDEV(Results, {\n        shown: props.activeRowIndex === 3,\n        prize: props.prize\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SliderGame, \"mDGJGeQpFnlVMdF1Xcnznqi8iMY=\");\n\n_c = SliderGame;\nexport default SliderGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"SliderGame\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/SkillSlider/SliderGame.js"],"names":["React","Component","useState","useEffect","Tooltip","OverlayTrigger","Form","ButtonGroup","ButtonToolbar","CardColumns","CardGroup","Card","Button","Container","Nav","Navbar","NavDropdown","BrowserRouter","Router","Switch","Route","Link","Results","Row","SliderGame","props","rows","setRows","name","index","value","endValue","speed","isRunning","key","Math","random","direction","activeRowIndex","prize"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AAEA,SAAQC,OAAR,EAAgBC,cAAhB,EAA+BC,IAA/B,EAAoCC,WAApC,EAAgDC,aAAhD,EAA8DC,WAA9D,EAA0EC,SAA1E,EAAoFC,IAApF,EAAyFC,MAAzF,EAAgGC,SAAhG,EAA0GC,GAA1G,EAA8GC,MAA9G,EAAqHC,WAArH,QAAwI,iBAAxI;AAEA,OAAO,sCAAP;AACA,OAAO,kBAAP;AAEA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,IAJF,QAKO,kBALP;AAQA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAE5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAiBzB,QAAQ,CAAC,CAAC;AACxB0B,IAAAA,IAAI,EAAE,KADkB;AAExBC,IAAAA,KAAK,EAAE,CAFiB;AAGxBC,IAAAA,KAAK,EAAE,CAHiB;AAIxBC,IAAAA,QAAQ,EAAE,CAJc;AAKxBC,IAAAA,KAAK,EAAE,GALiB;AAMxBC,IAAAA,SAAS,EAAE,IANa;AAOxBC,IAAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EAPmB;AAQxBC,IAAAA,SAAS,EAAE;AARa,GAAD,EAUzB;AACAT,IAAAA,IAAI,EAAE,QADN;AAEAE,IAAAA,KAAK,EAAE,CAFP;AAGAD,IAAAA,KAAK,EAAE,CAHP;AAIAE,IAAAA,QAAQ,EAAE,CAJV;AAKAC,IAAAA,KAAK,EAAE,GALP;AAMAC,IAAAA,SAAS,EAAE,IANX;AAOAC,IAAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EAPL;AAQAC,IAAAA,SAAS,EAAE;AARX,GAVyB,EAoBzB;AACAT,IAAAA,IAAI,EAAE,QADN;AAEAE,IAAAA,KAAK,EAAE,CAFP;AAGAD,IAAAA,KAAK,EAAE,CAHP;AAIAE,IAAAA,QAAQ,EAAE,CAJV;AAKAC,IAAAA,KAAK,EAAE,GALP;AAMAC,IAAAA,SAAS,EAAE,IANX;AAOAC,IAAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EAPL;AAQAC,IAAAA,SAAS,EAAE;AARX,GApByB,CAAD,CAA/B,CAF4B,CAkCvB;AACA;AACA;AACA;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAEE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6CAGJ,QAAC,OAAD;AAAS,QAAA,KAAK,EAAEZ,KAAK,CAACa,cAAN,KAAyB,CAAzC;AAA4C,QAAA,KAAK,EAAEb,KAAK,CAACc;AAAzD;AAAA;AAAA;AAAA;AAAA,cAHI;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UAFF;AAgBC,CArJH;;GAAMf,U;;KAAAA,U;AAuJJ,eAAeA,UAAf","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\n\nimport {Tooltip,OverlayTrigger,Form,ButtonGroup,ButtonToolbar,CardColumns,CardGroup,Card,Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './SliderGame.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nimport Results from \"./SliderResults\"\nimport Row from \"./SliderRow\"\n\nconst SliderGame = (props) => {\n\n  const [rows, setRows]= useState([{\n           name: 'top',\n           index: 0,\n           value: 0,\n           endValue: 0,\n           speed: 200,\n           isRunning: true,\n           key: Math.random(),\n           direction: 'ltr'\n         },\n         {\n         name: 'center',\n         value: 0,\n         index: 1,\n         endValue: 0,\n         speed: 200,\n         isRunning: true,\n         key: Math.random(),\n         direction: 'rtl'\n         },\n         {\n         name: 'bottom',\n         value: 0,\n         index: 2,\n         endValue: 0,\n         speed: 200,\n         isRunning: true,\n         key: Math.random(),\n         direction: 'ltr'\n       }])\n\n\n       // ,\n       //   prize: 'none',\n       //   activeRowIndex: 0\n       // })\n\n  //\n  //   this.handleClick = this.handleClick.bind(this);\n  //   this.updateActiveRow = this.updateActiveRow.bind(this);\n  //   this.setEndValue = this.setEndValue.bind(this);\n  //   this.setRotatingValue = this.setRotatingValue.bind(this);\n  //   this.cancelInterval = this.cancelInterval.bind(this);\n  //   this.resetGame = this.resetGame.bind(this);\n  //   this.determinePrize = this.determinePrize.bind(this);\n  //   document.body.addEventListener('touchstart', this.handleClick.bind(this));\n  //   window.addEventListener('keypress', this.handleClick.bind(this));\n  // }\n  //\n  // handleClick(){\n  //   var index = this.state.activeRowIndex;\n  //   // If click occurs while a row is active\n  //   if(index < this.state.rows.length){\n  //     //Cancel the row's timer\n  //     this.cancelInterval(index);\n  //     //And set the value it ended on\n  //     this.setEndValue(index, this.state.rows[index].value);\n  //     this.determinePrize();\n  //   }\n  //   // Update the active row index every click\n  //   this.updateActiveRow();\n  // }\n  //\n  // updateActiveRow(){\n  //   //If the active section isn't a row\n  //   if( this.state.activeRowIndex < this.state.rows.length){\n  //     var index = this.state.activeRowIndex + 1;\n  //     this.setState({activeRowIndex: index });\n  //   } else{\n  //     this.resetGame();\n  //   }\n  // }\n  //\n  // determinePrize(){\n  //   var rows = this.state.rows;\n  //   var endValues = rows.map( function(row){\n  //     return row.endValue;\n  //   });\n  //\n  //   var prize = '';\n  //   endValues.forEach( function(value, index){\n  //     if(endValues[index] !== endValues[0]){\n  //       prize = 3; //code for 'No Prize'\n  //     } else{\n  //       prize = endValues[0];\n  //     }\n  //   });\n  //\n  //   console.log(prize);\n  //   this.setState({prize: prize});\n  // }\n  //\n  // resetGame(){\n  //   //Generate new key for each row. This forces re-rendering and resetting of timers.\n  //   var rows = this.state.rows.map( function(row){\n  //     //Generate new key\n  //     row.key = Math.random();\n  //     //Reset running timer\n  //     row.isRunning = true;\n  //     return row;\n  //   });\n  //\n  //   //Set the state\n  //   this.setState({rows: rows});\n  //   this.setState({activeRowIndex: 0});\n  // }\n  //\n  // setRotatingValue(index, value){\n  //   var rows = this.state.rows;\n  //   var row = rows[index];\n  //   row.value = value;\n  //   rows[index] = row;\n  //   this.setState({rows: rows});\n  // }\n  //\n  // setEndValue(index, value){\n  //   var rows = this.state.rows;\n  //   var row = rows[index];\n  //   row.endValue = value;\n  //   rows[index] = row;\n  //   this.setState({rows: rows});\n  // }\n  //\n  // cancelInterval(index){\n  //   var rows = this.state.rows;\n  //   var row = rows[index];\n  //   row.isRunning = false;\n  //   rows[index] = row;\n  //   this.setState({rows: rows});\n  // }\n\n  return (\n\n    <div className=\"background\">\n    <div className=\"spaceTopHome\">\n  Hello World\n\n<Results shown={props.activeRowIndex === 3} prize={props.prize}/>\n\n  </div>\n\n  </div>\n\n\n\n  );\n\n  }\n\n  export default SliderGame;\n"]},"metadata":{},"sourceType":"module"}