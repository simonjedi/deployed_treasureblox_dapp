{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/treasure-blox/src/App.js\";\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport MyNav from './components/Structure/Nav';\nimport MyCards from './components/Structure/Cards';\nimport SingleCard from './components/Structure/SingleCard'; // import img1 from './Treasure-hunt.jpeg';\n\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport React, { Component } from 'react'; // first we'll require web3\n\nimport Web3 from 'web3'; // next we'll create a new instance of web3.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar web3 = new Web3(); // Set the provider\n\nweb3.setProvider(new Web3.providers.WebsocketProvider('ws://localhost:8545'));\n\nconst abi = require('./TreasureBlox.abi.json');\n\nconst mepAddress = '0xd9145CCE52D386f254917e481eB44e9943F39138';\nlet contract = new web3.eth.Contract(abi, mepAddress);\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      storageValue: 0,\n      web3: null,\n      accounts: null,\n      contract: null,\n      decimals: null,\n      bal: null,\n      owner: null,\n      marketingWallet: null,\n      games: []\n    };\n\n    this.runExample = async () => {\n      const {\n        accounts,\n        contract\n      } = this.state; // Stores a given value, 5 by default.\n\n      await contract.methods.set(5).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call();\n      const decimals = await contract.methods.decimals().call().then(console.log('Yes'));\n      const bal = await contract.methods.balanceOf(accounts[0]).call();\n      const owner = await contract.methods._owner().call();\n      const marketingWallet = await contract.methods.marketingWallet().call().then(console.log('marketing Wallet Complete'));\n      const games = await contract.methods.Games(1).call().then(console.log('games check complete')); // const games = await contract.methods.Games(1).call();\n      // Update state with the result.\n\n      this.setState({\n        storageValue: response,\n        account: accounts[0],\n        decimals: decimals,\n        bal: bal,\n        owner: owner,\n        marketingWallet: marketingWallet,\n        games: games\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"background customFont\",\n      children: [/*#__PURE__*/_jsxDEV(MyNav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SingleCard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MyCards, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MyCards, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/treasure-blox/src/App.js"],"names":["Button","Container","Nav","Navbar","NavDropdown","MyNav","MyCards","SingleCard","React","Component","Web3","web3","setProvider","providers","WebsocketProvider","abi","require","mepAddress","contract","eth","Contract","App","state","storageValue","accounts","decimals","bal","owner","marketingWallet","games","runExample","methods","set","send","from","response","get","call","then","console","log","balanceOf","_owner","Games","setState","account","render"],"mappings":"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","sourcesContent":["import { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\n\nimport MyNav from './components/Structure/Nav';\nimport MyCards from './components/Structure/Cards';\nimport SingleCard from './components/Structure/SingleCard';\n\n// import img1 from './Treasure-hunt.jpeg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nimport React, { Component } from 'react'\n\n\n// first we'll require web3\nimport Web3 from 'web3'\n\n// next we'll create a new instance of web3.\nvar web3 = new Web3();\n\n// Set the provider\nweb3.setProvider(new Web3.providers.WebsocketProvider('ws://localhost:8545')\n);\n\nconst abi = require('./TreasureBlox.abi.json');\nconst mepAddress = '0xd9145CCE52D386f254917e481eB44e9943F39138'\n\nlet contract = new web3.eth.Contract(abi,mepAddress);\n\n\nclass App extends Component {\n\n  state = { storageValue: 0,\n     web3: null,\n     accounts: null,\n     contract: null,\n     decimals:null,\n     bal:null,\n     owner:null,\n     marketingWallet:null,\n     games:[]};\n\n     runExample = async () => {\n       const { accounts, contract } = this.state;\n\n       // Stores a given value, 5 by default.\n       await contract.methods.set(5).send({ from: accounts[0] });\n\n       // Get the value from the contract to prove it worked.\n       const response = await contract.methods.get().call();\n\n       const decimals = await contract.methods.decimals().call().then(console.log('Yes'));\n\n       const bal = await contract.methods.balanceOf(accounts[0]).call();\n\n       const owner = await contract.methods._owner().call();\n\n       const marketingWallet = await contract.methods.marketingWallet().call().then(console.log('marketing Wallet Complete'));\n\n       const games = await contract.methods.Games(1).call().then(console.log('games check complete'));\n\n\n\n\n\n\n\n       // const games = await contract.methods.Games(1).call();\n\n\n\n       // Update state with the result.\n       this.setState({ storageValue: response,\n         account: accounts[0],\n         decimals:decimals,\n         bal:bal,\n         owner:owner,\n         marketingWallet:marketingWallet,\n         games:games});\n     };\n\n\n\n  render() {\n\n    return (\n        <div className=\"background customFont\">\n\n          <MyNav />\n          <SingleCard/>\n\n\n\n\n\n          <MyCards/>\n          <MyCards/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}