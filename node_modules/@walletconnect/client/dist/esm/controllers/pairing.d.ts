/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "pino";
import { PairingTypes, IClient, IPairing } from "@walletconnect/types";
import { JsonRpcPayload } from "@walletconnect/jsonrpc-utils";
import { State } from "./state";
import { JsonRpcHistory } from "./history";
export declare class Pairing extends IPairing {
    client: IClient;
    logger: Logger;
    pending: State<PairingTypes.Pending>;
    settled: State<PairingTypes.Settled>;
    history: JsonRpcHistory;
    events: EventEmitter;
    name: string;
    config: {
        status: {
            proposed: "proposed";
            responded: "responded";
            pending: string;
            settled: string;
        };
        events: import("@walletconnect/types").SequenceTypes.Events;
        jsonrpc: import("@walletconnect/types").SequenceTypes.JsonRpc;
    };
    engine: PairingTypes.Engine;
    constructor(client: IClient, logger: Logger);
    init(): Promise<void>;
    get(topic: string): Promise<PairingTypes.Settled>;
    find(permissions: Partial<PairingTypes.Permissions>): Promise<PairingTypes.Settled[]>;
    ping(topic: string, timeout?: number): Promise<void>;
    send(topic: string, payload: JsonRpcPayload): Promise<void>;
    get context(): string;
    get length(): number;
    get topics(): string[];
    get values(): PairingTypes.Settled[];
    create(params?: PairingTypes.CreateParams): Promise<PairingTypes.Settled>;
    respond(params: PairingTypes.RespondParams): Promise<PairingTypes.Pending>;
    upgrade(params: PairingTypes.UpgradeParams): Promise<PairingTypes.Settled>;
    update(params: PairingTypes.UpdateParams): Promise<PairingTypes.Settled>;
    request(params: PairingTypes.RequestParams): Promise<any>;
    delete(params: PairingTypes.DeleteParams): Promise<void>;
    notify(params: PairingTypes.NotificationEvent): Promise<void>;
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    mergeUpdate(topic: string, update: PairingTypes.Update): Promise<{
        metadata: import("@walletconnect/types").AppMetadata | undefined;
    }>;
    mergeUpgrade(topic: string, upgrade: PairingTypes.Upgrade): Promise<{
        jsonrpc: {
            methods: any[];
        };
        notifications: {
            types: any[];
        };
        controller: import("@walletconnect/types").CryptoTypes.Participant;
    }>;
    validateRespond(params?: PairingTypes.RespondParams): Promise<void>;
    validateRequest(params?: PairingTypes.RequestParams): Promise<void>;
    validatePropose(params?: PairingTypes.ProposeParams): Promise<void>;
    getDefaultSignal({ topic, relay, proposer }: PairingTypes.DefaultSignalParams): Promise<import("@walletconnect/types").SignalTypes.Uri>;
    getDefaultTTL(): Promise<number>;
    getDefaultPermissions(): Promise<Pick<import("@walletconnect/types").SequenceTypes.ProposedPermissions, "notifications" | "jsonrpc">>;
}
//# sourceMappingURL=pairing.d.ts.map