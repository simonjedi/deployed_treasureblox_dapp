{"ast":null,"code":"// import Web3 from \"web3\";\n//\n//\n//\n// const getWeb3 = () =>\n//   new Promise((resolve, reject) => {\n//     // Wait for loading completion to avoid race conditions with web3 injection timing.\n//     window.addEventListener(\"load\", async () => {\n//       // Modern dapp browsers...\n//       if (window.ethereum) {\n//\n//         const Moralis = require('moralis');\n//         // ES6 Minimized\n//         const web3 = await Moralis.enableWeb3({ provider: \"walletconnect\" });\n//         // const users = new Web3(window.ethereum);\n//\n//         try {\n//           // Request account access if needed\n//\n//\n//\n//           await window.ethereum.enable();\n//\n//           // Accounts now exposed\n//           resolve(web3);\n//\n//         } catch (error) {\n//           reject(error);\n//         }\n//       }\n//       // Legacy dapp browsers...\n//       else if (window.web3) {\n//         // Use Mist/MetaMask's provider.\n//         const web3 = window.web3;\n//         console.log(\"Injected web3 detected.\");\n//         resolve(web3);\n//\n//       }\n//       // Fallback to localhost; use dev console port by default...\n//       else {\n//\n//         // const provider = new Web3.providers.HttpProvider('https://mainnet.meter.io:8667');\n//\n//         const provider = new Web3.providers.HttpProvider('https://data-seed-prebsc-1-s1.binance.org:8545/');\n//\n//         const web3 = new Web3(provider);\n//         console.log(\"No web3 instance injected, using Local web3.\");\n//         resolve(web3);\n//       }\n//     });\n//   });\n//\n//\n// export default getWeb3;","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/getWeb3.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import Web3 from \"web3\";\n//\n//\n//\n// const getWeb3 = () =>\n//   new Promise((resolve, reject) => {\n//     // Wait for loading completion to avoid race conditions with web3 injection timing.\n//     window.addEventListener(\"load\", async () => {\n//       // Modern dapp browsers...\n//       if (window.ethereum) {\n//\n//         const Moralis = require('moralis');\n//         // ES6 Minimized\n//         const web3 = await Moralis.enableWeb3({ provider: \"walletconnect\" });\n//         // const users = new Web3(window.ethereum);\n//\n//         try {\n//           // Request account access if needed\n//\n//\n//\n//           await window.ethereum.enable();\n//\n//           // Accounts now exposed\n//           resolve(web3);\n//\n//         } catch (error) {\n//           reject(error);\n//         }\n//       }\n//       // Legacy dapp browsers...\n//       else if (window.web3) {\n//         // Use Mist/MetaMask's provider.\n//         const web3 = window.web3;\n//         console.log(\"Injected web3 detected.\");\n//         resolve(web3);\n//\n//       }\n//       // Fallback to localhost; use dev console port by default...\n//       else {\n//\n//         // const provider = new Web3.providers.HttpProvider('https://mainnet.meter.io:8667');\n//\n//         const provider = new Web3.providers.HttpProvider('https://data-seed-prebsc-1-s1.binance.org:8545/');\n//\n//         const web3 = new Web3(provider);\n//         console.log(\"No web3 instance injected, using Local web3.\");\n//         resolve(web3);\n//       }\n//     });\n//   });\n//\n//\n// export default getWeb3;\n"]},"metadata":{},"sourceType":"module"}