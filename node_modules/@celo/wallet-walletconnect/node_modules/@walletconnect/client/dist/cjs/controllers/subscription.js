"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subscription = exports.SubscriptionTopicMap = void 0;
const tslib_1 = require("tslib");
const events_1 = require("events");
const types_1 = require("@walletconnect/types");
const utils_1 = require("@walletconnect/utils");
const logger_1 = require("@walletconnect/logger");
const constants_1 = require("../constants");
class SubscriptionTopicMap {
    constructor() {
        this.map = new Map();
    }
    get topics() {
        return Array.from(this.map.keys());
    }
    set(topic, id) {
        const ids = this.get(topic);
        if (this.exists(topic, id))
            return;
        this.map.set(topic, [...ids, id]);
    }
    get(topic) {
        const ids = this.map.get(topic);
        return ids || [];
    }
    exists(topic, id) {
        const ids = this.get(topic);
        return ids.includes(id);
    }
    delete(topic, id) {
        if (typeof id === "undefined") {
            this.map.delete(topic);
            return;
        }
        if (!this.map.has(topic))
            return;
        const ids = this.get(topic);
        if (!this.exists(topic, id))
            return;
        const remaining = ids.filter(x => x !== id);
        if (!remaining.length) {
            this.map.delete(topic);
            return;
        }
        this.map.set(topic, remaining);
    }
    clear() {
        this.map.clear();
    }
}
exports.SubscriptionTopicMap = SubscriptionTopicMap;
class Subscription extends types_1.ISubscription {
    constructor(client, logger) {
        super(client, logger);
        this.client = client;
        this.logger = logger;
        this.subscriptions = new Map();
        this.topicMap = new SubscriptionTopicMap();
        this.events = new events_1.EventEmitter();
        this.name = constants_1.SUBSCRIPTION_CONTEXT;
        this.cached = [];
        this.logger = logger_1.generateChildLogger(logger, this.name);
        this.registerEventListeners();
    }
    init() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.logger.trace(`Initialized`);
            yield this.initialize();
        });
    }
    get context() {
        return logger_1.getLoggerContext(this.logger);
    }
    get length() {
        return this.subscriptions.size;
    }
    get ids() {
        return Array.from(this.subscriptions.keys());
    }
    get values() {
        return Array.from(this.subscriptions.values());
    }
    get topics() {
        return this.topicMap.topics;
    }
    set(id, subscription) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.isEnabled();
            if (this.subscriptions.has(id))
                return;
            this.logger.debug(`Setting subscription`);
            this.logger.trace({ type: "method", method: "set", id, subscription });
            this.setSubscription(id, subscription);
            this.events.emit(constants_1.SUBSCRIPTION_EVENTS.created, subscription);
        });
    }
    get(id) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.isEnabled();
            this.logger.debug(`Getting subscription`);
            this.logger.trace({ type: "method", method: "get", id });
            const subscription = this.getSubscription(id);
            return subscription;
        });
    }
    exists(id, topic) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.isEnabled();
            let result = false;
            try {
                const subscription = this.getSubscription(id);
                result = subscription.topic === topic;
            }
            catch (e) {
            }
            return result;
        });
    }
    delete(id, reason) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.isEnabled();
            this.logger.debug(`Deleting subscription`);
            this.logger.trace({ type: "method", method: "delete", id, reason });
            const subscription = this.getSubscription(id);
            this.deleteSubscription(id, subscription);
            this.events.emit(constants_1.SUBSCRIPTION_EVENTS.deleted, Object.assign(Object.assign({}, subscription), { reason }));
        });
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.once(event, listener);
    }
    off(event, listener) {
        this.events.off(event, listener);
    }
    removeListener(event, listener) {
        this.events.removeListener(event, listener);
    }
    enable() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.cached.length)
                return;
            this.reset();
            this.onEnable();
        });
    }
    disable() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (this.cached.length)
                return;
            this.onDisable();
        });
    }
    reset() {
        this.cached.map((subscription) => tslib_1.__awaiter(this, void 0, void 0, function* () { return this.setSubscription(subscription.id, subscription); }));
    }
    onEnable() {
        this.cached = [];
        this.events.emit(constants_1.SUBSCRIPTION_EVENTS.enabled);
    }
    onDisable() {
        this.cached = this.values;
        this.subscriptions.clear();
        this.topicMap.clear();
        this.events.emit(constants_1.SUBSCRIPTION_EVENTS.disabled);
    }
    setSubscription(id, subscription) {
        const expiry = subscription.expiry || utils_1.calcExpiry(constants_1.SUBSCRIPTION_DEFAULT_TTL);
        this.subscriptions.set(id, Object.assign(Object.assign({}, subscription), { expiry }));
        this.topicMap.set(subscription.topic, id);
        this.checkExpiry(id, expiry);
    }
    getSubscription(id) {
        const subscription = this.subscriptions.get(id);
        if (!subscription) {
            const error = utils_1.ERROR.NO_MATCHING_ID.format({
                context: utils_1.formatMessageContext(this.context),
                id,
            });
            throw new Error(error.message);
        }
        return subscription;
    }
    deleteSubscription(id, subscription) {
        this.subscriptions.delete(id);
        this.topicMap.delete(subscription.topic, id);
    }
    checkExpiry(id, expiry) {
        const msToTimeout = utils_1.toMiliseconds(expiry) - Date.now();
        if (msToTimeout <= 0)
            this.expire(id);
    }
    expire(id) {
        const reason = utils_1.ERROR.EXPIRED.format({ context: utils_1.formatMessageContext(this.context) });
        const subscription = this.getSubscription(id);
        this.deleteSubscription(id, subscription);
        this.events.emit(constants_1.SUBSCRIPTION_EVENTS.deleted, Object.assign(Object.assign({}, subscription), { reason }));
    }
    checkSubscriptions() {
        this.subscriptions.forEach(subscription => this.checkExpiry(subscription.id, subscription.expiry));
    }
    persist() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.client.storage.setRelayerSubscriptions(this.context, this.values);
            this.events.emit(constants_1.SUBSCRIPTION_EVENTS.sync);
        });
    }
    restore() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            try {
                const persisted = yield this.client.storage.getRelayerSubscriptions(this.context);
                if (typeof persisted === "undefined")
                    return;
                if (!persisted.length)
                    return;
                if (this.subscriptions.size) {
                    const error = utils_1.ERROR.RESTORE_WILL_OVERRIDE.format({
                        context: utils_1.formatMessageContext(this.context),
                    });
                    this.logger.error(error.message);
                    throw new Error(error.message);
                }
                this.cached = persisted;
                this.logger.debug(`Successfully Restored subscriptions for ${utils_1.formatMessageContext(this.context)}`);
                this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
            }
            catch (e) {
                this.logger.debug(`Failed to Restore subscriptions for ${utils_1.formatMessageContext(this.context)}`);
                this.logger.error(e);
            }
        });
    }
    initialize() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            yield this.restore();
            this.reset();
            this.onInit();
        });
    }
    onInit() {
        this.onEnable();
    }
    isEnabled() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            if (!this.cached.length)
                return;
            return new Promise(resolve => {
                this.events.once(constants_1.SUBSCRIPTION_EVENTS.enabled, () => resolve());
            });
        });
    }
    onExpiry(expiredEvent) {
        const eventName = constants_1.SUBSCRIPTION_EVENTS.expired;
        this.logger.info(`Emitting ${eventName}`);
        this.logger.debug({ type: "event", event: eventName, data: expiredEvent });
        this.events.emit(constants_1.SUBSCRIPTION_EVENTS.expired, expiredEvent);
    }
    registerEventListeners() {
        this.client.on(constants_1.CLIENT_EVENTS.beat, () => this.checkSubscriptions());
        this.events.on(constants_1.SUBSCRIPTION_EVENTS.created, (createdEvent) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const eventName = constants_1.SUBSCRIPTION_EVENTS.created;
            this.logger.info(`Emitting ${eventName}`);
            this.logger.debug({ type: "event", event: eventName, data: createdEvent });
            yield this.persist();
        }));
        this.events.on(constants_1.SUBSCRIPTION_EVENTS.deleted, (deletedEvent) => tslib_1.__awaiter(this, void 0, void 0, function* () {
            const eventName = constants_1.SUBSCRIPTION_EVENTS.deleted;
            this.logger.info(`Emitting ${eventName}`);
            this.logger.debug({ type: "event", event: eventName, data: deletedEvent });
            yield this.persist();
            if (deletedEvent.reason.code === utils_1.ERROR.EXPIRED.code)
                this.onExpiry(deletedEvent);
        }));
    }
}
exports.Subscription = Subscription;
//# sourceMappingURL=subscription.js.map