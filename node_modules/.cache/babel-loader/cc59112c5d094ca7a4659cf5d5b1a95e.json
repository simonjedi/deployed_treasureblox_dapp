{"ast":null,"code":"import { EventEmitter } from \"events\";\nimport { safeJsonParse, safeJsonStringify } from \"@walletconnect/safe-json\";\nimport { formatJsonRpcError, isReactNative, isWsUrl, isLocalhostUrl, parseConnectionError } from \"@walletconnect/jsonrpc-utils\";\nconst WS = typeof global.WebSocket !== \"undefined\" ? global.WebSocket : require(\"ws\");\nexport class WsConnection {\n  constructor(url) {\n    this.url = url;\n    this.events = new EventEmitter();\n    this.registering = false;\n\n    if (!isWsUrl(url)) {\n      throw new Error(`Provided URL is not compatible with WebSocket connection: ${url}`);\n    }\n\n    this.url = url;\n  }\n\n  get connected() {\n    return typeof this.socket !== \"undefined\";\n  }\n\n  get connecting() {\n    return this.registering;\n  }\n\n  on(event, listener) {\n    this.events.on(event, listener);\n  }\n\n  once(event, listener) {\n    this.events.once(event, listener);\n  }\n\n  off(event, listener) {\n    this.events.off(event, listener);\n  }\n\n  removeListener(event, listener) {\n    this.events.removeListener(event, listener);\n  }\n\n  async open(url = this.url) {\n    await this.register(url);\n  }\n\n  async close() {\n    if (typeof this.socket === \"undefined\") {\n      throw new Error(\"Connection already closed\");\n    }\n\n    this.socket.close();\n    this.onClose();\n  }\n\n  async send(payload, context) {\n    if (typeof this.socket === \"undefined\") {\n      this.socket = await this.register();\n    }\n\n    try {\n      this.socket.send(safeJsonStringify(payload));\n    } catch (e) {\n      this.onError(payload.id, e);\n    }\n  }\n\n  register(url = this.url) {\n    if (!isWsUrl(url)) {\n      throw new Error(`Provided URL is not compatible with WebSocket connection: ${url}`);\n    }\n\n    if (this.registering) {\n      return new Promise((resolve, reject) => {\n        this.events.once(\"register_error\", error => {\n          reject(error);\n        });\n        this.events.once(\"open\", () => {\n          if (typeof this.socket === \"undefined\") {\n            return reject(new Error(\"WebSocket connection is missing or invalid\"));\n          }\n\n          resolve(this.socket);\n        });\n      });\n    }\n\n    this.url = url;\n    this.registering = true;\n    return new Promise((resolve, reject) => {\n      const opts = !isReactNative() ? {\n        rejectUnauthorized: !isLocalhostUrl(url)\n      } : undefined;\n      const socket = new WS(url, [], opts);\n\n      socket.onopen = () => {\n        this.onOpen(socket);\n        resolve(socket);\n      };\n\n      socket.onerror = event => {\n        const error = this.parseError(event.error);\n        this.events.emit(\"register_error\", error);\n        this.onClose();\n        reject(error);\n      };\n    });\n  }\n\n  onOpen(socket) {\n    socket.onmessage = event => this.onPayload(event);\n\n    socket.onclose = () => this.onClose();\n\n    socket.onerror = event => {\n      const error = this.parseError(event.error);\n      this.events.emit(\"error\", error);\n    };\n\n    this.socket = socket;\n    this.registering = false;\n    this.events.emit(\"open\");\n  }\n\n  onClose() {\n    this.socket = undefined;\n    this.registering = false;\n    this.events.emit(\"close\");\n  }\n\n  onPayload(e) {\n    if (typeof e.data === \"undefined\") return;\n    const payload = typeof e.data === \"string\" ? safeJsonParse(e.data) : e.data;\n    this.events.emit(\"payload\", payload);\n  }\n\n  onError(id, e) {\n    const error = this.parseError(e);\n    const message = error.message || error.toString();\n    const payload = formatJsonRpcError(id, message);\n    this.events.emit(\"payload\", payload);\n  }\n\n  parseError(e, url = this.url) {\n    return parseConnectionError(e, url, \"WS\");\n  }\n\n}\nexport default WsConnection;","map":{"version":3,"sources":["../../src/ws.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { EventEmitter } from \"events\";\nimport { safeJsonParse, safeJsonStringify } from \"@walletconnect/safe-json\";\nimport { formatJsonRpcError, isReactNative, isWsUrl, isLocalhostUrl, parseConnectionError, } from \"@walletconnect/jsonrpc-utils\";\nconst WS = typeof global.WebSocket !== \"undefined\" ? global.WebSocket : require(\"ws\");\nexport class WsConnection {\n    constructor(url) {\n        this.url = url;\n        this.events = new EventEmitter();\n        this.registering = false;\n        if (!isWsUrl(url)) {\n            throw new Error(`Provided URL is not compatible with WebSocket connection: ${url}`);\n        }\n        this.url = url;\n    }\n    get connected() {\n        return typeof this.socket !== \"undefined\";\n    }\n    get connecting() {\n        return this.registering;\n    }\n    on(event, listener) {\n        this.events.on(event, listener);\n    }\n    once(event, listener) {\n        this.events.once(event, listener);\n    }\n    off(event, listener) {\n        this.events.off(event, listener);\n    }\n    removeListener(event, listener) {\n        this.events.removeListener(event, listener);\n    }\n    async open(url = this.url) {\n        await this.register(url);\n    }\n    async close() {\n        if (typeof this.socket === \"undefined\") {\n            throw new Error(\"Connection already closed\");\n        }\n        this.socket.close();\n        this.onClose();\n    }\n    async send(payload, context) {\n        if (typeof this.socket === \"undefined\") {\n            this.socket = await this.register();\n        }\n        try {\n            this.socket.send(safeJsonStringify(payload));\n        }\n        catch (e) {\n            this.onError(payload.id, e);\n        }\n    }\n    register(url = this.url) {\n        if (!isWsUrl(url)) {\n            throw new Error(`Provided URL is not compatible with WebSocket connection: ${url}`);\n        }\n        if (this.registering) {\n            return new Promise((resolve, reject) => {\n                this.events.once(\"register_error\", error => {\n                    reject(error);\n                });\n                this.events.once(\"open\", () => {\n                    if (typeof this.socket === \"undefined\") {\n                        return reject(new Error(\"WebSocket connection is missing or invalid\"));\n                    }\n                    resolve(this.socket);\n                });\n            });\n        }\n        this.url = url;\n        this.registering = true;\n        return new Promise((resolve, reject) => {\n            const opts = !isReactNative() ? { rejectUnauthorized: !isLocalhostUrl(url) } : undefined;\n            const socket = new WS(url, [], opts);\n            socket.onopen = () => {\n                this.onOpen(socket);\n                resolve(socket);\n            };\n            socket.onerror = (event) => {\n                const error = this.parseError(event.error);\n                this.events.emit(\"register_error\", error);\n                this.onClose();\n                reject(error);\n            };\n        });\n    }\n    onOpen(socket) {\n        socket.onmessage = (event) => this.onPayload(event);\n        socket.onclose = () => this.onClose();\n        socket.onerror = (event) => {\n            const error = this.parseError(event.error);\n            this.events.emit(\"error\", error);\n        };\n        this.socket = socket;\n        this.registering = false;\n        this.events.emit(\"open\");\n    }\n    onClose() {\n        this.socket = undefined;\n        this.registering = false;\n        this.events.emit(\"close\");\n    }\n    onPayload(e) {\n        if (typeof e.data === \"undefined\")\n            return;\n        const payload = typeof e.data === \"string\" ? safeJsonParse(e.data) : e.data;\n        this.events.emit(\"payload\", payload);\n    }\n    onError(id, e) {\n        const error = this.parseError(e);\n        const message = error.message || error.toString();\n        const payload = formatJsonRpcError(id, message);\n        this.events.emit(\"payload\", payload);\n    }\n    parseError(e, url = this.url) {\n        return parseConnectionError(e, url, \"WS\");\n    }\n}\nexport default WsConnection;\n//# sourceMappingURL=ws.js.map"]},"metadata":{},"sourceType":"module"}