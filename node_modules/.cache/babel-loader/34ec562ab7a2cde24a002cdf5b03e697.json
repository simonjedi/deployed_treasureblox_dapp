{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.tryObtainValueWithRetries = exports.conditionWatcher = exports.repeatTask = void 0;\n\nvar future_1 = require(\"./future\");\n\nvar logger_1 = require(\"./logger\");\n/**\n * Given task options, creates the task logger\n *\n * It will prefix taskName to the logs\n */\n\n\nvar createTaskLogger = function (opts) {\n  if (opts.logger) {\n    return (0, logger_1.prefixLogger)(opts.name, opts.logger);\n  } else {\n    return logger_1.noopLogger;\n  }\n};\n/**\n * Runs an async function eternally until stopped\n *\n * @param fn function to run\n */\n\n\nfunction repeatTask(opts, fn) {\n  var _this = this;\n\n  var logger = createTaskLogger(opts);\n  var isActive = true;\n  var ctx = {\n    executionNumber: 0,\n    stopTask: function () {\n      isActive = false;\n    }\n  };\n\n  var loop = function () {\n    return __awaiter(_this, void 0, void 0, function () {\n      var err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!isActive) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3, 4, 5]);\n\n            ctx.executionNumber++;\n            return [4\n            /*yield*/\n            , fn(ctx)];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 3:\n            err_1 = _a.sent();\n            logger(\"Failed with error: \" + err_1.message);\n            logger(err_1);\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            if (isActive) {\n              setTimeout(loop, opts.timeInBetweenMS);\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  if (opts.initialDelayMS != null) {\n    setTimeout(loop, opts.initialDelayMS);\n  } else {\n    // tslint:disable-next-line: no-floating-promises\n    loop();\n  }\n\n  return {\n    stop: ctx.stopTask,\n    isRunning: function () {\n      return isActive;\n    }\n  };\n}\n\nexports.repeatTask = repeatTask;\n\nfunction conditionWatcher(opts) {\n  var _this = this;\n\n  return repeatTask(opts, function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var val;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , opts.pollCondition()];\n\n          case 1:\n            val = _a.sent();\n            if (!val) return [3\n            /*break*/\n            , 3];\n            ctx.stopTask();\n            return [4\n            /*yield*/\n            , opts.onSuccess()];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  });\n}\n\nexports.conditionWatcher = conditionWatcher;\n\nfunction tryObtainValueWithRetries(opts) {\n  var _this = this;\n\n  var futureValue = new future_1.Future();\n  var task = repeatTask(opts, function (ctx) {\n    return __awaiter(_this, void 0, void 0, function () {\n      var val;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(ctx.executionNumber > opts.maxAttemps)) return [3\n            /*break*/\n            , 1];\n            ctx.stopTask();\n            futureValue.reject(new Error('Max Retries & no value'));\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , opts.tryGetValue()];\n\n          case 2:\n            val = _a.sent();\n\n            if (val != null) {\n              futureValue.resolve(val);\n              ctx.stopTask();\n            }\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  });\n  return __assign(__assign({}, task), {\n    stop: function () {\n      task.stop();\n      futureValue.reject(new Error('Cancelled'));\n    },\n    onValue: function () {\n      return futureValue.asPromise();\n    }\n  });\n}\n\nexports.tryObtainValueWithRetries = tryObtainValueWithRetries;","map":{"version":3,"sources":["../src/task.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tryObtainValueWithRetries = exports.conditionWatcher = exports.repeatTask = void 0;\nvar future_1 = require(\"./future\");\nvar logger_1 = require(\"./logger\");\n/**\n * Given task options, creates the task logger\n *\n * It will prefix taskName to the logs\n */\nvar createTaskLogger = function (opts) {\n    if (opts.logger) {\n        return (0, logger_1.prefixLogger)(opts.name, opts.logger);\n    }\n    else {\n        return logger_1.noopLogger;\n    }\n};\n/**\n * Runs an async function eternally until stopped\n *\n * @param fn function to run\n */\nfunction repeatTask(opts, fn) {\n    var _this = this;\n    var logger = createTaskLogger(opts);\n    var isActive = true;\n    var ctx = {\n        executionNumber: 0,\n        stopTask: function () {\n            isActive = false;\n        },\n    };\n    var loop = function () { return __awaiter(_this, void 0, void 0, function () {\n        var err_1;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!isActive) {\n                        return [2 /*return*/];\n                    }\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 3, 4, 5]);\n                    ctx.executionNumber++;\n                    return [4 /*yield*/, fn(ctx)];\n                case 2:\n                    _a.sent();\n                    return [3 /*break*/, 5];\n                case 3:\n                    err_1 = _a.sent();\n                    logger(\"Failed with error: \" + err_1.message);\n                    logger(err_1);\n                    return [3 /*break*/, 5];\n                case 4:\n                    if (isActive) {\n                        setTimeout(loop, opts.timeInBetweenMS);\n                    }\n                    return [7 /*endfinally*/];\n                case 5: return [2 /*return*/];\n            }\n        });\n    }); };\n    if (opts.initialDelayMS != null) {\n        setTimeout(loop, opts.initialDelayMS);\n    }\n    else {\n        // tslint:disable-next-line: no-floating-promises\n        loop();\n    }\n    return {\n        stop: ctx.stopTask,\n        isRunning: function () {\n            return isActive;\n        },\n    };\n}\nexports.repeatTask = repeatTask;\nfunction conditionWatcher(opts) {\n    var _this = this;\n    return repeatTask(opts, function (ctx) { return __awaiter(_this, void 0, void 0, function () {\n        var val;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, opts.pollCondition()];\n                case 1:\n                    val = _a.sent();\n                    if (!val) return [3 /*break*/, 3];\n                    ctx.stopTask();\n                    return [4 /*yield*/, opts.onSuccess()];\n                case 2:\n                    _a.sent();\n                    _a.label = 3;\n                case 3: return [2 /*return*/];\n            }\n        });\n    }); });\n}\nexports.conditionWatcher = conditionWatcher;\nfunction tryObtainValueWithRetries(opts) {\n    var _this = this;\n    var futureValue = new future_1.Future();\n    var task = repeatTask(opts, function (ctx) { return __awaiter(_this, void 0, void 0, function () {\n        var val;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    if (!(ctx.executionNumber > opts.maxAttemps)) return [3 /*break*/, 1];\n                    ctx.stopTask();\n                    futureValue.reject(new Error('Max Retries & no value'));\n                    return [3 /*break*/, 3];\n                case 1: return [4 /*yield*/, opts.tryGetValue()];\n                case 2:\n                    val = _a.sent();\n                    if (val != null) {\n                        futureValue.resolve(val);\n                        ctx.stopTask();\n                    }\n                    _a.label = 3;\n                case 3: return [2 /*return*/];\n            }\n        });\n    }); });\n    return __assign(__assign({}, task), { stop: function () {\n            task.stop();\n            futureValue.reject(new Error('Cancelled'));\n        }, onValue: function () { return futureValue.asPromise(); } });\n}\nexports.tryObtainValueWithRetries = tryObtainValueWithRetries;\n//# sourceMappingURL=task.js.map"]},"metadata":{},"sourceType":"script"}