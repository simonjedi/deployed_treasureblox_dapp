{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\"; // import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\n\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound'; //\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\n\nimport './style.css';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactAudioPlayer from 'react-audio-player'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useWindowSize() {\n  _s();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\n_s(useWindowSize, \"WMqaMVAPr0u8CJVTsAIdEuYrbbM=\");\n\nconst Screen = props => {\n  _s2();\n\n  const {\n    width,\n    height\n  } = useWindowSize();\n  useEffect(() => {\n    const canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext(\"2d\"); // Global Varabales\n\n    let controlPlayer = false;\n    let hasGameStarted = false; // Prevent game from working whilst page reloads\n\n    let hasGameOver = false;\n    let startDate = null;\n\n    function millisecondsToMiutes(millis) {\n      let minutes = Math.floor(millis / 60000);\n      let seconds = Math.floor(millis % 60000 / 1000);\n      return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    }\n\n    function gameOver() {\n      if (!hasGameOver) {\n        let endDate = new Date();\n        let timeDiff = endDate - startDate;\n\n        if (timeDiff < 60000) {\n          alert('You survived ' + timeDiff / 1000 + \" seconds!\");\n        } else {\n          let minutesSurvived = millisecondsToMiutes(timeDiff);\n          alert('You survived ${minutesSurvived} WOW!');\n        }\n\n        hasGameOver = true;\n      }\n    } // Canvas black boarder\n\n\n    function drawBoarder() {\n      ctx.fillStyle = \"black\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.clearRect(50, 50, 500, 500);\n    }\n\n    let playerRect = {\n      x: 275,\n      y: 275,\n      width: 50,\n      height: 50\n    }; // Game Elements\n\n    let rectangles = [{\n      x: 75,\n      y: 75,\n      dx: 5,\n      dy: 4,\n      width: 75,\n      height: 75,\n      color: \"#000099\"\n    }, {\n      x: 400,\n      y: 75,\n      dx: -5,\n      dy: 5.5,\n      width: 80,\n      height: 60,\n      color: \"#000099\"\n    }, {\n      x: 75,\n      y: 445,\n      dx: 5,\n      dy: -5,\n      width: 40,\n      height: 80,\n      color: \"#000099\"\n    }, {\n      x: 420,\n      y: 450,\n      dx: -5,\n      dy: -5,\n      width: 130,\n      height: 25,\n      color: \"#000099\"\n    }]; // Render rectangles to canvas\n\n    function drawRect() {\n      // Draw player rect first\n      ctx.fillStyle = \"#901234\";\n      ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n      rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n      });\n    } // collision\n\n\n    function playerCollisionDetection() {\n      if (playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50) {\n        gameOver();\n      }\n    }\n\n    function update() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawBoarder();\n      drawRect();\n      playerCollisionDetection();\n      requestAnimationFrame(update);\n    } // call update methord on initial document load\n\n\n    update(); // Returns true if collision\n\n    function isCursorInRect(x, y, rect) {\n      return x > rect.x && x < rect.x + rect.width && y > rect.y && y < rect.y + rect.height;\n    }\n\n    canvas.addEventListener('mousedown', e => {\n      // get x & y coordinates in relation to the canvas\n      var pos = {\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop\n      }; // See if they clicked on red square\n\n      if (isCursorInRect(pos.x, pos.y, playerRect)) {\n        //\n        if (!hasGameStarted) {\n          startDate = new Date();\n        }\n\n        hasGameStarted = true;\n        controlPlayer = true;\n      }\n    });\n    canvas.addEventListener(\"mousemove\", e => {\n      if (controlPlayer && !hasGameOver) {\n        // get x & y coordinates in relation to the canvas\n        var pos = {\n          x: e.clientX - canvas.offsetLeft,\n          y: e.clientY - canvas.offsetTop\n        };\n        playerRect.x = pos.x - 25;\n        playerRect.y = pos.y - 25;\n      }\n    });\n    canvas.addEventListener(\"mouseup\", () => {\n      controlPlayer = false;\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"center\", {\n      children: [\"Fighter Pilot\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"500\",\n        height: \"600\",\n        id: \"canvas\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Screen, \"bNiY6OdSHlT+REaiGeQKnvg2CD0=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = Screen;\nexport default Screen;\n\nvar _c;\n\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js"],"names":["React","useState","useEffect","useRef","Button","Container","Nav","Navbar","NavDropdown","useSound","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactAudioPlayer","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Screen","props","canvas","document","getElementById","ctx","getContext","controlPlayer","hasGameStarted","hasGameOver","startDate","millisecondsToMiutes","millis","minutes","Math","floor","seconds","gameOver","endDate","Date","timeDiff","alert","minutesSurvived","drawBoarder","fillStyle","fillRect","clearRect","playerRect","x","y","rectangles","dx","dy","color","drawRect","forEach","rect","playerCollisionDetection","update","requestAnimationFrame","isCursorInRect","e","pos","clientX","offsetLeft","clientY","offsetTop"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\n// import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\nimport { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound';\n//\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\nimport './style.css';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n// Hook\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\n\n\n\nconst Screen = (props) =>{\n\n  const { width, height } = useWindowSize();\n\n\n\n\n\n  useEffect(() => {\n\n\n\n\n\n      const canvas = document.getElementById(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n\n      // Global Varabales\n\n      let controlPlayer = false;\n      let hasGameStarted = false;\n\n\n      // Prevent game from working whilst page reloads\n      let hasGameOver = false;\n      let startDate = null;\n\n      function millisecondsToMiutes(millis){\n        let minutes = Math.floor(millis/60000);\n        let seconds = Math.floor((millis % 60000)/1000);\n        return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n\n      }\n\n      function gameOver(){\n        if(!hasGameOver){\n          let endDate = new Date();\n          let timeDiff = endDate - startDate;\n          if (timeDiff < 60000){\n            alert('You survived '+ timeDiff/1000 +\" seconds!\");\n          }else{\n            let minutesSurvived = millisecondsToMiutes(timeDiff);\n            alert('You survived ${minutesSurvived} WOW!');\n\n          }\n\n          hasGameOver = true;\n        }\n      }\n\n\n      // Canvas black boarder\n\n      function drawBoarder(){\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(0,0,canvas.width,canvas.height);\n        ctx.clearRect(50,50,500,500);\n      }\n\n      let playerRect = {\n        x:275,\n        y:275,\n        width:50,\n        height:50,\n      }\n\n      // Game Elements\n      let rectangles = [\n        {\n          x:75,\n          y:75,\n          dx:5,\n          dy:4,\n          width:75,\n          height:75,\n          color:\"#000099\",\n        },\n        {\n          x:400,\n          y:75,\n          dx:-5,\n          dy:5.5,\n          width:80,\n          height:60,\n          color:\"#000099\",\n        },\n        {\n          x:75,\n          y:445,\n          dx:5,\n          dy:-5,\n          width:40,\n          height:80,\n          color:\"#000099\",\n        },\n        {\n          x:420,\n          y:450,\n          dx:-5,\n          dy:-5,\n          width:130,\n          height:25,\n          color:\"#000099\",\n        },\n      ]\n\n      // Render rectangles to canvas\n\n      function drawRect(){\n        // Draw player rect first\n        ctx.fillStyle = \"#901234\";\n        ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n\n        rectangles.forEach(rect => {\n          ctx.fillStyle = rect.color;\n          ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n        });\n\n      }\n\n      // collision\n      function playerCollisionDetection(){\n        if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n        ){\n          gameOver();\n        }\n      }\n\n      function update(){\n        ctx.clearRect(0,0,canvas.width,canvas.height);\n\n        drawBoarder();\n        drawRect();\n\n        playerCollisionDetection();\n\n        requestAnimationFrame(update);\n      }\n\n      // call update methord on initial document load\n      update();\n\n\n      // Returns true if collision\n      function isCursorInRect(x,y,rect){\n        return(x > rect.x && x < rect.x+rect.width && y > rect.y && y < rect.y+rect.height);\n      }\n\n      canvas.addEventListener('mousedown', e => {\n\n        // get x & y coordinates in relation to the canvas\n        var pos = {\n          x: e.clientX - canvas.offsetLeft,\n          y: e.clientY - canvas.offsetTop,\n        };\n\n        // See if they clicked on red square\n        if (isCursorInRect(pos.x,pos.y,playerRect)){\n          //\n          if(!hasGameStarted){\n            startDate = new Date();\n          }\n          hasGameStarted = true;\n          controlPlayer = true;\n        }\n\n      });\n\n\n      canvas.addEventListener(\"mousemove\", e => {\n\n        if(controlPlayer && !hasGameOver){\n          // get x & y coordinates in relation to the canvas\n          var pos = {\n            x: e.clientX - canvas.offsetLeft,\n            y: e.clientY - canvas.offsetTop,\n          };\n          playerRect.x = pos.x - 25;\n          playerRect.y = pos.y - 25;\n        }\n\n      })\n\n\n\n      canvas.addEventListener(\"mouseup\", () =>{\n        controlPlayer = false;\n      })\n\n    }, []);\n\n\n\n\n\n  return (\n    <div >\n\n<center>\nFighter Pilot<br/>\n<canvas width=\"500\" height=\"600\" id=\"canvas\"> </canvas>\n\n</center>\n<br/>\n    </div>\n  );\n}\n\nexport default Screen;\n"]},"metadata":{},"sourceType":"module"}