{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect, useCallback } from \"react\"; // import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\n\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound'; //\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\n\nimport './style.css';\nimport ohno from './assets/troy_oh_no.mp4';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactAudioPlayer from 'react-audio-player'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FighterScreen = props => {\n  _s();\n\n  var [controlPlayer, setControlPlayer] = useState(false);\n  var [hasGameStarted, setHasGameStarted] = useState(false);\n  var [hasGameOver, setHasGameOver] = useState(false);\n  var [canvas, setCanvas] = useState(false);\n  var [ctx, setCtx] = useState(false);\n  var [exit, setExit] = useState(true);\n  var [isGameOver, setIsGameOver] = useState(false);\n  var [redirectLevel1More, setredirectLevel1More] = useState(false);\n  const [timeleft, setTimeleft] = useState(5);\n  const [start, setStart] = useState(false); // Prevent game from working whilst page reloads\n\n  let startDate = null;\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n  }; //Game Elements\n\n  let rectangles = [{\n    x: 75,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  }, {\n    x: 450,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  }, {\n    x: 265,\n    y: 450,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  } // {\n  //     x: 400,\n  //     y: 75,\n  //     dx: -5,\n  //     dy: 5.5,\n  //     width: 80,\n  //     height: 60,\n  //     color: \"#000099\"\n  // },\n  // {\n  //     x: 75,\n  //     y: 445,\n  //     dx: 5,\n  //     dy: -5,\n  //     width: 40,\n  //     height: 80,\n  //     color: \"#000099\"\n  // },\n  // {\n  //     x: 420,\n  //     y: 450,\n  //     dx: -5,\n  //     dy: -5,\n  //     width: 130,\n  //     height: 25,\n  //     color: \"#000099\"\n  // }\n  ];\n\n  const gameOverTime = () => {\n    setIsGameOver(true);\n    setExit(false);\n  };\n\n  useEffect(() => {\n    if (start) {\n      setTimeout(() => {\n        if (timeleft > 0) {\n          var timer = timeleft - 1;\n          setTimeleft(timer);\n        }\n\n        if (timeleft == 0) {\n          console.log(\"wiiiiiinnnnnnnn\");\n          setTimeout(handleMore, 500);\n          setStart(false);\n        }\n      }, 1000);\n    }\n  });\n\n  function handleMore() {\n    setredirectLevel1More(true);\n  }\n\n  useEffect(() => {\n    const init = async () => {\n      const canvas = document.getElementById(\"canvasgun\"); // const ctx = canvas.getContext(\"2d\");\n      //\n      // function millisecondsToMinutes(millis){\n      //     let minutes = Math.floor(millis / 60000);\n      //     let seconds = ((millis % 60000) / 1000).toFixed(0);\n      //     return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n      // }\n      // Global Varabales\n      // function update() {\n      //     ctx.clearRect(0,0,canvas.width,canvas.height);\n      //     drawBorder();\n      //     drawRect();\n      //\n      //     if(hasGameStarted){\n      //         //Get the blue rectangle to start moving\n      //         moveRectangle();\n      //     }\n      //     //Detect whether rectangles hit edge of canvas\n      //     borderRectangleCollisionDetection();\n      //     //Detect whether player makes contact with border\n      //     playerCollisionDetection();\n      //     //Detect whether player makes contact with rectangle\n      //     rectangleCollisionDetection();\n      //     requestAnimationFrame(update);\n      // }\n      //\n      // //Call update method on initial document load\n      // update();\n      //Render rectangles to canvas.\n\n      function drawRect() {\n        //Draw playerRect first\n        ctx.fillStyle = \"#990000\";\n        ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n        rectangles.forEach(rect => {\n          ctx.fillStyle = rect.color;\n          ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n        });\n      } //\n      // function update(){\n      //   ctx.clearRect(0,0,canvas.width,canvas.height);\n      //\n      //   drawBoarder();\n      //   drawRect();\n      //\n      //   if (hasGameStarted){\n      //     moveRectangle();\n      //   }\n      //\n      //   playerCollisionDetection();\n      //   rectangleCollisionDetection();\n      //   boarderRectangleDetection();\n      //   requestAnimationFrame(update);\n      // }\n      //\n      // // call update methord on initial document load\n      // update();\n      // Canvas black boarder\n      //Canvas Black Border\n\n\n      function drawBorder() {\n        ctx.fillStyle = 'black';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.clearRect(25, 25, 550, 550);\n      } // function drawBoarder(){\n      //   ctx.fillStyle = \"black\";\n      //   ctx.fillRect(0,0,canvas.width,canvas.height);\n      //   ctx.clearRect(50,50,500,500);\n      // }\n      // function millisecondsToMiutes(millis){\n      //   let minutes = Math.floor(millis/60000);\n      //   let seconds = Math.floor((millis % 60000)/1000);\n      //   return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n      //\n      // }\n\n\n      function gameOver() {\n        gameOverTime();\n      } // Render rectangles to canvas\n      //Render rectangles to canvas.\n\n\n      function drawRect() {\n        //Draw playerRect first\n        ctx.fillStyle = \"#990000\";\n        ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n        rectangles.forEach(rect => {\n          ctx.fillStyle = rect.color;\n          ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n        });\n      } // function drawRect(){\n      //   // Draw player rect first\n      //   ctx.fillStyle = \"#901234\";\n      //   ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n      //\n      //   rectangles.forEach(rect => {\n      //     ctx.fillStyle = rect.color;\n      //     ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n      //   });\n      //\n      // }\n      //Detect whether player makes contact with border\n\n\n      function playerCollisionDetection() {\n        if (playerRect.x + playerRect.width > 575 || playerRect.x < 25 || playerRect.y + playerRect.height > 575 || playerRect.y < 25) {\n          gameOver();\n        }\n      } // collision\n      // function playerCollisionDetection(){\n      //   if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n      //   ){\n      //     gameOver();\n      //   }\n      // }\n      //Returns true if 2 rectangles are colliding\n\n\n      function isRectangleCollision(rect1, rect2) {\n        return !(rect1.x + 10 > rect2.x + rect2.width || rect1.x + rect1.width - 10 < rect2.x || rect1.y + 10 > rect2.y + rect2.height || rect1.y + rect1.height - 10 < rect2.y);\n      } // function isRectangleCollision(rect1,rect2){\n      //   return !(\n      //     rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n      //   );\n      // }\n      //Detect whether player makes contact with rectangle\n\n\n      function rectangleCollisionDetection() {\n        rectangles.forEach(rect => {\n          if (isRectangleCollision(playerRect, rect)) {\n            gameOver();\n          }\n        });\n      } //\n      // function rectangleCollisionDetection(){\n      //   rectangles.forEach(rect =>{\n      //     if(isRectangleCollision(playerRect,rect)){\n      //       gameOver();\n      //     }\n      //   })\n      // }\n      //Get the blue rectangle to start moving\n\n\n      function moveRectangle() {\n        rectangles.forEach(rect => {\n          rect.x += rect.dx;\n          rect.y += rect.dy;\n        });\n      } // function moveRectangle(){\n      //   rectangles.forEach(rect => {\n      //     rect.x += rect.dx;\n      //     rect.y += rect.dy;\n      //   })\n      // }\n      //Detect whether rectangles hit edge of canvas\n\n\n      function borderRectangleCollisionDetection() {\n        rectangles.forEach(rect => {\n          if (rect.x + rect.width > canvas.width || rect.x < 0) {\n            rect.dx *= -1;\n          }\n\n          if (rect.y + rect.height > canvas.height || rect.y < 0) {\n            rect.dy *= -1;\n          }\n        });\n      } // function boarderRectangleDetection(){\n      //   rectangles.forEach(rect=>{\n      //     if(rect.x + rect.width > canvas.width || rect.x < 0){\n      //       rect.dx *= -1;\n      //     }\n      //     if(rect.y + rect.height > canvas.height || rect.y < 0){\n      //       rect.dy *= -1;\n      //     }\n      //   })\n      // }\n\n\n      let numberOfSpeed = 0;\n\n      function configureRectSpeed() {\n        const speedUpGame = setInterval(() => {\n          numberOfSpeed++;\n          rectangles.forEach(rect => {\n            rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n            rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n          });\n\n          if (numberOfSpeed === 4) {\n            clearInterval(speedUpGame);\n          }\n        }, 10000);\n      } //Returns true if mouse is in player rectangle\n\n\n      function isCursorInRect(x, y, rect) {\n        return x > rect.x && x < rect.x + rect.width && y > rect.y && y < rect.y + rect.height;\n      } // // Returns true if collision\n      // function isCursorInRect(x,y,rect){\n      //   return((x > rect.x) && (x < rect.x + rect.width) && (y > rect.y) && (y < rect.y + rect.height));\n      // }\n\n\n      canvas.addEventListener(\"mousedown\", e => {\n        //Get X & Y coordinates in relation to canvas\n        const pos = {\n          x: e.clientX - canvas.offsetLeft,\n          y: e.clientY - canvas.offsetTop\n        }; //See if they clicked on the red square in particular\n\n        if (isCursorInRect(pos.x, pos.y, playerRect)) {\n          //Start timer\n          // if(!hasGameStarted){\n          //     startDate = new Date();\n          //     // configureRectSpeed();\n          // }\n          setControlPlayer(true);\n          setHasGameStarted(true);\n          setStart(true);\n        }\n      }); // canvas.addEventListener('mousedown', on_canvas_down, false);\n      //\n      // function on_canvas_down(ev) {\n      //\n      //     // get x & y coordinates in relation to the canvas\n      //\n      //     var x = ev.clientX - this.offsetLeft;\n      //     var y = ev.clientY - this.offsetTop;\n      //\n      //     // See if they clicked on red square\n      //     if(isCursorInRect(x,y,playerRect)){\n      //       //\n      //       if(!hasGameStarted){\n      //         startDate = new Date();\n      //         configureRectSpeed();\n      //       }\n      //       setControlPlayer(true);\n      //       setHasGameStarted(true);\n      //\n      //     }\n      //\n      // }\n\n      canvas.addEventListener(\"mousemove\", e => {\n        if (controlPlayer && !hasGameOver) {\n          //Get X & Y coordinates in relation to canvas\n          const pos = {\n            x: e.clientX - canvas.offsetLeft,\n            y: e.clientY - canvas.offsetTop\n          };\n          playerRect.x = pos.x - 25;\n          playerRect.y = pos.y - 25;\n        }\n      }); // canvas.addEventListener('mousemove', on_canvas_move, false);\n      //\n      //\n      //   function on_canvas_move(ev) {\n      //\n      //     if(controlPlayer && !hasGameOver){\n      //       // get x & y coordinates in relation to the canvas\n      //\n      //       var x = ev.clientX - this.offsetLeft;\n      //       var y = ev.clientY - this.offsetTop;\n      //\n      //       playerRect.x = x - 25;\n      //       playerRect.y = y - 25;\n      //     }\n      //     console.log(x,\"xxxxxxxxxx\")\n      // }\n\n      canvas.addEventListener(\"mouseup\", () => {\n        setControlPlayer(false);\n      }); // canvas.addEventListener('mouseup', on_canvas_up, false);\n      // function on_canvas_up(ev) {\n      //\n      //   setControlPlayer(false);\n      // }\n\n      requestAnimationFrame(renderLoop); // rAF to start animation\n\n      function renderLoop(time) {\n        // rAF callback\n        ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n        drawBorder();\n        drawRect();\n\n        if (hasGameStarted) {\n          //Get the blue rectangle to start moving\n          moveRectangle();\n        } //Detect whether rectangles hit edge of canvas\n\n\n        borderRectangleCollisionDetection(); //Detect whether player makes contact with border\n\n        playerCollisionDetection(); //Detect whether player makes contact with rectangle\n\n        rectangleCollisionDetection();\n      }\n\n      requestAnimationFrame(renderLoop); // request next frame\n      // window.requestAnimationFrame(draw);\n    };\n\n    init();\n  }, [controlPlayer, hasGameStarted, hasGameOver, canvas, ctx]); //     const timer = window.setInterval( async() => {\n  // }, 1000);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"top\",\n    children: [isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"siteTitle\",\n      style: {\n        fontSize: '30px'\n      },\n      children: \"You Scored Bad Luck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 20\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(ReactAudioPlayer, {\n      src: ohno,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 564,\n      columnNumber: 20\n    }, this), exit ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/JetswapXTreasureBlox1/:top\",\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 576,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 574,\n      columnNumber: 7\n    }, this), redirectLevel1More ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/Game2MoreGame2/:top\",\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 583,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 582,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 586,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n      children: [\"Fighter Pilot \", timeleft, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 595,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"600\",\n        height: \"600\",\n        id: \"canvas\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 594,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 561,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FighterScreen, \"WpNCPkR/VMeD0dn/oCZz/n8o3GY=\");\n\n_c = FighterScreen;\nexport default FighterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FighterScreen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js"],"names":["useState","useRef","useEffect","useCallback","Button","Container","Nav","Navbar","NavDropdown","useSound","ohno","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactAudioPlayer","FighterScreen","props","controlPlayer","setControlPlayer","hasGameStarted","setHasGameStarted","hasGameOver","setHasGameOver","canvas","setCanvas","ctx","setCtx","exit","setExit","isGameOver","setIsGameOver","redirectLevel1More","setredirectLevel1More","timeleft","setTimeleft","start","setStart","startDate","playerRect","x","y","width","height","rectangles","dx","dy","color","gameOverTime","setTimeout","timer","console","log","handleMore","init","document","getElementById","drawRect","fillStyle","fillRect","forEach","rect","drawBorder","clearRect","gameOver","playerCollisionDetection","isRectangleCollision","rect1","rect2","rectangleCollisionDetection","moveRectangle","borderRectangleCollisionDetection","numberOfSpeed","configureRectSpeed","speedUpGame","setInterval","clearInterval","isCursorInRect","addEventListener","e","pos","clientX","offsetLeft","clientY","offsetTop","requestAnimationFrame","renderLoop","time","fontSize"],"mappings":"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","sourcesContent":["\nimport { useState, useRef, useEffect, useCallback } from \"react\";\n\n// import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\nimport { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound';\n//\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\nimport './style.css';\n\nimport ohno from './assets/troy_oh_no.mp4';\n\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n// Hook\n\n\n\n\nconst FighterScreen = (props) =>{\n\n\n  var [controlPlayer, setControlPlayer]= useState(false)\n  var [hasGameStarted, setHasGameStarted]= useState(false)\n  var [hasGameOver, setHasGameOver]= useState(false)\n  var [canvas, setCanvas]= useState(false)\n  var [ctx, setCtx]= useState(false)\n  var [exit,setExit] = useState(true);\n  var [isGameOver, setIsGameOver]= useState(false)\n  var [redirectLevel1More,setredirectLevel1More] = useState(false);\n  const [timeleft,setTimeleft] = useState(5)\n  const [start,setStart] = useState(false)\n\n\n\n\n  // Prevent game from working whilst page reloads\n  let startDate = null;\n\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n}\n//Game Elements\nlet rectangles = [\n    {\n        x: 75,\n        y: 75,\n        dx: 5,\n        dy: 4,\n        width: 75,\n        height: 75,\n        color: \"#000099\"\n    },\n    {\n        x: 450,\n        y: 75,\n        dx: 5,\n        dy: 4,\n        width: 75,\n        height: 75,\n        color: \"#000099\"\n    },\n    {\n        x: 265,\n        y: 450,\n        dx: 5,\n        dy: 4,\n        width: 75,\n        height: 75,\n        color: \"#000099\"\n    },\n    // {\n    //     x: 400,\n    //     y: 75,\n    //     dx: -5,\n    //     dy: 5.5,\n    //     width: 80,\n    //     height: 60,\n    //     color: \"#000099\"\n    // },\n    // {\n    //     x: 75,\n    //     y: 445,\n    //     dx: 5,\n    //     dy: -5,\n    //     width: 40,\n    //     height: 80,\n    //     color: \"#000099\"\n    // },\n    // {\n    //     x: 420,\n    //     y: 450,\n    //     dx: -5,\n    //     dy: -5,\n    //     width: 130,\n    //     height: 25,\n    //     color: \"#000099\"\n    // }\n]\n\n\n\n\n\n      const gameOverTime = () => {\n\n        setIsGameOver(true);\n        setExit(false);\n\n      }\n\n      useEffect(() => {\n          if (start){\n            setTimeout(() => {\n\n\n              if (timeleft > 0) {\n                var timer = timeleft -1\n                setTimeleft(timer)\n              }\n\n\n              if (timeleft == 0){\n\n                console.log(\"wiiiiiinnnnnnnn\")\n\n                setTimeout(handleMore,500);\n                setStart(false);\n\n              }\n            }, 1000)\n          }\n      })\n\n\n      function handleMore()  {\n        setredirectLevel1More(true)\n\n      }\n\n\n\n\n\n\n\n\nuseEffect(() => {\n\n    const init = async() => {\n        const canvas = document.getElementById(\"canvasgun\");\n        // const ctx = canvas.getContext(\"2d\");\n\n\n\n      //\n      // function millisecondsToMinutes(millis){\n      //     let minutes = Math.floor(millis / 60000);\n      //     let seconds = ((millis % 60000) / 1000).toFixed(0);\n      //     return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n      // }\n\n      // Global Varabales\n\n\n      // function update() {\n      //     ctx.clearRect(0,0,canvas.width,canvas.height);\n      //     drawBorder();\n      //     drawRect();\n      //\n      //     if(hasGameStarted){\n      //         //Get the blue rectangle to start moving\n      //         moveRectangle();\n      //     }\n      //     //Detect whether rectangles hit edge of canvas\n      //     borderRectangleCollisionDetection();\n      //     //Detect whether player makes contact with border\n      //     playerCollisionDetection();\n      //     //Detect whether player makes contact with rectangle\n      //     rectangleCollisionDetection();\n      //     requestAnimationFrame(update);\n      // }\n      //\n      // //Call update method on initial document load\n      // update();\n\n\n\n\n\n      //Render rectangles to canvas.\n      function drawRect() {\n          //Draw playerRect first\n          ctx.fillStyle = \"#990000\";\n          ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n          rectangles.forEach(rect => {\n              ctx.fillStyle = rect.color;\n              ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n          })\n      }\n\n      //\n      // function update(){\n      //   ctx.clearRect(0,0,canvas.width,canvas.height);\n      //\n      //   drawBoarder();\n      //   drawRect();\n      //\n      //   if (hasGameStarted){\n      //     moveRectangle();\n      //   }\n      //\n      //   playerCollisionDetection();\n      //   rectangleCollisionDetection();\n      //   boarderRectangleDetection();\n      //   requestAnimationFrame(update);\n      // }\n      //\n      // // call update methord on initial document load\n      // update();\n\n\n\n\n\n      // Canvas black boarder\n\n      //Canvas Black Border\n      function drawBorder() {\n          ctx.fillStyle = 'black';\n          ctx.fillRect(0,0,canvas.width,canvas.height);\n          ctx.clearRect(25,25,550,550);\n      }\n\n      // function drawBoarder(){\n      //   ctx.fillStyle = \"black\";\n      //   ctx.fillRect(0,0,canvas.width,canvas.height);\n      //   ctx.clearRect(50,50,500,500);\n      // }\n\n\n      // function millisecondsToMiutes(millis){\n      //   let minutes = Math.floor(millis/60000);\n      //   let seconds = Math.floor((millis % 60000)/1000);\n      //   return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n      //\n      // }\n\n\n\n\n\n      function gameOver() {\n\n        gameOverTime()\n\n      }\n\n\n      // Render rectangles to canvas\n\n      //Render rectangles to canvas.\n      function drawRect() {\n          //Draw playerRect first\n          ctx.fillStyle = \"#990000\";\n          ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n          rectangles.forEach(rect => {\n              ctx.fillStyle = rect.color;\n              ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n          })\n      }\n\n      // function drawRect(){\n      //   // Draw player rect first\n      //   ctx.fillStyle = \"#901234\";\n      //   ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n      //\n      //   rectangles.forEach(rect => {\n      //     ctx.fillStyle = rect.color;\n      //     ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n      //   });\n      //\n      // }\n\n      //Detect whether player makes contact with border\nfunction playerCollisionDetection() {\n    if(\n        playerRect.x + playerRect.width > 575 ||\n        playerRect.x < 25 ||\n        playerRect.y + playerRect.height > 575 ||\n        playerRect.y < 25\n    ){\n        gameOver();\n    }\n}\n\n      // collision\n      // function playerCollisionDetection(){\n      //   if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n      //   ){\n      //     gameOver();\n      //   }\n      // }\n\n      //Returns true if 2 rectangles are colliding\nfunction isRectangleCollision(rect1, rect2){\n    return !(\n        rect1.x+10>rect2.x+rect2.width ||\n        rect1.x+rect1.width-10<rect2.x ||\n        rect1.y+10>rect2.y+rect2.height ||\n        rect1.y+rect1.height-10<rect2.y\n    );\n}\n\n      // function isRectangleCollision(rect1,rect2){\n      //   return !(\n      //     rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n      //   );\n      // }\n\n      //Detect whether player makes contact with rectangle\nfunction rectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n        if(isRectangleCollision(playerRect, rect)){\n            gameOver();\n        }\n    })\n}\n      //\n      // function rectangleCollisionDetection(){\n      //   rectangles.forEach(rect =>{\n      //     if(isRectangleCollision(playerRect,rect)){\n      //       gameOver();\n      //     }\n      //   })\n      // }\n\n      //Get the blue rectangle to start moving\nfunction moveRectangle() {\n    rectangles.forEach(rect => {\n        rect.x += rect.dx;\n        rect.y += rect.dy;\n    })\n}\n\n      // function moveRectangle(){\n      //   rectangles.forEach(rect => {\n      //     rect.x += rect.dx;\n      //     rect.y += rect.dy;\n      //   })\n      // }\n\n      //Detect whether rectangles hit edge of canvas\nfunction borderRectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n        if(rect.x + rect.width > canvas.width || rect.x < 0){\n            rect.dx *= -1;\n        }\n        if(rect.y + rect.height > canvas.height || rect.y < 0){\n            rect.dy *= -1;\n        }\n    })\n}\n\n      // function boarderRectangleDetection(){\n      //   rectangles.forEach(rect=>{\n      //     if(rect.x + rect.width > canvas.width || rect.x < 0){\n      //       rect.dx *= -1;\n      //     }\n      //     if(rect.y + rect.height > canvas.height || rect.y < 0){\n      //       rect.dy *= -1;\n      //     }\n      //   })\n      // }\n\n      let numberOfSpeed = 0;\n\n\n\n      function configureRectSpeed() {\n          const speedUpGame = setInterval(() => {\n              numberOfSpeed++;\n              rectangles.forEach(rect => {\n                  rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n                  rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n              });\n              if(numberOfSpeed === 4){\n                  clearInterval(speedUpGame);\n              }\n          }, 10000)\n      }\n\n\n\n\n\n\n\n      //Returns true if mouse is in player rectangle\n      function isCursorInRect(x,y,rect){\n          return(x>rect.x && x<rect.x+rect.width && y>rect.y && y<rect.y+rect.height);\n      }\n\n      // // Returns true if collision\n      // function isCursorInRect(x,y,rect){\n      //   return((x > rect.x) && (x < rect.x + rect.width) && (y > rect.y) && (y < rect.y + rect.height));\n      // }\n\n\n\n      canvas.addEventListener(\"mousedown\", e => {\n          //Get X & Y coordinates in relation to canvas\n          const pos = {\n              x: e.clientX - canvas.offsetLeft,\n              y: e.clientY - canvas.offsetTop\n          }\n          //See if they clicked on the red square in particular\n          if(isCursorInRect(pos.x,pos.y,playerRect)){\n              //Start timer\n              // if(!hasGameStarted){\n              //     startDate = new Date();\n              //     // configureRectSpeed();\n              // }\n              setControlPlayer(true);\n              setHasGameStarted(true);\n              setStart(true);\n          }\n      })\n\n\n      // canvas.addEventListener('mousedown', on_canvas_down, false);\n      //\n      // function on_canvas_down(ev) {\n      //\n      //     // get x & y coordinates in relation to the canvas\n      //\n      //     var x = ev.clientX - this.offsetLeft;\n      //     var y = ev.clientY - this.offsetTop;\n      //\n      //     // See if they clicked on red square\n      //     if(isCursorInRect(x,y,playerRect)){\n      //       //\n      //       if(!hasGameStarted){\n      //         startDate = new Date();\n      //         configureRectSpeed();\n      //       }\n      //       setControlPlayer(true);\n      //       setHasGameStarted(true);\n      //\n      //     }\n      //\n      // }\n\n\n\n\n\n      canvas.addEventListener(\"mousemove\", e => {\n          if(controlPlayer && !hasGameOver){\n          //Get X & Y coordinates in relation to canvas\n          const pos = {\n              x: e.clientX - canvas.offsetLeft,\n              y: e.clientY - canvas.offsetTop\n          };\n          playerRect.x = pos.x - 25;\n          playerRect.y = pos.y - 25;\n          }\n      })\n\n\n      // canvas.addEventListener('mousemove', on_canvas_move, false);\n      //\n      //\n      //   function on_canvas_move(ev) {\n      //\n      //     if(controlPlayer && !hasGameOver){\n      //       // get x & y coordinates in relation to the canvas\n      //\n      //       var x = ev.clientX - this.offsetLeft;\n      //       var y = ev.clientY - this.offsetTop;\n      //\n      //       playerRect.x = x - 25;\n      //       playerRect.y = y - 25;\n      //     }\n      //     console.log(x,\"xxxxxxxxxx\")\n      // }\n\n\n\n\n      canvas.addEventListener(\"mouseup\", () => {\n          setControlPlayer(false);\n      })\n\n\n      // canvas.addEventListener('mouseup', on_canvas_up, false);\n      // function on_canvas_up(ev) {\n      //\n      //   setControlPlayer(false);\n      // }\n\n      requestAnimationFrame(renderLoop);  // rAF to start animation\n\n      function renderLoop(time) {  // rAF callback\n          ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n\n          drawBorder();\n          drawRect();\n\n          if(hasGameStarted){\n              //Get the blue rectangle to start moving\n              moveRectangle();\n          }\n          //Detect whether rectangles hit edge of canvas\n          borderRectangleCollisionDetection();\n          //Detect whether player makes contact with border\n          playerCollisionDetection();\n          //Detect whether player makes contact with rectangle\n          rectangleCollisionDetection();\n      }\n\n          requestAnimationFrame(renderLoop);  // request next frame\n\n\n      // window.requestAnimationFrame(draw);\n      }\n      init()\n\n\n\n    }, [controlPlayer,hasGameStarted,hasGameOver,canvas,ctx]);\n\n\n\n\n\n//     const timer = window.setInterval( async() => {\n// }, 1000);\n\n\n\n\n  return (\n    <div id=\"top\">\n\n    {isGameOver && <div className=\"siteTitle\" style={{fontSize: '30px'}}>You Scored Bad Luck</div>}\n    {isGameOver && <ReactAudioPlayer\n      src={ohno}\n      autoPlay\n    />}\n\n    {exit?(\n      <div>\n\n      </div>\n    ):(\n      <div>\n\n      <Redirect to=\"/JetswapXTreasureBlox1/:top\" {...props}/>\n\n      </div>\n    )}\n\n    {redirectLevel1More?(\n      <div>\n      <Redirect to=\"/Game2MoreGame2/:top\" {...props}/>\n      </div>\n    ):(\n      <div>\n\n      </div>\n\n    )}\n\n\n\n<center>\nFighter Pilot {timeleft}<br/>\n\n<canvas width=\"600\" height=\"600\" id=\"canvas\"> </canvas>\n\n</center>\n<br/>\n    </div>\n  );\n}\n\nexport default FighterScreen;\n"]},"metadata":{},"sourceType":"module"}