{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/BloxEscape/Screen.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Bird from './components/Bird';\nimport Obstacles from './components/Obstacles';\nimport { Tooltip, OverlayTrigger, Form, ButtonGroup, ButtonToolbar, CardColumns, CardGroup, Card, Row, Col, Button, Container, Nav, Navbar, NavDropdown, Modal } from 'react-bootstrap'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useWindowSize() {\n  _s();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\n_s(useWindowSize, \"WMqaMVAPr0u8CJVTsAIdEuYrbbM=\");\n\nconst Screen = props => {\n  _s2();\n\n  const {\n    width,\n    height\n  } = useWindowSize();\n  console.log(width, \"Width\");\n  console.log(height, \"height\");\n  const screenWidth = width;\n  const screenHeight = height;\n  const birdLeft = screenWidth / 2;\n  const [birdBottom, setBirdBottom] = useState(screenHeight / 2);\n  const [obstaclesLeft, setObstaclesLeft] = useState(screenWidth);\n  const [obstaclesLeftTwo, setObstaclesLeftTwo] = useState(screenWidth + screenWidth / 2 + 30);\n  const [obstaclesNegHeight, setObstaclesNegHeight] = useState(0);\n  const [obstaclesNegHeightTwo, setObstaclesNegHeightTwo] = useState(0);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [score, setScore] = useState(0);\n  const gravity = 3;\n  let obstacleWidth = 60;\n  let obstacleHeight = 300;\n  let gap = 200;\n  let gameTimerId;\n  let obstaclesTimerId;\n  let obstaclesTimerIdTwo; //start bird falling\n\n  useEffect(() => {\n    if (birdBottom > 0) {\n      gameTimerId = setInterval(() => {\n        setBirdBottom(birdBottom => birdBottom - gravity);\n      }, 30);\n      return () => {\n        clearInterval(gameTimerId);\n      };\n    } //if i dont have birdBottom as a dependecy, it wont stop\n\n  }, [birdBottom]);\n  console.log(birdBottom); // const jump = () => {\n  //   if (!isGameOver && (birdBottom < screenHeight)) {\n  //     setBirdBottom(birdBottom => birdBottom + 50)\n  //     console.log('jumped')\n  //   }\n  // }\n  //\n  // //start first obstacle\n  // useEffect(() => {\n  //   if (obstaclesLeft > -60) {\n  //     obstaclesTimerId = setInterval(() => {\n  //       setObstaclesLeft(obstaclesLeft => obstaclesLeft - 5)\n  //     }, 30)\n  //     return () => {\n  //       clearInterval(obstaclesTimerId)\n  //     }\n  //   } else {\n  //     setScore(score => score +1)\n  //     setObstaclesLeft(screenWidth)\n  //     setObstaclesNegHeight( - Math.random() * 100)\n  //   }\n  // }, [obstaclesLeft])\n  //\n  // //start second obstacle\n  // useEffect(() => {\n  //   if (obstaclesLeftTwo > -60) {\n  //     obstaclesTimerIdTwo = setInterval(() => {\n  //       setObstaclesLeftTwo(obstaclesLeftTwo => obstaclesLeftTwo - 5)\n  //     }, 30)\n  //       return () => {\n  //         clearInterval(obstaclesTimerIdTwo)\n  //       }\n  //     } else {\n  //         setScore(score => score +1)\n  //         setObstaclesLeftTwo(screenWidth)\n  //         setObstaclesNegHeightTwo( - Math.random() * 100)\n  //       }\n  // }, [obstaclesLeftTwo])\n  // //check for collisions\n  // useEffect(() => {\n  //   console.log(obstaclesLeft)\n  //   console.log(screenWidth/2)\n  //   console.log(obstaclesLeft > screenWidth/2)\n  //   if (\n  //     ((birdBottom < (obstaclesNegHeight + obstacleHeight + 30) ||\n  //     birdBottom > (obstaclesNegHeight + obstacleHeight + gap -30)) &&\n  //     (obstaclesLeft > screenWidth/2 -30 && obstaclesLeft < screenWidth/2 + 30 )\n  //     )\n  //     ||\n  //     ((birdBottom < (obstaclesNegHeightTwo + obstacleHeight + 30) ||\n  //     birdBottom > (obstaclesNegHeightTwo + obstacleHeight + gap -30)) &&\n  //     (obstaclesLeftTwo > screenWidth/2 -30 && obstaclesLeftTwo < screenWidth/2 + 30 )\n  //     )\n  //     )\n  //     {\n  //     console.log('game over')\n  //     gameOver()\n  //   }\n  // })\n\n  const gameOver = () => {\n    clearInterval(gameTimerId);\n    clearInterval(obstaclesTimerId);\n    clearInterval(obstaclesTimerIdTwo);\n    setIsGameOver(true);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontSize: '30px'\n      },\n      children: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(Bird, {\n      birdBottom: birdBottom,\n      birdLeft: birdLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Obstacles, {\n      color: 'green',\n      obstacleWidth: obstacleWidth,\n      obstacleHeight: obstacleHeight,\n      randomBottom: obstaclesNegHeight,\n      gap: gap,\n      obstaclesLeft: obstaclesLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Obstacles, {\n      color: 'yellow',\n      obstacleWidth: obstacleWidth,\n      obstacleHeight: obstacleHeight,\n      randomBottom: obstaclesNegHeightTwo,\n      gap: gap,\n      obstaclesLeft: obstaclesLeftTwo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Screen, \"0S/R4/oCxV7w8MTwufYogdHAeKE=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = Screen;\nexport default Screen;\n\nvar _c;\n\n$RefreshReg$(_c, \"Screen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/BloxEscape/Screen.js"],"names":["React","useEffect","useState","Bird","Obstacles","Tooltip","OverlayTrigger","Form","ButtonGroup","ButtonToolbar","CardColumns","CardGroup","Card","Row","Col","Button","Container","Nav","Navbar","NavDropdown","Modal","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Screen","props","console","log","screenWidth","screenHeight","birdLeft","birdBottom","setBirdBottom","obstaclesLeft","setObstaclesLeft","obstaclesLeftTwo","setObstaclesLeftTwo","obstaclesNegHeight","setObstaclesNegHeight","obstaclesNegHeightTwo","setObstaclesNegHeightTwo","isGameOver","setIsGameOver","score","setScore","gravity","obstacleWidth","obstacleHeight","gap","gameTimerId","obstaclesTimerId","obstaclesTimerIdTwo","setInterval","clearInterval","gameOver","fontSize"],"mappings":"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","sourcesContent":["import React, { useEffect, useState} from 'react';\nimport Bird from './components/Bird'\nimport Obstacles from './components/Obstacles'\nimport {Tooltip,OverlayTrigger,Form,ButtonGroup,ButtonToolbar,CardColumns,CardGroup,Card,Row,Col,Button,Container,Nav,Navbar,NavDropdown,Modal } from 'react-bootstrap';\n\n// Hook\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\n\nconst Screen = (props) =>{\n  const { width, height } = useWindowSize();\n  console.log(width,\"Width\")\n  console.log(height,\"height\")\n\n  const screenWidth = width\n  const screenHeight = height\n  const birdLeft = screenWidth / 2\n  const [birdBottom, setBirdBottom]= useState(screenHeight / 2)\n  const [obstaclesLeft, setObstaclesLeft]= useState(screenWidth)\n  const [obstaclesLeftTwo, setObstaclesLeftTwo]= useState(screenWidth + screenWidth/2 + 30)\n  const [obstaclesNegHeight, setObstaclesNegHeight]= useState(0)\n  const [obstaclesNegHeightTwo, setObstaclesNegHeightTwo]= useState(0)\n  const [isGameOver, setIsGameOver]= useState(false)\n  const [score, setScore]= useState(0)\n  const gravity = 3\n  let obstacleWidth = 60\n  let obstacleHeight = 300\n  let gap = 200\n  let gameTimerId\n  let obstaclesTimerId\n  let obstaclesTimerIdTwo\n\n\n\n//start bird falling\n  useEffect(() => {\n    if (birdBottom > 0) {\n      gameTimerId = setInterval(() => {\n        setBirdBottom(birdBottom => birdBottom - gravity)\n      },30)\n\n      return () => {\n        clearInterval(gameTimerId)\n      }\n    }\n    //if i dont have birdBottom as a dependecy, it wont stop\n  }, [birdBottom])\n  console.log(birdBottom)\n\n  // const jump = () => {\n  //   if (!isGameOver && (birdBottom < screenHeight)) {\n  //     setBirdBottom(birdBottom => birdBottom + 50)\n  //     console.log('jumped')\n  //   }\n  // }\n  //\n  // //start first obstacle\n  // useEffect(() => {\n  //   if (obstaclesLeft > -60) {\n  //     obstaclesTimerId = setInterval(() => {\n  //       setObstaclesLeft(obstaclesLeft => obstaclesLeft - 5)\n  //     }, 30)\n  //     return () => {\n  //       clearInterval(obstaclesTimerId)\n  //     }\n  //   } else {\n  //     setScore(score => score +1)\n  //     setObstaclesLeft(screenWidth)\n  //     setObstaclesNegHeight( - Math.random() * 100)\n  //   }\n  // }, [obstaclesLeft])\n  //\n  // //start second obstacle\n  // useEffect(() => {\n  //   if (obstaclesLeftTwo > -60) {\n  //     obstaclesTimerIdTwo = setInterval(() => {\n  //       setObstaclesLeftTwo(obstaclesLeftTwo => obstaclesLeftTwo - 5)\n  //     }, 30)\n  //       return () => {\n  //         clearInterval(obstaclesTimerIdTwo)\n  //       }\n  //     } else {\n  //         setScore(score => score +1)\n  //         setObstaclesLeftTwo(screenWidth)\n  //         setObstaclesNegHeightTwo( - Math.random() * 100)\n  //       }\n  // }, [obstaclesLeftTwo])\n\n    // //check for collisions\n    // useEffect(() => {\n    //   console.log(obstaclesLeft)\n    //   console.log(screenWidth/2)\n    //   console.log(obstaclesLeft > screenWidth/2)\n    //   if (\n    //     ((birdBottom < (obstaclesNegHeight + obstacleHeight + 30) ||\n    //     birdBottom > (obstaclesNegHeight + obstacleHeight + gap -30)) &&\n    //     (obstaclesLeft > screenWidth/2 -30 && obstaclesLeft < screenWidth/2 + 30 )\n    //     )\n    //     ||\n    //     ((birdBottom < (obstaclesNegHeightTwo + obstacleHeight + 30) ||\n    //     birdBottom > (obstaclesNegHeightTwo + obstacleHeight + gap -30)) &&\n    //     (obstaclesLeftTwo > screenWidth/2 -30 && obstaclesLeftTwo < screenWidth/2 + 30 )\n    //     )\n    //     )\n    //     {\n    //     console.log('game over')\n    //     gameOver()\n    //   }\n    // })\n\n    const gameOver = () => {\n      clearInterval(gameTimerId)\n      clearInterval(obstaclesTimerId)\n      clearInterval(obstaclesTimerIdTwo)\n      setIsGameOver(true)\n    }\n\n\n  return (\n    <div >\n\n\n        {isGameOver && <div style={{fontSize: '30px'}}>{score}</div>}\n        <Bird\n          birdBottom = {birdBottom}\n          birdLeft = {birdLeft}\n        />\n        <Obstacles\n          color={'green'}\n          obstacleWidth = {obstacleWidth}\n          obstacleHeight = {obstacleHeight}\n          randomBottom = {obstaclesNegHeight}\n          gap = {gap}\n          obstaclesLeft = {obstaclesLeft}\n        />\n        <Obstacles\n          color={'yellow'}\n          obstacleWidth = {obstacleWidth}\n          obstacleHeight = {obstacleHeight}\n          randomBottom = {obstaclesNegHeightTwo}\n          gap = {gap}\n          obstaclesLeft = {obstaclesLeftTwo}\n        />\n\n    </div>\n  );\n}\n\nexport default Screen;\n"]},"metadata":{},"sourceType":"module"}