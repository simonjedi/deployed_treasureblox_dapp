{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js\",\n    _s = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\"; // import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\n\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound'; //\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\n\nimport './style.css';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactAudioPlayer from 'react-audio-player'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction useWindowSize() {\n  _s();\n\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined\n  });\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    } // Add event listener\n\n\n    window.addEventListener(\"resize\", handleResize); // Call handler right away so state gets updated with initial window size\n\n    handleResize(); // Remove event listener on cleanup\n\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize;\n}\n\n_s(useWindowSize, \"WMqaMVAPr0u8CJVTsAIdEuYrbbM=\");\n\nconst FighterScreen = props => {\n  _s3();\n\n  var _s2 = $RefreshSig$();\n\n  const {\n    width,\n    height\n  } = useWindowSize();\n  useEffect(_s2(() => {\n    _s2();\n\n    // State for storing mouse coordinates\n    const [coords, setCoords] = useState({\n      x: 0,\n      y: 0\n    }); // Event handler utilizing useCallback ...\n    // ... so that reference never changes.\n\n    const handler = useCallback(({\n      clientX,\n      clientY\n    }) => {\n      // Update coordinates\n      setCoords({\n        x: clientX,\n        y: clientY\n      });\n    }, [setCoords]); // Add event listener using our hook\n\n    useEventListener(\"mousemove\", handler);\n    const timer = window.setInterval(async () => {\n      const canvas = document.getElementById(\"canvas\");\n      const ctx = canvas.getContext(\"2d\"); // Global Varabales\n\n      let controlPlayer = false;\n      let hasGameStarted = false; // Prevent game from working whilst page reloads\n\n      let hasGameOver = false;\n      let startDate = null;\n\n      function millisecondsToMiutes(millis) {\n        let minutes = Math.floor(millis / 60000);\n        let seconds = Math.floor(millis % 60000 / 1000);\n        return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n      }\n\n      function gameOver() {\n        if (!hasGameOver) {\n          let endDate = new Date();\n          let timeDiff = endDate - startDate;\n\n          if (timeDiff < 60000) {\n            alert('You survived ' + timeDiff / 1000 + \" seconds!\");\n          } else {\n            let minutesSurvived = millisecondsToMiutes(timeDiff);\n            alert('You survived ${minutesSurvived} WOW!');\n          }\n\n          hasGameOver = true;\n        }\n      } // Canvas black boarder\n\n\n      function drawBoarder() {\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.clearRect(50, 50, 500, 500);\n      }\n\n      let playerRect = {\n        x: 275,\n        y: 275,\n        width: 50,\n        height: 50\n      }; // Game Elements\n\n      let rectangles = [{\n        x: 75,\n        y: 75,\n        dx: 5,\n        dy: 4,\n        width: 75,\n        height: 75,\n        color: \"#000099\"\n      }, {\n        x: 400,\n        y: 75,\n        dx: -5,\n        dy: 5.5,\n        width: 80,\n        height: 60,\n        color: \"#000099\"\n      }, {\n        x: 75,\n        y: 445,\n        dx: 5,\n        dy: -5,\n        width: 40,\n        height: 80,\n        color: \"#000099\"\n      }, {\n        x: 420,\n        y: 450,\n        dx: -5,\n        dy: -5,\n        width: 130,\n        height: 25,\n        color: \"#000099\"\n      }]; // Render rectangles to canvas\n\n      function drawRect() {\n        // Draw player rect first\n        ctx.fillStyle = \"#901234\";\n        ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n        rectangles.forEach(rect => {\n          ctx.fillStyle = rect.color;\n          ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n        });\n      } // collision\n\n\n      function playerCollisionDetection() {\n        if (playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50) {\n          gameOver();\n        }\n      }\n\n      function isRectangleCollision(rect1, rect2) {\n        return !(rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y);\n      }\n\n      function rectangleCollisionDetection() {\n        rectangles.forEach(rect => {\n          if (isRectangleCollision(playerRect, rect)) {\n            gameOver();\n          }\n        });\n      }\n\n      function moveRectangle() {\n        rectangles.forEach(rect => {\n          rect.x += rect.dx;\n          rect.y += rect.dy;\n        });\n      }\n\n      function boarderRectangleDetection() {\n        rectangles.forEach(rect => {\n          if (rect.x + rect.width > canvas.width || rect.x < 0) {\n            rect.dx *= -1;\n          }\n\n          if (rect.y + rect.height > canvas.height || rect.y < 0) {\n            rect.dy *= -1;\n          }\n        });\n      }\n\n      let numberOfSpeed = 0;\n\n      function configureRectSpeed() {\n        const speedUpGame = setInterval(() => {\n          numberOfSpeed++;\n          rectangles.forEach(rect => {\n            rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n            rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n          });\n\n          if (numberOfSpeed === 4) {\n            clearInterval(speedUpGame);\n          }\n        }, 10000);\n      }\n\n      function update() {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        drawBoarder();\n        drawRect();\n\n        if (hasGameStarted) {\n          moveRectangle();\n        }\n\n        playerCollisionDetection();\n        rectangleCollisionDetection();\n        boarderRectangleDetection();\n        requestAnimationFrame(update);\n      } // call update methord on initial document load\n\n\n      update(); // Returns true if collision\n\n      function isCursorInRect(x, y, rect) {\n        return x > rect.x && x < rect.x + rect.width && y > rect.y && y < rect.y + rect.height;\n      }\n\n      canvas.addEventListener('mousedown', e => {\n        // get x & y coordinates in relation to the canvas\n        var pos = {\n          x: e.clientX - canvas.offsetLeft,\n          y: e.clientY - canvas.offsetTop\n        }; // See if they clicked on red square\n\n        if (isCursorInRect(pos.x, pos.y, playerRect)) {\n          //\n          if (!hasGameStarted) {\n            startDate = new Date();\n            configureRectSpeed();\n          }\n\n          hasGameStarted = true;\n          controlPlayer = true;\n        }\n      });\n      canvas.addEventListener(\"mousemove\", e => {\n        if (controlPlayer && !hasGameOver) {\n          // get x & y coordinates in relation to the canvas\n          var pos = {\n            x: e.clientX - canvas.offsetLeft,\n            y: e.clientY - canvas.offsetTop\n          };\n          playerRect.x = pos.x - 25;\n          playerRect.y = pos.y - 25;\n        }\n      });\n      canvas.addEventListener(\"mouseup\", () => {\n        controlPlayer = false;\n      });\n    }, 1000);\n  }, \"t/H5UTdfhBfKGxyYfV6Eiw5Sams=\", true), []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"center\", {\n      children: [\"Fighter Pilot\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"600\",\n        height: \"600\",\n        id: \"canvas\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 325,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(FighterScreen, \"bNiY6OdSHlT+REaiGeQKnvg2CD0=\", false, function () {\n  return [useWindowSize];\n});\n\n_c = FighterScreen;\nexport default FighterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FighterScreen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js"],"names":["React","useState","useEffect","useRef","Button","Container","Nav","Navbar","NavDropdown","useSound","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactAudioPlayer","useWindowSize","windowSize","setWindowSize","width","undefined","height","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","FighterScreen","props","coords","setCoords","x","y","handler","useCallback","clientX","clientY","useEventListener","timer","setInterval","canvas","document","getElementById","ctx","getContext","controlPlayer","hasGameStarted","hasGameOver","startDate","millisecondsToMiutes","millis","minutes","Math","floor","seconds","gameOver","endDate","Date","timeDiff","alert","minutesSurvived","drawBoarder","fillStyle","fillRect","clearRect","playerRect","rectangles","dx","dy","color","drawRect","forEach","rect","playerCollisionDetection","isRectangleCollision","rect1","rect2","rectangleCollisionDetection","moveRectangle","boarderRectangleDetection","numberOfSpeed","configureRectSpeed","speedUpGame","clearInterval","update","requestAnimationFrame","isCursorInRect","e","pos","offsetLeft","offsetTop"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\n// import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\nimport { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound';\n//\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\nimport './style.css';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n// Hook\nfunction useWindowSize() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: undefined,\n    height: undefined,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n  return windowSize;\n}\n\n\n\nconst FighterScreen = (props) =>{\n\n  const { width, height } = useWindowSize();\n\n\n\n  useEffect(() => {\n\n\n    // State for storing mouse coordinates\n  const [coords, setCoords] = useState({ x: 0, y: 0 });\n  // Event handler utilizing useCallback ...\n  // ... so that reference never changes.\n  const handler = useCallback(\n    ({ clientX, clientY }) => {\n      // Update coordinates\n      setCoords({ x: clientX, y: clientY });\n    },\n    [setCoords]\n  );\n  // Add event listener using our hook\n  useEventListener(\"mousemove\", handler);\n\n\n\n\n      const timer = window.setInterval( async() => {\n\n\n\n      const canvas = document.getElementById(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n\n      // Global Varabales\n\n      let controlPlayer = false;\n      let hasGameStarted = false;\n\n\n      // Prevent game from working whilst page reloads\n      let hasGameOver = false;\n      let startDate = null;\n\n      function millisecondsToMiutes(millis){\n        let minutes = Math.floor(millis/60000);\n        let seconds = Math.floor((millis % 60000)/1000);\n        return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n\n      }\n\n      function gameOver(){\n        if(!hasGameOver){\n          let endDate = new Date();\n          let timeDiff = endDate - startDate;\n          if (timeDiff < 60000){\n            alert('You survived '+ timeDiff/1000 +\" seconds!\");\n          }else{\n            let minutesSurvived = millisecondsToMiutes(timeDiff);\n            alert('You survived ${minutesSurvived} WOW!');\n\n          }\n\n          hasGameOver = true;\n        }\n      }\n\n\n      // Canvas black boarder\n\n      function drawBoarder(){\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(0,0,canvas.width,canvas.height);\n        ctx.clearRect(50,50,500,500);\n      }\n\n      let playerRect = {\n        x:275,\n        y:275,\n        width:50,\n        height:50,\n      }\n\n      // Game Elements\n      let rectangles = [\n        {\n          x:75,\n          y:75,\n          dx:5,\n          dy:4,\n          width:75,\n          height:75,\n          color:\"#000099\",\n        },\n        {\n          x:400,\n          y:75,\n          dx:-5,\n          dy:5.5,\n          width:80,\n          height:60,\n          color:\"#000099\",\n        },\n        {\n          x:75,\n          y:445,\n          dx:5,\n          dy:-5,\n          width:40,\n          height:80,\n          color:\"#000099\",\n        },\n        {\n          x:420,\n          y:450,\n          dx:-5,\n          dy:-5,\n          width:130,\n          height:25,\n          color:\"#000099\",\n        },\n      ]\n\n      // Render rectangles to canvas\n\n      function drawRect(){\n        // Draw player rect first\n        ctx.fillStyle = \"#901234\";\n        ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n\n        rectangles.forEach(rect => {\n          ctx.fillStyle = rect.color;\n          ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n        });\n\n      }\n\n      // collision\n      function playerCollisionDetection(){\n        if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n        ){\n          gameOver();\n        }\n      }\n\n      function isRectangleCollision(rect1,rect2){\n        return !(\n          rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n        );\n      }\n\n      function rectangleCollisionDetection(){\n        rectangles.forEach(rect =>{\n          if(isRectangleCollision(playerRect,rect)){\n            gameOver();\n          }\n        })\n      }\n\n      function moveRectangle(){\n        rectangles.forEach(rect => {\n          rect.x += rect.dx;\n          rect.y += rect.dy;\n        })\n      }\n\n      function boarderRectangleDetection(){\n        rectangles.forEach(rect=>{\n          if(rect.x + rect.width > canvas.width || rect.x < 0){\n            rect.dx *= -1;\n          }\n          if(rect.y + rect.height > canvas.height || rect.y < 0){\n            rect.dy *= -1;\n          }\n        })\n      }\n\n      let numberOfSpeed = 0;\n\n      function configureRectSpeed(){\n        const speedUpGame = setInterval(()=>{\n          numberOfSpeed++;\n          rectangles.forEach(rect =>{\n            rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n            rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n\n          });\n          if(numberOfSpeed === 4){\n            clearInterval(speedUpGame);\n          }\n        },10000)\n      }\n\n      function update(){\n        ctx.clearRect(0,0,canvas.width,canvas.height);\n\n        drawBoarder();\n        drawRect();\n\n        if (hasGameStarted){\n          moveRectangle();\n        }\n\n        playerCollisionDetection();\n        rectangleCollisionDetection();\n        boarderRectangleDetection();\n        requestAnimationFrame(update);\n      }\n\n      // call update methord on initial document load\n      update();\n\n\n      // Returns true if collision\n      function isCursorInRect(x,y,rect){\n        return(x > rect.x && x < rect.x+rect.width && y > rect.y && y < rect.y+rect.height);\n      }\n\n      canvas.addEventListener('mousedown', e => {\n\n        // get x & y coordinates in relation to the canvas\n        var pos = {\n          x: e.clientX - canvas.offsetLeft,\n          y: e.clientY - canvas.offsetTop,\n        };\n\n        // See if they clicked on red square\n        if (isCursorInRect(pos.x,pos.y,playerRect)){\n          //\n          if(!hasGameStarted){\n            startDate = new Date();\n            configureRectSpeed();\n          }\n          hasGameStarted = true;\n          controlPlayer = true;\n        }\n\n      });\n\n\n      canvas.addEventListener(\"mousemove\", e => {\n\n        if(controlPlayer && !hasGameOver){\n          // get x & y coordinates in relation to the canvas\n          var pos = {\n            x: e.clientX - canvas.offsetLeft,\n            y: e.clientY - canvas.offsetTop,\n          };\n          playerRect.x = pos.x - 25;\n          playerRect.y = pos.y - 25;\n        }\n\n      })\n\n\n\n      canvas.addEventListener(\"mouseup\", () =>{\n        controlPlayer = false;\n      })\n\n\n}, 1000);\n\n\n    }, []);\n\n\n\n\n\n\n\n  return (\n    <div>\n\n<center>\nFighter Pilot<br/>\n<canvas width=\"600\" height=\"600\" id=\"canvas\"> </canvas>\n\n</center>\n<br/>\n    </div>\n  );\n}\n\nexport default FighterScreen;\n"]},"metadata":{},"sourceType":"module"}