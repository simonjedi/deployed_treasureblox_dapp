{"ast":null,"code":"import { assertType } from \"./misc\";\nimport { isPublishMethod, isPublishParams, isSubscribeMethod, isSubscribeParams, isSubscriptionMethod, isSubscriptionParams, isUnsubscribeMethod, isUnsubscribeParams } from \"./validators\";\nexport function parseSubscribeRequest(request) {\n  if (!isSubscribeMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n  }\n\n  if (!isSubscribeParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n  }\n\n  const params = request.params;\n  assertType(params, \"topic\");\n  return params;\n}\nexport function parsePublishRequest(request) {\n  if (!isPublishMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid publish method\");\n  }\n\n  if (!isPublishParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid publish params\");\n  }\n\n  const params = request.params;\n  assertType(params, \"topic\");\n  assertType(params, \"message\");\n  assertType(params, \"ttl\", \"number\");\n  return params;\n}\nexport function parseUnsubscribeRequest(request) {\n  if (!isUnsubscribeMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n  }\n\n  if (!isUnsubscribeParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n  }\n\n  const params = request.params;\n  assertType(params, \"id\");\n  return params;\n}\nexport function parseSubscriptionRequest(request) {\n  if (!isSubscriptionMethod(request.method)) {\n    throw new Error(\"JSON-RPC Request has invalid subscription method\");\n  }\n\n  if (!isSubscriptionParams(request.params)) {\n    throw new Error(\"JSON-RPC Request has invalid subscription params\");\n  }\n\n  const params = request.params;\n  assertType(params, \"id\");\n  assertType(params, \"data\");\n  return params;\n}","map":{"version":3,"sources":["../../src/parsers.ts"],"names":[],"mappings":"AAGA,SAAS,UAAT,QAA2B,QAA3B;AACA,SACE,eADF,EAEE,eAFF,EAGE,iBAHF,EAIE,iBAJF,EAKE,oBALF,EAME,oBANF,EAOE,mBAPF,EAQE,mBARF,QASO,cATP;AAWA,OAAM,SAAU,qBAAV,CACJ,OADI,EACmB;AAEvB,MAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAT,CAAtB,EAAwC;AACtC,UAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;AACD;;AACD,MAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,MAAT,CAAtB,EAAwC;AACtC,UAAM,IAAI,KAAJ,CAAU,+CAAV,CAAN;AACD;;AACD,QAAM,MAAM,GAAG,OAAO,CAAC,MAAvB;AAEA,EAAA,UAAU,CAAC,MAAD,EAAS,OAAT,CAAV;AAEA,SAAO,MAAP;AACD;AAED,OAAM,SAAU,mBAAV,CACJ,OADI,EACmB;AAEvB,MAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAT,CAApB,EAAsC;AACpC,UAAM,IAAI,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,MAAI,CAAC,eAAe,CAAC,OAAO,CAAC,MAAT,CAApB,EAAsC;AACpC,UAAM,IAAI,KAAJ,CAAU,6CAAV,CAAN;AACD;;AACD,QAAM,MAAM,GAAG,OAAO,CAAC,MAAvB;AAEA,EAAA,UAAU,CAAC,MAAD,EAAS,OAAT,CAAV;AACA,EAAA,UAAU,CAAC,MAAD,EAAS,SAAT,CAAV;AACA,EAAA,UAAU,CAAC,MAAD,EAAS,KAAT,EAAgB,QAAhB,CAAV;AAEA,SAAO,MAAP;AACD;AAED,OAAM,SAAU,uBAAV,CACJ,OADI,EACmB;AAEvB,MAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,MAAT,CAAxB,EAA0C;AACxC,UAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;AACD;;AACD,MAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,MAAT,CAAxB,EAA0C;AACxC,UAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;AACD;;AACD,QAAM,MAAM,GAAG,OAAO,CAAC,MAAvB;AAEA,EAAA,UAAU,CAAC,MAAD,EAAS,IAAT,CAAV;AAEA,SAAO,MAAP;AACD;AAED,OAAM,SAAU,wBAAV,CACJ,OADI,EACmB;AAEvB,MAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,MAAT,CAAzB,EAA2C;AACzC,UAAM,IAAI,KAAJ,CAAU,kDAAV,CAAN;AACD;;AACD,MAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,MAAT,CAAzB,EAA2C;AACzC,UAAM,IAAI,KAAJ,CAAU,kDAAV,CAAN;AACD;;AACD,QAAM,MAAM,GAAG,OAAO,CAAC,MAAvB;AAEA,EAAA,UAAU,CAAC,MAAD,EAAS,IAAT,CAAV;AACA,EAAA,UAAU,CAAC,MAAD,EAAS,MAAT,CAAV;AAEA,SAAO,MAAP;AACD","sourceRoot":"","sourcesContent":["import { assertType } from \"./misc\";\nimport { isPublishMethod, isPublishParams, isSubscribeMethod, isSubscribeParams, isSubscriptionMethod, isSubscriptionParams, isUnsubscribeMethod, isUnsubscribeParams, } from \"./validators\";\nexport function parseSubscribeRequest(request) {\n    if (!isSubscribeMethod(request.method)) {\n        throw new Error(\"JSON-RPC Request has invalid subscribe method\");\n    }\n    if (!isSubscribeParams(request.params)) {\n        throw new Error(\"JSON-RPC Request has invalid subscribe params\");\n    }\n    const params = request.params;\n    assertType(params, \"topic\");\n    return params;\n}\nexport function parsePublishRequest(request) {\n    if (!isPublishMethod(request.method)) {\n        throw new Error(\"JSON-RPC Request has invalid publish method\");\n    }\n    if (!isPublishParams(request.params)) {\n        throw new Error(\"JSON-RPC Request has invalid publish params\");\n    }\n    const params = request.params;\n    assertType(params, \"topic\");\n    assertType(params, \"message\");\n    assertType(params, \"ttl\", \"number\");\n    return params;\n}\nexport function parseUnsubscribeRequest(request) {\n    if (!isUnsubscribeMethod(request.method)) {\n        throw new Error(\"JSON-RPC Request has invalid unsubscribe method\");\n    }\n    if (!isUnsubscribeParams(request.params)) {\n        throw new Error(\"JSON-RPC Request has invalid unsubscribe params\");\n    }\n    const params = request.params;\n    assertType(params, \"id\");\n    return params;\n}\nexport function parseSubscriptionRequest(request) {\n    if (!isSubscriptionMethod(request.method)) {\n        throw new Error(\"JSON-RPC Request has invalid subscription method\");\n    }\n    if (!isSubscriptionParams(request.params)) {\n        throw new Error(\"JSON-RPC Request has invalid subscription params\");\n    }\n    const params = request.params;\n    assertType(params, \"id\");\n    assertType(params, \"data\");\n    return params;\n}\n//# sourceMappingURL=parsers.js.map"]},"metadata":{},"sourceType":"module"}