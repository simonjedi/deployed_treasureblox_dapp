{"ast":null,"code":"import { generateChildLogger, getLoggerContext } from \"@walletconnect/logger\";\nimport { ERROR, mapToObj, objToMap, formatStorageKeyName } from \"@walletconnect/utils\";\nimport { STORAGE_CONTEXT, STORAGE_KEYS, STORAGE_VERSION } from \"../constants\";\nexport class Storage {\n  constructor(client, logger, keyValueStorage) {\n    this.client = client;\n    this.logger = logger;\n    this.keyValueStorage = keyValueStorage;\n    this.name = STORAGE_CONTEXT;\n    this.version = STORAGE_VERSION;\n    this.keyMap = STORAGE_KEYS;\n    this.client = client;\n    this.logger = generateChildLogger(logger, this.name);\n    this.keyValueStorage = keyValueStorage;\n  }\n\n  get context() {\n    return getLoggerContext(this.logger);\n  }\n\n  get prefix() {\n    return `${this.client.protocol}@${this.client.version}:${this.client.context}:${this.version}`;\n  }\n\n  async setKeyChain(context, keychain) {\n    const key = this.getStorageKey(context);\n    await this.keyValueStorage.setItem(key, mapToObj(keychain));\n  }\n\n  async getKeyChain(context) {\n    const key = this.getStorageKey(context);\n    const keychain = await this.keyValueStorage.getItem(key);\n    return typeof keychain !== \"undefined\" ? objToMap(keychain) : undefined;\n  }\n\n  async setSequenceState(context, sequences) {\n    const key = this.getStorageKey(context);\n    await this.keyValueStorage.setItem(key, sequences);\n  }\n\n  async getSequenceState(context) {\n    const key = this.getStorageKey(context);\n    const sequences = await this.keyValueStorage.getItem(key);\n    return sequences;\n  }\n\n  async setJsonRpcRecords(context, records) {\n    const key = this.getStorageKey(context);\n    await this.keyValueStorage.setItem(key, records);\n  }\n\n  async getJsonRpcRecords(context) {\n    const key = this.getStorageKey(context);\n    const records = await this.keyValueStorage.getItem(key);\n    return records;\n  }\n\n  async setRelayerSubscriptions(context, subscriptions) {\n    const key = this.getStorageKey(context);\n    await this.keyValueStorage.setItem(key, subscriptions);\n  }\n\n  async getRelayerSubscriptions(context) {\n    const key = this.getStorageKey(context);\n    const subscriptions = await this.keyValueStorage.getItem(key);\n    return subscriptions;\n  }\n\n  getStorageKey(context) {\n    const name = this.getStorageKeyName(context);\n\n    if (!this.isValidStorageKeyName(name)) {\n      const error = ERROR.INVALID_STORAGE_KEY_NAME.format({\n        name\n      });\n      throw new Error(error.message);\n    }\n\n    const key = this.prefix + \"//\" + name;\n    return key;\n  }\n\n  getStorageKeyName(context) {\n    return formatStorageKeyName(context);\n  }\n\n  isValidStorageKeyName(name) {\n    const validKeys = Object.keys(this.keyMap).map(key => Object.values(this.keyMap[key])).flat();\n    return validKeys.includes(name.toLowerCase());\n  }\n\n}","map":{"version":3,"sources":["../../../src/controllers/storage.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { generateChildLogger, getLoggerContext } from \"@walletconnect/logger\";\nimport { ERROR, mapToObj, objToMap, formatStorageKeyName } from \"@walletconnect/utils\";\nimport { STORAGE_CONTEXT, STORAGE_KEYS, STORAGE_VERSION } from \"../constants\";\nexport class Storage {\n    constructor(client, logger, keyValueStorage) {\n        this.client = client;\n        this.logger = logger;\n        this.keyValueStorage = keyValueStorage;\n        this.name = STORAGE_CONTEXT;\n        this.version = STORAGE_VERSION;\n        this.keyMap = STORAGE_KEYS;\n        this.client = client;\n        this.logger = generateChildLogger(logger, this.name);\n        this.keyValueStorage = keyValueStorage;\n    }\n    get context() {\n        return getLoggerContext(this.logger);\n    }\n    get prefix() {\n        return `${this.client.protocol}@${this.client.version}:${this.client.context}:${this.version}`;\n    }\n    async setKeyChain(context, keychain) {\n        const key = this.getStorageKey(context);\n        await this.keyValueStorage.setItem(key, mapToObj(keychain));\n    }\n    async getKeyChain(context) {\n        const key = this.getStorageKey(context);\n        const keychain = await this.keyValueStorage.getItem(key);\n        return typeof keychain !== \"undefined\" ? objToMap(keychain) : undefined;\n    }\n    async setSequenceState(context, sequences) {\n        const key = this.getStorageKey(context);\n        await this.keyValueStorage.setItem(key, sequences);\n    }\n    async getSequenceState(context) {\n        const key = this.getStorageKey(context);\n        const sequences = await this.keyValueStorage.getItem(key);\n        return sequences;\n    }\n    async setJsonRpcRecords(context, records) {\n        const key = this.getStorageKey(context);\n        await this.keyValueStorage.setItem(key, records);\n    }\n    async getJsonRpcRecords(context) {\n        const key = this.getStorageKey(context);\n        const records = await this.keyValueStorage.getItem(key);\n        return records;\n    }\n    async setRelayerSubscriptions(context, subscriptions) {\n        const key = this.getStorageKey(context);\n        await this.keyValueStorage.setItem(key, subscriptions);\n    }\n    async getRelayerSubscriptions(context) {\n        const key = this.getStorageKey(context);\n        const subscriptions = await this.keyValueStorage.getItem(key);\n        return subscriptions;\n    }\n    getStorageKey(context) {\n        const name = this.getStorageKeyName(context);\n        if (!this.isValidStorageKeyName(name)) {\n            const error = ERROR.INVALID_STORAGE_KEY_NAME.format({ name });\n            throw new Error(error.message);\n        }\n        const key = this.prefix + \"//\" + name;\n        return key;\n    }\n    getStorageKeyName(context) {\n        return formatStorageKeyName(context);\n    }\n    isValidStorageKeyName(name) {\n        const validKeys = Object.keys(this.keyMap)\n            .map(key => Object.values(this.keyMap[key]))\n            .flat();\n        return validKeys.includes(name.toLowerCase());\n    }\n}\n//# sourceMappingURL=storage.js.map"]},"metadata":{},"sourceType":"module"}