{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect, useCallback } from \"react\"; // import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\n\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound'; //\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\n\nimport './style.css';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactAudioPlayer from 'react-audio-player'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FighterScreen = props => {\n  _s();\n\n  var [controlPlayer, setControlPlayer] = useState(false);\n  var [hasGameStarted, setHasGameStarted] = useState(false);\n  var [hasGameOver, setHasGameOver] = useState(false);\n  var [canvas, setCanvas] = useState(false);\n  var [ctx, setCtx] = useState(false);\n  const [exit, setExit] = useState(true); // Prevent game from working whilst page reloads\n\n  let startDate = null;\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n  }; //Game Elements\n\n  let rectangles = [{\n    x: 75,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  }, {\n    x: 400,\n    y: 75,\n    dx: -5,\n    dy: 5.5,\n    width: 80,\n    height: 60,\n    color: \"#000099\"\n  }, {\n    x: 75,\n    y: 445,\n    dx: 5,\n    dy: -5,\n    width: 40,\n    height: 80,\n    color: \"#000099\"\n  }, {\n    x: 420,\n    y: 450,\n    dx: -5,\n    dy: -5,\n    width: 130,\n    height: 25,\n    color: \"#000099\"\n  }];\n\n  const endGame = () => {\n    setExit(false);\n  };\n\n  useEffect(() => {\n    const canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n\n    function millisecondsToMinutes(millis) {\n      let minutes = Math.floor(millis / 60000);\n      let seconds = (millis % 60000 / 1000).toFixed(0);\n      return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    } // Global Varabales\n\n\n    function update() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawBorder();\n      drawRect();\n\n      if (hasGameStarted) {\n        //Get the blue rectangle to start moving\n        moveRectangle();\n      } //Detect whether rectangles hit edge of canvas\n\n\n      borderRectangleCollisionDetection(); //Detect whether player makes contact with border\n\n      playerCollisionDetection(); //Detect whether player makes contact with rectangle\n\n      rectangleCollisionDetection();\n      requestAnimationFrame(update);\n    } //Call update method on initial document load\n\n\n    update(); //Render rectangles to canvas.\n\n    function drawRect() {\n      //Draw playerRect first\n      ctx.fillStyle = \"#990000\";\n      ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n      rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n      });\n    } //\n    // function update(){\n    //   ctx.clearRect(0,0,canvas.width,canvas.height);\n    //\n    //   drawBoarder();\n    //   drawRect();\n    //\n    //   if (hasGameStarted){\n    //     moveRectangle();\n    //   }\n    //\n    //   playerCollisionDetection();\n    //   rectangleCollisionDetection();\n    //   boarderRectangleDetection();\n    //   requestAnimationFrame(update);\n    // }\n    //\n    // // call update methord on initial document load\n    // update();\n    // Canvas black boarder\n    //Canvas Black Border\n\n\n    function drawBorder() {\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.clearRect(100, 100, 500, 500);\n    } // function drawBoarder(){\n    //   ctx.fillStyle = \"black\";\n    //   ctx.fillRect(0,0,canvas.width,canvas.height);\n    //   ctx.clearRect(50,50,500,500);\n    // }\n\n\n    function millisecondsToMiutes(millis) {\n      let minutes = Math.floor(millis / 60000);\n      let seconds = Math.floor(millis % 60000 / 1000);\n      return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    }\n\n    function gameOver() {\n      if (!hasGameOver) {\n        let endDate = new Date();\n        let timeDiff = endDate - startDate;\n\n        if (timeDiff < 60000) {\n          // endGame()\n          alert(`You survived ${timeDiff / 1000} seconds!`);\n        } else {\n          // endGame()\n          let minutesSurvived = millisecondsToMinutes(timeDiff);\n          alert(`You survived ${minutesSurvived} minutes. WOW!`);\n        } // setHasGameOver(true);\n        // FighterScreen()\n\n      }\n    } // Render rectangles to canvas\n    //Render rectangles to canvas.\n\n\n    function drawRect() {\n      //Draw playerRect first\n      ctx.fillStyle = \"#990000\";\n      ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n      rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n      });\n    } // function drawRect(){\n    //   // Draw player rect first\n    //   ctx.fillStyle = \"#901234\";\n    //   ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n    //\n    //   rectangles.forEach(rect => {\n    //     ctx.fillStyle = rect.color;\n    //     ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n    //   });\n    //\n    // }\n    //Detect whether player makes contact with border\n\n\n    function playerCollisionDetection() {\n      if (playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50) {\n        gameOver();\n      }\n    } // collision\n    // function playerCollisionDetection(){\n    //   if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n    //   ){\n    //     gameOver();\n    //   }\n    // }\n    //Returns true if 2 rectangles are colliding\n\n\n    function isRectangleCollision(rect1, rect2) {\n      return !(rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y);\n    } // function isRectangleCollision(rect1,rect2){\n    //   return !(\n    //     rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n    //   );\n    // }\n    //Detect whether player makes contact with rectangle\n\n\n    function rectangleCollisionDetection() {\n      rectangles.forEach(rect => {\n        if (isRectangleCollision(playerRect, rect)) {\n          gameOver();\n        }\n      });\n    } //\n    // function rectangleCollisionDetection(){\n    //   rectangles.forEach(rect =>{\n    //     if(isRectangleCollision(playerRect,rect)){\n    //       gameOver();\n    //     }\n    //   })\n    // }\n    //Get the blue rectangle to start moving\n\n\n    function moveRectangle() {\n      rectangles.forEach(rect => {\n        rect.x += rect.dx;\n        rect.y += rect.dy;\n      });\n    } // function moveRectangle(){\n    //   rectangles.forEach(rect => {\n    //     rect.x += rect.dx;\n    //     rect.y += rect.dy;\n    //   })\n    // }\n    //Detect whether rectangles hit edge of canvas\n\n\n    function borderRectangleCollisionDetection() {\n      rectangles.forEach(rect => {\n        if (rect.x + rect.width > canvas.width || rect.x < 0) {\n          rect.dx *= -1;\n        }\n\n        if (rect.y + rect.height > canvas.height || rect.y < 0) {\n          rect.dy *= -1;\n        }\n      });\n    } // function boarderRectangleDetection(){\n    //   rectangles.forEach(rect=>{\n    //     if(rect.x + rect.width > canvas.width || rect.x < 0){\n    //       rect.dx *= -1;\n    //     }\n    //     if(rect.y + rect.height > canvas.height || rect.y < 0){\n    //       rect.dy *= -1;\n    //     }\n    //   })\n    // }\n\n\n    let numberOfSpeed = 0;\n\n    function configureRectSpeed() {\n      const speedUpGame = setInterval(() => {\n        numberOfSpeed++;\n        rectangles.forEach(rect => {\n          rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n          rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n        });\n\n        if (numberOfSpeed === 4) {\n          clearInterval(speedUpGame);\n        }\n      }, 10000);\n    } //Returns true if mouse is in player rectangle\n\n\n    function isCursorInRect(x, y, rect) {\n      return x > rect.x && x < rect.x + rect.width && y > rect.y && y < rect.y + rect.height;\n    } // // Returns true if collision\n    // function isCursorInRect(x,y,rect){\n    //   return((x > rect.x) && (x < rect.x + rect.width) && (y > rect.y) && (y < rect.y + rect.height));\n    // }\n\n\n    canvas.addEventListener(\"mousedown\", e => {\n      //Get X & Y coordinates in relation to canvas\n      const pos = {\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop\n      }; //See if they clicked on the red square in particular\n\n      if (isCursorInRect(pos.x, pos.y, playerRect)) {\n        //Start timer\n        if (!hasGameStarted) {\n          startDate = new Date();\n          configureRectSpeed();\n        }\n\n        setControlPlayer(true);\n        setHasGameStarted(true);\n      }\n    }); // canvas.addEventListener('mousedown', on_canvas_down, false);\n    //\n    // function on_canvas_down(ev) {\n    //\n    //     // get x & y coordinates in relation to the canvas\n    //\n    //     var x = ev.clientX - this.offsetLeft;\n    //     var y = ev.clientY - this.offsetTop;\n    //\n    //     // See if they clicked on red square\n    //     if(isCursorInRect(x,y,playerRect)){\n    //       //\n    //       if(!hasGameStarted){\n    //         startDate = new Date();\n    //         configureRectSpeed();\n    //       }\n    //       setControlPlayer(true);\n    //       setHasGameStarted(true);\n    //\n    //     }\n    //\n    // }\n\n    canvas.addEventListener(\"mousemove\", e => {\n      if (controlPlayer && !hasGameOver) {\n        //Get X & Y coordinates in relation to canvas\n        const pos = {\n          x: e.clientX - canvas.offsetLeft,\n          y: e.clientY - canvas.offsetTop\n        };\n        playerRect.x = pos.x - 25;\n        playerRect.y = pos.y - 25;\n      }\n    }); // canvas.addEventListener('mousemove', on_canvas_move, false);\n    //\n    //\n    //   function on_canvas_move(ev) {\n    //\n    //     if(controlPlayer && !hasGameOver){\n    //       // get x & y coordinates in relation to the canvas\n    //\n    //       var x = ev.clientX - this.offsetLeft;\n    //       var y = ev.clientY - this.offsetTop;\n    //\n    //       playerRect.x = x - 25;\n    //       playerRect.y = y - 25;\n    //     }\n    //     console.log(x,\"xxxxxxxxxx\")\n    // }\n\n    canvas.addEventListener(\"mouseup\", () => {\n      setControlPlayer(false);\n    }); // canvas.addEventListener('mouseup', on_canvas_up, false);\n    // function on_canvas_up(ev) {\n    //\n    //   setControlPlayer(false);\n    // }\n  }, [controlPlayer,, hasGameStarted, hasGameOver, canvas, ctx]); //     const timer = window.setInterval( async() => {\n  // }, 1000);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [exit ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/JetswapXTreasureBlox1/:top\",\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n      children: [\"Fighter Pilot\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"600\",\n        height: \"600\",\n        id: \"canvas\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 473,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FighterScreen, \"7Xe+lRdSBqdY6gSuh6IoDQ2qLRY=\");\n\n_c = FighterScreen;\nexport default FighterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FighterScreen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js"],"names":["useState","useRef","useEffect","useCallback","Button","Container","Nav","Navbar","NavDropdown","useSound","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactAudioPlayer","FighterScreen","props","controlPlayer","setControlPlayer","hasGameStarted","setHasGameStarted","hasGameOver","setHasGameOver","canvas","setCanvas","ctx","setCtx","exit","setExit","startDate","playerRect","x","y","width","height","rectangles","dx","dy","color","endGame","document","getElementById","getContext","millisecondsToMinutes","millis","minutes","Math","floor","seconds","toFixed","update","clearRect","drawBorder","drawRect","moveRectangle","borderRectangleCollisionDetection","playerCollisionDetection","rectangleCollisionDetection","requestAnimationFrame","fillStyle","fillRect","forEach","rect","millisecondsToMiutes","gameOver","endDate","Date","timeDiff","alert","minutesSurvived","isRectangleCollision","rect1","rect2","numberOfSpeed","configureRectSpeed","speedUpGame","setInterval","clearInterval","isCursorInRect","addEventListener","e","pos","clientX","offsetLeft","clientY","offsetTop"],"mappings":"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","sourcesContent":["\nimport { useState, useRef, useEffect, useCallback } from \"react\";\n\n// import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\nimport { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound';\n//\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\nimport './style.css';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n// Hook\n\n\n\n\nconst FighterScreen = (props) =>{\n\n\n  var [controlPlayer, setControlPlayer]= useState(false)\n  var [hasGameStarted, setHasGameStarted]= useState(false)\n  var [hasGameOver, setHasGameOver]= useState(false)\n  var [canvas, setCanvas]= useState(false)\n  var [ctx, setCtx]= useState(false)\n  const [exit,setExit] = useState(true);\n\n\n  // Prevent game from working whilst page reloads\n  let startDate = null;\n\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n}\n//Game Elements\nlet rectangles = [\n    {\n        x: 75,\n        y: 75,\n        dx: 5,\n        dy: 4,\n        width: 75,\n        height: 75,\n        color: \"#000099\"\n    },\n    {\n        x: 400,\n        y: 75,\n        dx: -5,\n        dy: 5.5,\n        width: 80,\n        height: 60,\n        color: \"#000099\"\n    },\n    {\n        x: 75,\n        y: 445,\n        dx: 5,\n        dy: -5,\n        width: 40,\n        height: 80,\n        color: \"#000099\"\n    },\n    {\n        x: 420,\n        y: 450,\n        dx: -5,\n        dy: -5,\n        width: 130,\n        height: 25,\n        color: \"#000099\"\n    }\n]\n\n\nconst endGame=()=>{\n    setExit(false);\n}\n\n\n\n  useEffect(() => {\n\n\n      const canvas = document.getElementById(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n\n      function millisecondsToMinutes(millis){\n          let minutes = Math.floor(millis / 60000);\n          let seconds = ((millis % 60000) / 1000).toFixed(0);\n          return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n      }\n\n      // Global Varabales\n\n\n      function update() {\n    ctx.clearRect(0,0,canvas.width,canvas.height);\n    drawBorder();\n    drawRect();\n\n    if(hasGameStarted){\n        //Get the blue rectangle to start moving\n        moveRectangle();\n    }\n    //Detect whether rectangles hit edge of canvas\n    borderRectangleCollisionDetection();\n    //Detect whether player makes contact with border\n    playerCollisionDetection();\n    //Detect whether player makes contact with rectangle\n    rectangleCollisionDetection();\n    requestAnimationFrame(update);\n}\n\n//Call update method on initial document load\nupdate();\n\n//Render rectangles to canvas.\nfunction drawRect() {\n    //Draw playerRect first\n    ctx.fillStyle = \"#990000\";\n    ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n    rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n    })\n}\n\n      //\n      // function update(){\n      //   ctx.clearRect(0,0,canvas.width,canvas.height);\n      //\n      //   drawBoarder();\n      //   drawRect();\n      //\n      //   if (hasGameStarted){\n      //     moveRectangle();\n      //   }\n      //\n      //   playerCollisionDetection();\n      //   rectangleCollisionDetection();\n      //   boarderRectangleDetection();\n      //   requestAnimationFrame(update);\n      // }\n      //\n      // // call update methord on initial document load\n      // update();\n\n\n\n\n\n      // Canvas black boarder\n\n      //Canvas Black Border\nfunction drawBorder() {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0,0,canvas.width,canvas.height);\n    ctx.clearRect(100,100,500,500);\n}\n\n      // function drawBoarder(){\n      //   ctx.fillStyle = \"black\";\n      //   ctx.fillRect(0,0,canvas.width,canvas.height);\n      //   ctx.clearRect(50,50,500,500);\n      // }\n\n\n      function millisecondsToMiutes(millis){\n        let minutes = Math.floor(millis/60000);\n        let seconds = Math.floor((millis % 60000)/1000);\n        return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n\n      }\n\n      function gameOver() {\n\n\n          if(!hasGameOver){\n\n\n              let endDate = new Date();\n              let timeDiff = endDate - startDate;\n              if(timeDiff < 60000){\n                // endGame()\n                  alert(`You survived ${timeDiff / 1000} seconds!`);\n              }else{\n                // endGame()\n                  let minutesSurvived = millisecondsToMinutes(timeDiff);\n                  alert(`You survived ${minutesSurvived} minutes. WOW!`);\n              }\n\n              // setHasGameOver(true);\n\n              // FighterScreen()\n\n\n          }\n      }\n\n\n      // Render rectangles to canvas\n\n      //Render rectangles to canvas.\nfunction drawRect() {\n    //Draw playerRect first\n    ctx.fillStyle = \"#990000\";\n    ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n    rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n    })\n}\n\n      // function drawRect(){\n      //   // Draw player rect first\n      //   ctx.fillStyle = \"#901234\";\n      //   ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n      //\n      //   rectangles.forEach(rect => {\n      //     ctx.fillStyle = rect.color;\n      //     ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n      //   });\n      //\n      // }\n\n      //Detect whether player makes contact with border\nfunction playerCollisionDetection() {\n    if(\n        playerRect.x + playerRect.width > 550 ||\n        playerRect.x < 50 ||\n        playerRect.y + playerRect.height > 550 ||\n        playerRect.y < 50\n    ){\n        gameOver();\n    }\n}\n\n      // collision\n      // function playerCollisionDetection(){\n      //   if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n      //   ){\n      //     gameOver();\n      //   }\n      // }\n\n      //Returns true if 2 rectangles are colliding\nfunction isRectangleCollision(rect1, rect2){\n    return !(\n        rect1.x>rect2.x+rect2.width ||\n        rect1.x+rect1.width<rect2.x ||\n        rect1.y>rect2.y+rect2.height ||\n        rect1.y+rect1.height<rect2.y\n    );\n}\n\n      // function isRectangleCollision(rect1,rect2){\n      //   return !(\n      //     rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n      //   );\n      // }\n\n      //Detect whether player makes contact with rectangle\nfunction rectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n        if(isRectangleCollision(playerRect, rect)){\n            gameOver();\n        }\n    })\n}\n      //\n      // function rectangleCollisionDetection(){\n      //   rectangles.forEach(rect =>{\n      //     if(isRectangleCollision(playerRect,rect)){\n      //       gameOver();\n      //     }\n      //   })\n      // }\n\n      //Get the blue rectangle to start moving\nfunction moveRectangle() {\n    rectangles.forEach(rect => {\n        rect.x += rect.dx;\n        rect.y += rect.dy;\n    })\n}\n\n      // function moveRectangle(){\n      //   rectangles.forEach(rect => {\n      //     rect.x += rect.dx;\n      //     rect.y += rect.dy;\n      //   })\n      // }\n\n      //Detect whether rectangles hit edge of canvas\nfunction borderRectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n        if(rect.x + rect.width > canvas.width || rect.x < 0){\n            rect.dx *= -1;\n        }\n        if(rect.y + rect.height > canvas.height || rect.y < 0){\n            rect.dy *= -1;\n        }\n    })\n}\n\n      // function boarderRectangleDetection(){\n      //   rectangles.forEach(rect=>{\n      //     if(rect.x + rect.width > canvas.width || rect.x < 0){\n      //       rect.dx *= -1;\n      //     }\n      //     if(rect.y + rect.height > canvas.height || rect.y < 0){\n      //       rect.dy *= -1;\n      //     }\n      //   })\n      // }\n\n      let numberOfSpeed = 0;\n\n\n\n      function configureRectSpeed() {\n    const speedUpGame = setInterval(() => {\n        numberOfSpeed++;\n        rectangles.forEach(rect => {\n            rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n            rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n        });\n        if(numberOfSpeed === 4){\n            clearInterval(speedUpGame);\n        }\n    }, 10000)\n}\n\n\n\n\n\n\n\n      //Returns true if mouse is in player rectangle\n      function isCursorInRect(x,y,rect){\n          return(x>rect.x && x<rect.x+rect.width && y>rect.y && y<rect.y+rect.height);\n      }\n\n      // // Returns true if collision\n      // function isCursorInRect(x,y,rect){\n      //   return((x > rect.x) && (x < rect.x + rect.width) && (y > rect.y) && (y < rect.y + rect.height));\n      // }\n\n\n\n      canvas.addEventListener(\"mousedown\", e => {\n          //Get X & Y coordinates in relation to canvas\n          const pos = {\n              x: e.clientX - canvas.offsetLeft,\n              y: e.clientY - canvas.offsetTop\n          }\n          //See if they clicked on the red square in particular\n          if(isCursorInRect(pos.x,pos.y,playerRect)){\n              //Start timer\n              if(!hasGameStarted){\n                  startDate = new Date();\n                  configureRectSpeed();\n              }\n              setControlPlayer(true);\n              setHasGameStarted(true);\n          }\n      })\n\n\n      // canvas.addEventListener('mousedown', on_canvas_down, false);\n      //\n      // function on_canvas_down(ev) {\n      //\n      //     // get x & y coordinates in relation to the canvas\n      //\n      //     var x = ev.clientX - this.offsetLeft;\n      //     var y = ev.clientY - this.offsetTop;\n      //\n      //     // See if they clicked on red square\n      //     if(isCursorInRect(x,y,playerRect)){\n      //       //\n      //       if(!hasGameStarted){\n      //         startDate = new Date();\n      //         configureRectSpeed();\n      //       }\n      //       setControlPlayer(true);\n      //       setHasGameStarted(true);\n      //\n      //     }\n      //\n      // }\n\n\n\n\n\n      canvas.addEventListener(\"mousemove\", e => {\n          if(controlPlayer && !hasGameOver){\n          //Get X & Y coordinates in relation to canvas\n          const pos = {\n              x: e.clientX - canvas.offsetLeft,\n              y: e.clientY - canvas.offsetTop\n          };\n          playerRect.x = pos.x - 25;\n          playerRect.y = pos.y - 25;\n          }\n      })\n\n\n      // canvas.addEventListener('mousemove', on_canvas_move, false);\n      //\n      //\n      //   function on_canvas_move(ev) {\n      //\n      //     if(controlPlayer && !hasGameOver){\n      //       // get x & y coordinates in relation to the canvas\n      //\n      //       var x = ev.clientX - this.offsetLeft;\n      //       var y = ev.clientY - this.offsetTop;\n      //\n      //       playerRect.x = x - 25;\n      //       playerRect.y = y - 25;\n      //     }\n      //     console.log(x,\"xxxxxxxxxx\")\n      // }\n\n\n\n\n      canvas.addEventListener(\"mouseup\", () => {\n          setControlPlayer(false);\n      })\n\n\n      // canvas.addEventListener('mouseup', on_canvas_up, false);\n      // function on_canvas_up(ev) {\n      //\n      //   setControlPlayer(false);\n      // }\n\n\n\n    }, [controlPlayer,,hasGameStarted,hasGameOver,canvas,ctx]);\n\n\n\n\n\n//     const timer = window.setInterval( async() => {\n// }, 1000);\n\n\n\n\n  return (\n    <div>\n\n    {exit?(\n      <div>\n\n      </div>\n    ):(\n      <div>\n\n      <Redirect to=\"/JetswapXTreasureBlox1/:top\" {...props}/>\n\n      </div>\n    )}\n\n\n\n<center>\nFighter Pilot<br/>\n<canvas width=\"600\" height=\"600\" id=\"canvas\"> </canvas>\n\n</center>\n<br/>\n    </div>\n  );\n}\n\nexport default FighterScreen;\n"]},"metadata":{},"sourceType":"module"}