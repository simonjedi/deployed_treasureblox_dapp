{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js\";\nimport { useState, useRef, useEffect, useCallback } from \"react\"; // import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\n\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound'; //\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\n\nimport './style.css';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactAudioPlayer from 'react-audio-player'; // Hook\n\nimport jet from \"./jet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FighterScreen = props => {\n  const canvas = document.getElementById(\"canvas\");\n  const ctx = canvas.getContext(\"2d\"); //Game variables\n\n  let controlPlayer = false;\n  let hasGameStarted = false; //Just to prevent game from working while page reloads\n\n  let hasGameOver = false;\n  let startDate = null;\n\n  function millisecondsToMinutes(millis) {\n    let minutes = Math.floor(millis / 60000);\n    let seconds = (millis % 60000 / 1000).toFixed(0);\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n  }\n\n  function gameOver() {\n    if (!hasGameOver) {\n      let endDate = new Date();\n      let timeDiff = endDate - startDate;\n\n      if (timeDiff < 60000) {\n        alert(`You survived ${timeDiff / 1000} seconds!`);\n      } else {\n        let minutesSurvived = millisecondsToMinutes(timeDiff);\n        alert(`You survived ${minutesSurvived} minutes. WOW!`);\n      }\n\n      hasGameOver = true;\n    }\n  } //Canvas Black Border\n\n\n  function drawBorder() {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.clearRect(50, 50, 500, 500);\n  }\n\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n  }; //Game Elements\n\n  let rectangles = [{\n    x: 75,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  }, {\n    x: 400,\n    y: 75,\n    dx: -5,\n    dy: 5.5,\n    width: 80,\n    height: 60,\n    color: \"#000099\"\n  }, {\n    x: 75,\n    y: 445,\n    dx: 5,\n    dy: -5,\n    width: 40,\n    height: 80,\n    color: \"#000099\"\n  }, {\n    x: 420,\n    y: 450,\n    dx: -5,\n    dy: -5,\n    width: 130,\n    height: 25,\n    color: \"#000099\"\n  }]; //Render rectangles to canvas.\n\n  function drawRect() {\n    //Draw playerRect first\n    ctx.fillStyle = \"#990000\";\n    ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n    rectangles.forEach(rect => {\n      ctx.fillStyle = rect.color;\n      ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n    });\n  } //Detect whether player makes contact with border\n\n\n  function playerCollisionDetection() {\n    if (playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50) {\n      gameOver();\n    }\n  } //Returns true if 2 rectangles are colliding\n\n\n  function isRectangleCollision(rect1, rect2) {\n    return !(rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y);\n  } //Detect whether player makes contact with rectangle\n\n\n  function rectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n      if (isRectangleCollision(playerRect, rect)) {\n        gameOver();\n      }\n    });\n  } //Get the blue rectangle to start moving\n\n\n  function moveRectangle() {\n    rectangles.forEach(rect => {\n      rect.x += rect.dx;\n      rect.y += rect.dy;\n    });\n  } //Detect whether rectangles hit edge of canvas\n\n\n  function borderRectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n      if (rect.x + rect.width > canvas.width || rect.x < 0) {\n        rect.dx *= -1;\n      }\n\n      if (rect.y + rect.height > canvas.height || rect.y < 0) {\n        rect.dy *= -1;\n      }\n    });\n  } //Speed up game\n\n\n  let numberOfSpeed = 0;\n\n  function configureRectSpeed() {\n    const speedUpGame = setInterval(() => {\n      numberOfSpeed++;\n      rectangles.forEach(rect => {\n        rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n        rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n      });\n\n      if (numberOfSpeed === 4) {\n        clearInterval(speedUpGame);\n      }\n    }, 10000);\n  }\n\n  function update() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawBorder();\n    drawRect();\n\n    if (hasGameStarted) {\n      //Get the blue rectangle to start moving\n      moveRectangle();\n    } //Detect whether rectangles hit edge of canvas\n\n\n    borderRectangleCollisionDetection(); //Detect whether player makes contact with border\n\n    playerCollisionDetection(); //Detect whether player makes contact with rectangle\n\n    rectangleCollisionDetection();\n    requestAnimationFrame(update);\n  } //Call update method on initial document load\n\n\n  update(); //Returns true if mouse is in player rectangle\n\n  function isCursorInRect(x, y, rect) {\n    return x > rect.x && x < rect.x + rect.width && y > rect.y && y < rect.y + rect.height;\n  }\n\n  canvas.addEventListener(\"mousedown\", e => {\n    //Get X & Y coordinates in relation to canvas\n    const pos = {\n      x: e.clientX - canvas.offsetLeft,\n      y: e.clientY - canvas.offsetTop\n    }; //See if they clicked on the red square in particular\n\n    if (isCursorInRect(pos.x, pos.y, playerRect)) {\n      //Start timer\n      if (!hasGameStarted) {\n        startDate = new Date();\n        configureRectSpeed();\n      }\n\n      hasGameStarted = true;\n      controlPlayer = true;\n    }\n  });\n  canvas.addEventListener(\"mousemove\", e => {\n    if (controlPlayer && !hasGameOver) {\n      //Get X & Y coordinates in relation to canvas\n      const pos = {\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop\n      };\n      playerRect.x = pos.x - 25;\n      playerRect.y = pos.y - 25;\n    }\n  });\n  canvas.addEventListener(\"mouseup\", () => {\n    controlPlayer = false;\n  }); //\n  //   var [controlPlayer, setControlPlayer]= useState(false)\n  //   var [hasGameStarted, setHasGameStarted]= useState(false)\n  //   var [hasGameOver, setHasGameOver]= useState(false)\n  //   var [canvas, setCanvas]= useState(false)\n  //   var [ctx, setCtx]= useState(false)\n  //\n  //   // Prevent game from working whilst page reloads\n  //   let startDate = null;\n  //\n  //   let playerRect = {\n  //     x:275,\n  //     y:275,\n  //     width:50,\n  //     height:50,\n  //   }\n  //\n  //   // Game Elements\n  //   let rectangles = [\n  //     {\n  //       x:75,\n  //       y:75,\n  //       dx:5,\n  //       dy:4,\n  //       width:75,\n  //       height:75,\n  //       color:\"#000099\",\n  //     },\n  //     {\n  //       x:400,\n  //       y:75,\n  //       dx:-5,\n  //       dy:5.5,\n  //       width:80,\n  //       height:60,\n  //       color:\"#000099\",\n  //     },\n  //     {\n  //       x:75,\n  //       y:445,\n  //       dx:5,\n  //       dy:-5,\n  //       width:40,\n  //       height:80,\n  //       color:\"#000099\",\n  //     },\n  //     {\n  //       x:420,\n  //       y:450,\n  //       dx:-5,\n  //       dy:-5,\n  //       width:130,\n  //       height:25,\n  //       color:\"#000099\",\n  //     },\n  //   ]\n  //\n  //\n  //\n  //\n  //\n  //   useEffect(() => {\n  //\n  //\n  //\n  //         },10000)\n  //       }\n  //\n  //\n  //\n  //\n  //       // Returns true if collision\n  //       function isCursorInRect(x,y,rect){\n  //         return((x > rect.x) && (x < rect.x + rect.width) && (y > rect.y) && (y < rect.y + rect.height));\n  //       }\n  //\n  //\n  //\n  //       canvas.addEventListener('mousedown', on_canvas_down, false);\n  //\n  //       function on_canvas_down(ev) {\n  //\n  //           // get x & y coordinates in relation to the canvas\n  //\n  //           var x = ev.clientX - this.offsetLeft;\n  //           var y = ev.clientY - this.offsetTop;\n  //\n  //           // See if they clicked on red square\n  //           if(isCursorInRect(x,y,playerRect)){\n  //             //\n  //             if(!hasGameStarted){\n  //               startDate = new Date();\n  //               configureRectSpeed();\n  //             }\n  //             setControlPlayer(true);\n  //             setHasGameStarted(true);\n  //\n  //           }\n  //\n  //       }\n  //\n  //\n  //\n  //\n  //\n  //\n  //\n  //\n  //       canvas.addEventListener('mousemove', on_canvas_move, false);\n  //\n  //\n  //         function on_canvas_move(ev) {\n  //\n  //           if(controlPlayer && !hasGameOver){\n  //             // get x & y coordinates in relation to the canvas\n  //\n  //             var x = ev.clientX - this.offsetLeft;\n  //             var y = ev.clientY - this.offsetTop;\n  //\n  //             playerRect.x = x - 25;\n  //             playerRect.y = y - 25;\n  //           }\n  //           console.log(x,\"xxxxxxxxxx\")\n  //       }\n  //\n  //\n  //\n  //\n  //\n  //\n  //\n  //       canvas.addEventListener('mouseup', on_canvas_up, false);\n  //       function on_canvas_up(ev) {\n  //\n  //         setControlPlayer(false);\n  //       }\n  //\n  //\n  //\n  // }, []);\n  //\n  //\n  //\n  //\n  //\n  // //     const timer = window.setInterval( async() => {\n  // // }, 1000);\n  //\n  //\n  //\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"center\", {\n      children: [\"Fighter Pilot\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"600\",\n        height: \"600\",\n        id: \"canvas\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 5\n  }, this);\n};\n\n_c = FighterScreen;\nexport default FighterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FighterScreen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js"],"names":["useState","useRef","useEffect","useCallback","Button","Container","Nav","Navbar","NavDropdown","useSound","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactAudioPlayer","jet","FighterScreen","props","canvas","document","getElementById","ctx","getContext","controlPlayer","hasGameStarted","hasGameOver","startDate","millisecondsToMinutes","millis","minutes","Math","floor","seconds","toFixed","gameOver","endDate","Date","timeDiff","alert","minutesSurvived","drawBorder","fillStyle","fillRect","width","height","clearRect","playerRect","x","y","rectangles","dx","dy","color","drawRect","forEach","rect","playerCollisionDetection","isRectangleCollision","rect1","rect2","rectangleCollisionDetection","moveRectangle","borderRectangleCollisionDetection","numberOfSpeed","configureRectSpeed","speedUpGame","setInterval","clearInterval","update","requestAnimationFrame","isCursorInRect","addEventListener","e","pos","clientX","offsetLeft","clientY","offsetTop"],"mappings":"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","sourcesContent":["\nimport { useState, useRef, useEffect, useCallback } from \"react\";\n\n// import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\nimport { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound';\n//\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\nimport './style.css';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n// Hook\n\nimport jet from \"./jet\";\n\n\nconst FighterScreen = (props) =>{\n\n  const canvas = document.getElementById(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  //Game variables\n  let controlPlayer = false;\n  let hasGameStarted = false;\n  //Just to prevent game from working while page reloads\n  let hasGameOver = false;\n  let startDate = null;\n  function millisecondsToMinutes(millis){\n      let minutes = Math.floor(millis / 60000);\n      let seconds = ((millis % 60000) / 1000).toFixed(0);\n      return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n  }\n\n  function gameOver() {\n      if(!hasGameOver){\n          let endDate = new Date();\n          let timeDiff = endDate - startDate;\n          if(timeDiff < 60000){\n              alert(`You survived ${timeDiff / 1000} seconds!`);\n          }else{\n              let minutesSurvived = millisecondsToMinutes(timeDiff);\n              alert(`You survived ${minutesSurvived} minutes. WOW!`);\n          }\n\n          hasGameOver = true;\n      }\n  }\n\n  //Canvas Black Border\n  function drawBorder() {\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0,0,canvas.width,canvas.height);\n      ctx.clearRect(50,50,500,500);\n  }\n\n  let playerRect = {\n      x: 275,\n      y: 275,\n      width: 50,\n      height: 50\n  }\n  //Game Elements\n  let rectangles = [\n      {\n          x: 75,\n          y: 75,\n          dx: 5,\n          dy: 4,\n          width: 75,\n          height: 75,\n          color: \"#000099\"\n      },\n      {\n          x: 400,\n          y: 75,\n          dx: -5,\n          dy: 5.5,\n          width: 80,\n          height: 60,\n          color: \"#000099\"\n      },\n      {\n          x: 75,\n          y: 445,\n          dx: 5,\n          dy: -5,\n          width: 40,\n          height: 80,\n          color: \"#000099\"\n      },\n      {\n          x: 420,\n          y: 450,\n          dx: -5,\n          dy: -5,\n          width: 130,\n          height: 25,\n          color: \"#000099\"\n      }\n  ]\n\n  //Render rectangles to canvas.\n  function drawRect() {\n      //Draw playerRect first\n      ctx.fillStyle = \"#990000\";\n      ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n      rectangles.forEach(rect => {\n          ctx.fillStyle = rect.color;\n          ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n      })\n  }\n\n  //Detect whether player makes contact with border\n  function playerCollisionDetection() {\n      if(\n          playerRect.x + playerRect.width > 550 ||\n          playerRect.x < 50 ||\n          playerRect.y + playerRect.height > 550 ||\n          playerRect.y < 50\n      ){\n          gameOver();\n      }\n  }\n  //Returns true if 2 rectangles are colliding\n  function isRectangleCollision(rect1, rect2){\n      return !(\n          rect1.x>rect2.x+rect2.width ||\n          rect1.x+rect1.width<rect2.x ||\n          rect1.y>rect2.y+rect2.height ||\n          rect1.y+rect1.height<rect2.y\n      );\n  }\n\n  //Detect whether player makes contact with rectangle\n  function rectangleCollisionDetection() {\n      rectangles.forEach(rect => {\n          if(isRectangleCollision(playerRect, rect)){\n              gameOver();\n          }\n      })\n  }\n\n  //Get the blue rectangle to start moving\n  function moveRectangle() {\n      rectangles.forEach(rect => {\n          rect.x += rect.dx;\n          rect.y += rect.dy;\n      })\n  }\n\n  //Detect whether rectangles hit edge of canvas\n  function borderRectangleCollisionDetection() {\n      rectangles.forEach(rect => {\n          if(rect.x + rect.width > canvas.width || rect.x < 0){\n              rect.dx *= -1;\n          }\n          if(rect.y + rect.height > canvas.height || rect.y < 0){\n              rect.dy *= -1;\n          }\n      })\n  }\n\n  //Speed up game\n  let numberOfSpeed = 0;\n\n  function configureRectSpeed() {\n      const speedUpGame = setInterval(() => {\n          numberOfSpeed++;\n          rectangles.forEach(rect => {\n              rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n              rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n          });\n          if(numberOfSpeed === 4){\n              clearInterval(speedUpGame);\n          }\n      }, 10000)\n  }\n\n\n  function update() {\n      ctx.clearRect(0,0,canvas.width,canvas.height);\n      drawBorder();\n      drawRect();\n\n      if(hasGameStarted){\n          //Get the blue rectangle to start moving\n          moveRectangle();\n      }\n      //Detect whether rectangles hit edge of canvas\n      borderRectangleCollisionDetection();\n      //Detect whether player makes contact with border\n      playerCollisionDetection();\n      //Detect whether player makes contact with rectangle\n      rectangleCollisionDetection();\n      requestAnimationFrame(update);\n  }\n\n  //Call update method on initial document load\n  update();\n\n\n  //Returns true if mouse is in player rectangle\n  function isCursorInRect(x,y,rect){\n      return(x>rect.x && x<rect.x+rect.width && y>rect.y && y<rect.y+rect.height);\n  }\n\n  canvas.addEventListener(\"mousedown\", e => {\n      //Get X & Y coordinates in relation to canvas\n      const pos = {\n          x: e.clientX - canvas.offsetLeft,\n          y: e.clientY - canvas.offsetTop\n      }\n      //See if they clicked on the red square in particular\n      if(isCursorInRect(pos.x,pos.y,playerRect)){\n          //Start timer\n          if(!hasGameStarted){\n              startDate = new Date();\n              configureRectSpeed();\n          }\n          hasGameStarted = true;\n          controlPlayer = true;\n      }\n  })\n\n  canvas.addEventListener(\"mousemove\", e => {\n      if(controlPlayer && !hasGameOver){\n      //Get X & Y coordinates in relation to canvas\n      const pos = {\n          x: e.clientX - canvas.offsetLeft,\n          y: e.clientY - canvas.offsetTop\n      };\n      playerRect.x = pos.x - 25;\n      playerRect.y = pos.y - 25;\n      }\n  })\n\n  canvas.addEventListener(\"mouseup\", () => {\n      controlPlayer = false;\n  })\n\n\n//\n//   var [controlPlayer, setControlPlayer]= useState(false)\n//   var [hasGameStarted, setHasGameStarted]= useState(false)\n//   var [hasGameOver, setHasGameOver]= useState(false)\n//   var [canvas, setCanvas]= useState(false)\n//   var [ctx, setCtx]= useState(false)\n//\n//   // Prevent game from working whilst page reloads\n//   let startDate = null;\n//\n//   let playerRect = {\n//     x:275,\n//     y:275,\n//     width:50,\n//     height:50,\n//   }\n//\n//   // Game Elements\n//   let rectangles = [\n//     {\n//       x:75,\n//       y:75,\n//       dx:5,\n//       dy:4,\n//       width:75,\n//       height:75,\n//       color:\"#000099\",\n//     },\n//     {\n//       x:400,\n//       y:75,\n//       dx:-5,\n//       dy:5.5,\n//       width:80,\n//       height:60,\n//       color:\"#000099\",\n//     },\n//     {\n//       x:75,\n//       y:445,\n//       dx:5,\n//       dy:-5,\n//       width:40,\n//       height:80,\n//       color:\"#000099\",\n//     },\n//     {\n//       x:420,\n//       y:450,\n//       dx:-5,\n//       dy:-5,\n//       width:130,\n//       height:25,\n//       color:\"#000099\",\n//     },\n//   ]\n//\n//\n//\n//\n//\n//   useEffect(() => {\n//\n//\n//\n//         },10000)\n//       }\n//\n//\n//\n//\n//       // Returns true if collision\n//       function isCursorInRect(x,y,rect){\n//         return((x > rect.x) && (x < rect.x + rect.width) && (y > rect.y) && (y < rect.y + rect.height));\n//       }\n//\n//\n//\n//       canvas.addEventListener('mousedown', on_canvas_down, false);\n//\n//       function on_canvas_down(ev) {\n//\n//           // get x & y coordinates in relation to the canvas\n//\n//           var x = ev.clientX - this.offsetLeft;\n//           var y = ev.clientY - this.offsetTop;\n//\n//           // See if they clicked on red square\n//           if(isCursorInRect(x,y,playerRect)){\n//             //\n//             if(!hasGameStarted){\n//               startDate = new Date();\n//               configureRectSpeed();\n//             }\n//             setControlPlayer(true);\n//             setHasGameStarted(true);\n//\n//           }\n//\n//       }\n//\n//\n//\n//\n//\n//\n//\n//\n//       canvas.addEventListener('mousemove', on_canvas_move, false);\n//\n//\n//         function on_canvas_move(ev) {\n//\n//           if(controlPlayer && !hasGameOver){\n//             // get x & y coordinates in relation to the canvas\n//\n//             var x = ev.clientX - this.offsetLeft;\n//             var y = ev.clientY - this.offsetTop;\n//\n//             playerRect.x = x - 25;\n//             playerRect.y = y - 25;\n//           }\n//           console.log(x,\"xxxxxxxxxx\")\n//       }\n//\n//\n//\n//\n//\n//\n//\n//       canvas.addEventListener('mouseup', on_canvas_up, false);\n//       function on_canvas_up(ev) {\n//\n//         setControlPlayer(false);\n//       }\n//\n//\n//\n    // }, []);\n//\n//\n//\n//\n//\n// //     const timer = window.setInterval( async() => {\n// // }, 1000);\n//\n//\n//\n\n  return (\n    <div>\n\n<center>\nFighter Pilot<br/>\n<canvas width=\"600\" height=\"600\" id=\"canvas\"> </canvas>\n\n</center>\n<br/>\n    </div>\n  );\n}\n\nexport default FighterScreen;\n"]},"metadata":{},"sourceType":"module"}