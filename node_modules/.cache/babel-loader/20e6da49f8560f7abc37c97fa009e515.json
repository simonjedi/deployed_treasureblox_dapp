{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/treasure-blox/src/components/Structure/Timer.js\";\nimport React, { Component, useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport Countdown from 'react-countdown';\nimport moment from 'moment';\nimport { CardColumns, CardGroup, Card, Button, Container, Nav, Navbar, NavDropdown, Row, Col } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Card.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Timer = props => {\n  var moment = require('moment'); // require\n  // Timer\n  // const currentTimestamp = Math.floor(Date.now()/1000);\n  // const currentTimestamp = Math.floor();\n  // console.log(currentTimestamp); // get current timestamp\n  //   let date = new Intl.DateTimeFormat('en-US', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' }).format(currentTimestamp)\n  // console.log(currentTimestamp);\n  // let time = props.allGame1_deadline_time - currentTimestamp\n  // console.log(currentTimestamp);\n  // const time1 = currentTimestamp + 10;\n  //   function secondsSinceEpoch() {\n  //     return new Date/1000 | 0;\n  // }\n  // const set = new theTime - secondsSinceEpoch();\n  // console.log(secondsSinceEpoch(allGame1_deadline_time));\n  // var diff = moment.unix(Date/1000 | 0).from(props.allGame1_deadline_time);\n  // const time2 = 10;\n  // const time3 = 69;\n  // console.log(game1_clue)\n  // props.allGame1_deadline_time\n  // console.log(\"Deadline:\", mytime)\n  // var diff = moment.unix(props.allGame1_deadline_time).from(Date/1000 | 0);\n  // console.log(secondsSinceEpoch(diff));\n\n\n  var eventTime = props.allGame1_deadline_time;\n  var currentTime = Date.now();\n  var diffTime = eventTime - currentTime;\n  var duration = moment.duration(diffTime * 1000, 'milliseconds');\n  var interval = 1000;\n  setInterval(function () {\n    duration = moment.duration(duration - interval, 'milliseconds');\n    '.countdown'.text(duration.hours() + \":\" + duration.minutes() + \":\" + duration.seconds());\n  }, interval); // console.log(props.allGame1_deadline_time);\n  // function findDayDifference(date1, date2) {\n  // \t// always round down\n  //   return Math.floor((Math.abs(date2-date1))/(1000*60*60*24*60*60));\n  // }\n  //\n  // // console.log(findDayDifference(props.allGame1_deadline_time,Date.now()))\n  //\n  //\n  // const [count, setTime] = useState(20);\n  // useEffect(() => {\n  //   const timer = window.setInterval(() => {\n  //     // console.log(findDayDifference(props.allGame1_deadline_time))s\n  //     console.log(findDayDifference(props.allGame1_deadline_time,Date.now()))\n  //\n  //     setTime(prevTime => prevTime - 1); // <-- Change this line!\n  //\n  //   }, 1000);\n  //   return () => {\n  //     window.clearInterval(timer);\n  //   };\n  //\n  //\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"attemptPrize\",\n      children: [\"This time slot will expire in \", interval, \" seconds!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/treasure-blox/src/components/Structure/Timer.js"],"names":["React","Component","useState","useEffect","ReactDOM","Countdown","moment","CardColumns","CardGroup","Card","Button","Container","Nav","Navbar","NavDropdown","Row","Col","Timer","props","require","eventTime","allGame1_deadline_time","currentTime","Date","now","diffTime","duration","interval","setInterval","text","hours","minutes","seconds"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,OAAtD;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAGA,SAASC,WAAT,EAAqBC,SAArB,EAA+BC,IAA/B,EAAoCC,MAApC,EAA2CC,SAA3C,EAAqDC,GAArD,EAAyDC,MAAzD,EAAgEC,WAAhE,EAA4EC,GAA5E,EAAgFC,GAAhF,QAA2F,iBAA3F;AAEA,OAAO,sCAAP;AACA,OAAO,YAAP;;;AAEA,MAAMC,KAAK,GAAIC,KAAD,IAAW;AACvB,MAAIZ,MAAM,GAAGa,OAAO,CAAC,QAAD,CAApB,CADuB,CACS;AAEhC;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGF;AACA;AACA;AACA;AACA;AAGA;AAGE;AACA;AAEA;AAEF;AAEE;AACA;AACA;;;AACF,MAAIC,SAAS,GAAGF,KAAK,CAACG,sBAAtB;AAEA,MAAIC,WAAW,GAAGC,IAAI,CAACC,GAAL,EAAlB;AAEA,MAAIC,QAAQ,GAAGL,SAAS,GAACE,WAAzB;AAEA,MAAII,QAAQ,GAAGpB,MAAM,CAACoB,QAAP,CAAgBD,QAAQ,GAAC,IAAzB,EAA8B,cAA9B,CAAf;AACA,MAAIE,QAAQ,GAAG,IAAf;AAEAC,EAAAA,WAAW,CAAC,YAAU;AACpBF,IAAAA,QAAQ,GAAGpB,MAAM,CAACoB,QAAP,CAAgBA,QAAQ,GAAGC,QAA3B,EAAoC,cAApC,CAAX;AACC,gBAAD,CAAeE,IAAf,CAAoBH,QAAQ,CAACI,KAAT,KAAiB,GAAjB,GAAqBJ,QAAQ,CAACK,OAAT,EAArB,GAAwC,GAAxC,GAA4CL,QAAQ,CAACM,OAAT,EAAhE;AACD,GAHU,EAGTL,QAHS,CAAX,CA7CyB,CAkDvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA,sBAEE;AAAA,2BAEE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,mDAA6DA,QAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAAA;AAAA;AAAA;AAAA,UAFF;AAUD,CAzFD;;KAAMV,K;AA2FN,eAAeA,KAAf","sourcesContent":["import React, { Component, useState, useEffect } from 'react'\nimport ReactDOM from 'react-dom';\nimport Countdown from 'react-countdown';\nimport moment from 'moment';\n\n\nimport { CardColumns,CardGroup,Card,Button,Container,Nav,Navbar,NavDropdown,Row,Col } from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './Card.css';\n\nconst Timer = (props) => {\n  var moment = require('moment'); // require\n\n  // Timer\n  // const currentTimestamp = Math.floor(Date.now()/1000);\n  // const currentTimestamp = Math.floor();\n\n  // console.log(currentTimestamp); // get current timestamp\n  //   let date = new Intl.DateTimeFormat('en-US', { year: 'numeric', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', second: '2-digit' }).format(currentTimestamp)\n\n  // console.log(currentTimestamp);\n  // let time = props.allGame1_deadline_time - currentTimestamp\n  // console.log(currentTimestamp);\n  // const time1 = currentTimestamp + 10;\n\n\n//   function secondsSinceEpoch() {\n//     return new Date/1000 | 0;\n// }\n// const set = new theTime - secondsSinceEpoch();\n// console.log(secondsSinceEpoch(allGame1_deadline_time));\n\n\n// var diff = moment.unix(Date/1000 | 0).from(props.allGame1_deadline_time);\n\n\n  // const time2 = 10;\n  // const time3 = 69;\n\n  // console.log(game1_clue)\n\n// props.allGame1_deadline_time\n\n  // console.log(\"Deadline:\", mytime)\n  // var diff = moment.unix(props.allGame1_deadline_time).from(Date/1000 | 0);\n  // console.log(secondsSinceEpoch(diff));\nvar eventTime = props.allGame1_deadline_time;\n\nvar currentTime = Date.now();\n\nvar diffTime = eventTime-currentTime;\n\nvar duration = moment.duration(diffTime*1000,'milliseconds');\nvar interval = 1000;\n\nsetInterval(function(){\n  duration = moment.duration(duration - interval,'milliseconds');\n  ('.countdown').text(duration.hours()+\":\"+duration.minutes()+\":\"+duration.seconds())\n},interval);\n\n  // console.log(props.allGame1_deadline_time);\n\n  // function findDayDifference(date1, date2) {\n  // \t// always round down\n  //   return Math.floor((Math.abs(date2-date1))/(1000*60*60*24*60*60));\n  // }\n  //\n  // // console.log(findDayDifference(props.allGame1_deadline_time,Date.now()))\n  //\n  //\n  // const [count, setTime] = useState(20);\n  // useEffect(() => {\n  //   const timer = window.setInterval(() => {\n  //     // console.log(findDayDifference(props.allGame1_deadline_time))s\n  //     console.log(findDayDifference(props.allGame1_deadline_time,Date.now()))\n  //\n  //     setTime(prevTime => prevTime - 1); // <-- Change this line!\n  //\n  //   }, 1000);\n  //   return () => {\n  //     window.clearInterval(timer);\n  //   };\n  //\n  //\n  // }, []);\n\n\n\n\n  return(\n\n    <div>\n\n      <div className=\"attemptPrize\">This time slot will expire in {interval} seconds!</div>\n\n    </div>\n\n  );\n\n};\n\nexport default Timer;\n"]},"metadata":{},"sourceType":"module"}