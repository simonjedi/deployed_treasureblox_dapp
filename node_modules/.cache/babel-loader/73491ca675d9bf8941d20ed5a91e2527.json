{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect, useCallback } from \"react\"; // import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\n\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound'; //\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\n\nimport './style.css';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactAudioPlayer from 'react-audio-player'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FighterScreen = props => {\n  _s();\n\n  var [controlPlayer, setControlPlayer] = useState(false);\n  var [hasGameStarted, setHasGameStarted] = useState(false);\n  var [hasGameOver, setHasGameOver] = useState(false);\n  var [canvas, setCanvas] = useState(false);\n  var [ctx, setCtx] = useState(false); // Prevent game from working whilst page reloads\n\n  let startDate = null;\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n  }; //Game Elements\n\n  let rectangles = [{\n    x: 75,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  }, {\n    x: 400,\n    y: 75,\n    dx: -5,\n    dy: 5.5,\n    width: 80,\n    height: 60,\n    color: \"#000099\"\n  }, {\n    x: 75,\n    y: 445,\n    dx: 5,\n    dy: -5,\n    width: 40,\n    height: 80,\n    color: \"#000099\"\n  }, {\n    x: 420,\n    y: 450,\n    dx: -5,\n    dy: -5,\n    width: 130,\n    height: 25,\n    color: \"#000099\"\n  }];\n\n  function millisecondsToMinutes(millis) {\n    let minutes = Math.floor(millis / 60000);\n    let seconds = (millis % 60000 / 1000).toFixed(0);\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n  }\n\n  function gameOver() {\n    if (!hasGameOver) {\n      let endDate = new Date();\n      let timeDiff = endDate - startDate;\n\n      if (timeDiff < 60000) {\n        alert(`You survived ${timeDiff / 1000} seconds!`);\n      } else {\n        let minutesSurvived = millisecondsToMinutes(timeDiff);\n        alert(`You survived ${minutesSurvived} minutes. WOW!`);\n      }\n\n      hasGameOver = true;\n    }\n  } //Canvas Black Border\n\n\n  function drawBorder() {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.clearRect(50, 50, 500, 500);\n  } //Render rectangles to canvas.\n\n\n  function drawRect() {\n    //Draw playerRect first\n    ctx.fillStyle = \"#990000\";\n    ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n    rectangles.forEach(rect => {\n      ctx.fillStyle = rect.color;\n      ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n    });\n  } //Detect whether player makes contact with border\n\n\n  function playerCollisionDetection() {\n    if (playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50) {\n      gameOver();\n    }\n  } //Returns true if 2 rectangles are colliding\n\n\n  function isRectangleCollision(rect1, rect2) {\n    return !(rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y);\n  } //Detect whether player makes contact with rectangle\n\n\n  function rectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n      if (isRectangleCollision(playerRect, rect)) {\n        gameOver();\n      }\n    });\n  } //Get the blue rectangle to start moving\n\n\n  function moveRectangle() {\n    rectangles.forEach(rect => {\n      rect.x += rect.dx;\n      rect.y += rect.dy;\n    });\n  } //Detect whether rectangles hit edge of canvas\n\n\n  function borderRectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n      if (rect.x + rect.width > canvas.width || rect.x < 0) {\n        rect.dx *= -1;\n      }\n\n      if (rect.y + rect.height > canvas.height || rect.y < 0) {\n        rect.dy *= -1;\n      }\n    });\n  } //Speed up game\n\n\n  let numberOfSpeed = 0;\n\n  function configureRectSpeed() {\n    const speedUpGame = setInterval(() => {\n      numberOfSpeed++;\n      rectangles.forEach(rect => {\n        rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n        rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n      });\n\n      if (numberOfSpeed === 4) {\n        clearInterval(speedUpGame);\n      }\n    }, 10000);\n  }\n\n  useEffect(() => {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawBorder();\n    drawRect();\n\n    if (hasGameStarted) {\n      //Get the blue rectangle to start moving\n      moveRectangle();\n    } //Detect whether rectangles hit edge of canvas\n\n\n    borderRectangleCollisionDetection(); //Detect whether player makes contact with border\n\n    playerCollisionDetection(); //Detect whether player makes contact with rectangle\n\n    rectangleCollisionDetection(); // requestAnimationFrame(update);\n  }); //Returns true if mouse is in player rectangle\n\n  function isCursorInRect(x, y, rect) {\n    return x > rect.x && x < rect.x + rect.width && y > rect.y && y < rect.y + rect.height;\n  }\n\n  canvas.addEventListener(\"mousedown\", e => {\n    //Get X & Y coordinates in relation to canvas\n    const pos = {\n      x: e.clientX - canvas.offsetLeft,\n      y: e.clientY - canvas.offsetTop\n    }; //See if they clicked on the red square in particular\n\n    if (isCursorInRect(pos.x, pos.y, playerRect)) {\n      //Start timer\n      if (!hasGameStarted) {\n        startDate = new Date();\n        configureRectSpeed();\n      }\n\n      hasGameStarted = true;\n      controlPlayer = true;\n    }\n  });\n  canvas.addEventListener(\"mousemove\", e => {\n    if (controlPlayer && !hasGameOver) {\n      //Get X & Y coordinates in relation to canvas\n      const pos = {\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop\n      };\n      playerRect.x = pos.x - 25;\n      playerRect.y = pos.y - 25;\n    }\n  });\n  canvas.addEventListener(\"mouseup\", () => {\n    controlPlayer = false;\n  }); //\n  //   // Returns true if collision\n  //   function isCursorInRect(x,y,rect){\n  //     return((x > rect.x) && (x < rect.x + rect.width) && (y > rect.y) && (y < rect.y + rect.height));\n  //   }\n  //\n  //\n  //\n  //   canvas.addEventListener('mousedown', on_canvas_down, false);\n  //\n  //   function on_canvas_down(ev) {\n  //\n  //       // get x & y coordinates in relation to the canvas\n  //\n  //       var x = ev.clientX - this.offsetLeft;\n  //       var y = ev.clientY - this.offsetTop;\n  //\n  //       // See if they clicked on red square\n  //       if(isCursorInRect(x,y,playerRect)){\n  //         //\n  //         if(!hasGameStarted){\n  //           startDate = new Date();\n  //           configureRectSpeed();\n  //         }\n  //         setControlPlayer(true);\n  //         setHasGameStarted(true);\n  //\n  //       }\n  //\n  //   }\n  //\n  //\n  //\n  //\n  //\n  //\n  //\n  //\n  //   canvas.addEventListener('mousemove', on_canvas_move, false);\n  //\n  //\n  //     function on_canvas_move(ev) {\n  //\n  //       if(controlPlayer && !hasGameOver){\n  //         // get x & y coordinates in relation to the canvas\n  //\n  //         var x = ev.clientX - this.offsetLeft;\n  //         var y = ev.clientY - this.offsetTop;\n  //\n  //         playerRect.x = x - 25;\n  //         playerRect.y = y - 25;\n  //       }\n  //       console.log(x,\"xxxxxxxxxx\")\n  //   }\n  //\n  //\n  //\n  //\n  //\n  //\n  //\n  //   canvas.addEventListener('mouseup', on_canvas_up, false);\n  //   function on_canvas_up(ev) {\n  //\n  //     setControlPlayer(false);\n  //   }\n  //\n  //\n  //\n  // }, [controlPlayer,,hasGameStarted,hasGameOver,canvas,ctx]);\n  //\n  //\n  //\n  // function gameOver(){\n  //   if(!hasGameOver){\n  //     let endDate = new Date();\n  //     let timeDiff = endDate - startDate;\n  //     if (timeDiff < 60000){\n  //       alert('You survived '+ timeDiff/1000 +\" seconds!\");\n  //     }else{\n  //       // let minutesSurvived = millisecondsToMiutes(timeDiff);\n  //       alert('You survived ${minutesSurvived} WOW!');\n  //\n  //     }\n  //     setHasGameOver(true);\n  //   }\n  // }\n  //     const timer = window.setInterval( async() => {\n  // }, 1000);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"center\", {\n      children: [\"Fighter Pilot\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"600\",\n        height: \"600\",\n        id: \"canvas\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 357,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 355,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FighterScreen, \"p7H5CarBZNTROweMHdB13kyYsyc=\");\n\n_c = FighterScreen;\nexport default FighterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FighterScreen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js"],"names":["useState","useRef","useEffect","useCallback","Button","Container","Nav","Navbar","NavDropdown","useSound","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactAudioPlayer","FighterScreen","props","controlPlayer","setControlPlayer","hasGameStarted","setHasGameStarted","hasGameOver","setHasGameOver","canvas","setCanvas","ctx","setCtx","startDate","playerRect","x","y","width","height","rectangles","dx","dy","color","millisecondsToMinutes","millis","minutes","Math","floor","seconds","toFixed","gameOver","endDate","Date","timeDiff","alert","minutesSurvived","drawBorder","fillStyle","fillRect","clearRect","drawRect","forEach","rect","playerCollisionDetection","isRectangleCollision","rect1","rect2","rectangleCollisionDetection","moveRectangle","borderRectangleCollisionDetection","numberOfSpeed","configureRectSpeed","speedUpGame","setInterval","clearInterval","isCursorInRect","addEventListener","e","pos","clientX","offsetLeft","clientY","offsetTop"],"mappings":"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","sourcesContent":["\nimport { useState, useRef, useEffect, useCallback } from \"react\";\n\n// import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\nimport { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound';\n//\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\nimport './style.css';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n// Hook\n\n\n\n\nconst FighterScreen = (props) =>{\n\n\n  var [controlPlayer, setControlPlayer]= useState(false)\n  var [hasGameStarted, setHasGameStarted]= useState(false)\n  var [hasGameOver, setHasGameOver]= useState(false)\n  var [canvas, setCanvas]= useState(false)\n  var [ctx, setCtx]= useState(false)\n\n  // Prevent game from working whilst page reloads\n  let startDate = null;\n\n\n  let playerRect = {\n      x: 275,\n      y: 275,\n      width: 50,\n      height: 50\n  }\n  //Game Elements\n  let rectangles = [\n      {\n          x: 75,\n          y: 75,\n          dx: 5,\n          dy: 4,\n          width: 75,\n          height: 75,\n          color: \"#000099\"\n      },\n      {\n          x: 400,\n          y: 75,\n          dx: -5,\n          dy: 5.5,\n          width: 80,\n          height: 60,\n          color: \"#000099\"\n      },\n      {\n          x: 75,\n          y: 445,\n          dx: 5,\n          dy: -5,\n          width: 40,\n          height: 80,\n          color: \"#000099\"\n      },\n      {\n          x: 420,\n          y: 450,\n          dx: -5,\n          dy: -5,\n          width: 130,\n          height: 25,\n          color: \"#000099\"\n      }\n  ]\n\n\n\n\n  function millisecondsToMinutes(millis){\n    let minutes = Math.floor(millis / 60000);\n    let seconds = ((millis % 60000) / 1000).toFixed(0);\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n}\n\nfunction gameOver() {\n    if(!hasGameOver){\n        let endDate = new Date();\n        let timeDiff = endDate - startDate;\n        if(timeDiff < 60000){\n            alert(`You survived ${timeDiff / 1000} seconds!`);\n        }else{\n            let minutesSurvived = millisecondsToMinutes(timeDiff);\n            alert(`You survived ${minutesSurvived} minutes. WOW!`);\n        }\n\n        hasGameOver = true;\n    }\n}\n\n//Canvas Black Border\nfunction drawBorder() {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0,0,canvas.width,canvas.height);\n    ctx.clearRect(50,50,500,500);\n}\n\n\n//Render rectangles to canvas.\nfunction drawRect() {\n    //Draw playerRect first\n    ctx.fillStyle = \"#990000\";\n    ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n    rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n    })\n}\n\n//Detect whether player makes contact with border\nfunction playerCollisionDetection() {\n    if(\n        playerRect.x + playerRect.width > 550 ||\n        playerRect.x < 50 ||\n        playerRect.y + playerRect.height > 550 ||\n        playerRect.y < 50\n    ){\n        gameOver();\n    }\n}\n//Returns true if 2 rectangles are colliding\nfunction isRectangleCollision(rect1, rect2){\n    return !(\n        rect1.x>rect2.x+rect2.width ||\n        rect1.x+rect1.width<rect2.x ||\n        rect1.y>rect2.y+rect2.height ||\n        rect1.y+rect1.height<rect2.y\n    );\n}\n\n//Detect whether player makes contact with rectangle\nfunction rectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n        if(isRectangleCollision(playerRect, rect)){\n            gameOver();\n        }\n    })\n}\n\n//Get the blue rectangle to start moving\nfunction moveRectangle() {\n    rectangles.forEach(rect => {\n        rect.x += rect.dx;\n        rect.y += rect.dy;\n    })\n}\n\n//Detect whether rectangles hit edge of canvas\nfunction borderRectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n        if(rect.x + rect.width > canvas.width || rect.x < 0){\n            rect.dx *= -1;\n        }\n        if(rect.y + rect.height > canvas.height || rect.y < 0){\n            rect.dy *= -1;\n        }\n    })\n}\n\n//Speed up game\nlet numberOfSpeed = 0;\n\nfunction configureRectSpeed() {\n    const speedUpGame = setInterval(() => {\n        numberOfSpeed++;\n        rectangles.forEach(rect => {\n            rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n            rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n        });\n        if(numberOfSpeed === 4){\n            clearInterval(speedUpGame);\n        }\n    }, 10000)\n}\n\n\n\nuseEffect(() => {\n    ctx.clearRect(0,0,canvas.width,canvas.height);\n    drawBorder();\n    drawRect();\n\n    if(hasGameStarted){\n        //Get the blue rectangle to start moving\n        moveRectangle();\n    }\n    //Detect whether rectangles hit edge of canvas\n    borderRectangleCollisionDetection();\n    //Detect whether player makes contact with border\n    playerCollisionDetection();\n    //Detect whether player makes contact with rectangle\n    rectangleCollisionDetection();\n    // requestAnimationFrame(update);\n})\n\n\n//Returns true if mouse is in player rectangle\nfunction isCursorInRect(x,y,rect){\n    return(x>rect.x && x<rect.x+rect.width && y>rect.y && y<rect.y+rect.height);\n}\n\ncanvas.addEventListener(\"mousedown\", e => {\n    //Get X & Y coordinates in relation to canvas\n    const pos = {\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop\n    }\n    //See if they clicked on the red square in particular\n    if(isCursorInRect(pos.x,pos.y,playerRect)){\n        //Start timer\n        if(!hasGameStarted){\n            startDate = new Date();\n            configureRectSpeed();\n        }\n        hasGameStarted = true;\n        controlPlayer = true;\n    }\n})\n\ncanvas.addEventListener(\"mousemove\", e => {\n    if(controlPlayer && !hasGameOver){\n    //Get X & Y coordinates in relation to canvas\n    const pos = {\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop\n    };\n    playerRect.x = pos.x - 25;\n    playerRect.y = pos.y - 25;\n    }\n})\n\ncanvas.addEventListener(\"mouseup\", () => {\n    controlPlayer = false;\n})\n\n\n\n    //\n    //   // Returns true if collision\n    //   function isCursorInRect(x,y,rect){\n    //     return((x > rect.x) && (x < rect.x + rect.width) && (y > rect.y) && (y < rect.y + rect.height));\n    //   }\n    //\n    //\n    //\n    //   canvas.addEventListener('mousedown', on_canvas_down, false);\n    //\n    //   function on_canvas_down(ev) {\n    //\n    //       // get x & y coordinates in relation to the canvas\n    //\n    //       var x = ev.clientX - this.offsetLeft;\n    //       var y = ev.clientY - this.offsetTop;\n    //\n    //       // See if they clicked on red square\n    //       if(isCursorInRect(x,y,playerRect)){\n    //         //\n    //         if(!hasGameStarted){\n    //           startDate = new Date();\n    //           configureRectSpeed();\n    //         }\n    //         setControlPlayer(true);\n    //         setHasGameStarted(true);\n    //\n    //       }\n    //\n    //   }\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //   canvas.addEventListener('mousemove', on_canvas_move, false);\n    //\n    //\n    //     function on_canvas_move(ev) {\n    //\n    //       if(controlPlayer && !hasGameOver){\n    //         // get x & y coordinates in relation to the canvas\n    //\n    //         var x = ev.clientX - this.offsetLeft;\n    //         var y = ev.clientY - this.offsetTop;\n    //\n    //         playerRect.x = x - 25;\n    //         playerRect.y = y - 25;\n    //       }\n    //       console.log(x,\"xxxxxxxxxx\")\n    //   }\n    //\n    //\n    //\n    //\n    //\n    //\n    //\n    //   canvas.addEventListener('mouseup', on_canvas_up, false);\n    //   function on_canvas_up(ev) {\n    //\n    //     setControlPlayer(false);\n    //   }\n    //\n    //\n    //\n    // }, [controlPlayer,,hasGameStarted,hasGameOver,canvas,ctx]);\n    //\n    //\n    //\n    // function gameOver(){\n    //   if(!hasGameOver){\n    //     let endDate = new Date();\n    //     let timeDiff = endDate - startDate;\n    //     if (timeDiff < 60000){\n    //       alert('You survived '+ timeDiff/1000 +\" seconds!\");\n    //     }else{\n    //       // let minutesSurvived = millisecondsToMiutes(timeDiff);\n    //       alert('You survived ${minutesSurvived} WOW!');\n    //\n    //     }\n    //     setHasGameOver(true);\n    //   }\n    // }\n\n//     const timer = window.setInterval( async() => {\n// }, 1000);\n\n\n\n\n  return (\n    <div>\n\n<center>\nFighter Pilot<br/>\n<canvas width=\"600\" height=\"600\" id=\"canvas\"> </canvas>\n\n</center>\n<br/>\n    </div>\n  );\n}\n\nexport default FighterScreen;\n"]},"metadata":{},"sourceType":"module"}