{"ast":null,"code":"export default function CreateBoard(row,col,mines){// Board for storing the values for each cell\nvar board=[];// Tracking the minelocation \nvar mineLocation=[];// Create blank board\nfor(var x=0;x<row;x++){var subCol=[];for(var y=0;y<col;y++){subCol.push({value:0,revealed:false,x:x,y:y,flagged:false});}board.push(subCol);}// Randomize Bomb Placement\nvar minesCount=0;while(minesCount<mines){// Implementing random function\nvar _x=random(0,row-1);var _y=random(0,col-1);// placing bomb at random location(x,y) on board[x][y]\nif(board[_x][_y].value===0){board[_x][_y].value=\"X\";mineLocation.push([_x,_y]);minesCount++;}}// Increasing the value of specific cell \n// If the cell has mines increasing the cell value by 1.\n// Add Numbers\nfor(var i=0;i<row;i++){for(var j=0;j<col;j++){if(board[i][j].value===\"X\"){continue;}// Top\nif(i>0&&board[i-1][j].value===\"X\"){board[i][j].value++;}// Top Right\nif(i>0&&j<col-1&&board[i-1][j+1].value===\"X\"){board[i][j].value++;}// Right\nif(j<col-1&&board[i][j+1].value===\"X\"){board[i][j].value++;}// Botoom Right\nif(i<row-1&&j<col-1&&board[i+1][j+1].value===\"X\"){board[i][j].value++;}// Bottom\nif(i<row-1&&board[i+1][j].value===\"X\"){board[i][j].value++;}// Bottom Left\nif(i<row-1&&j>0&&board[i+1][j-1].value===\"X\"){board[i][j].value++;}// LEft\nif(j>0&&board[i][j-1].value===\"X\"){board[i][j].value++;}// Top Left\nif(i>0&&j>0&&board[i-1][j-1].value===\"X\"){board[i][j].value++;}}}return{board:board,mineLocation:mineLocation};};// Random function used for generating random value of x & y\nfunction random(){var min=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;var max=arguments.length>1?arguments[1]:undefined;// min and max included\nreturn Math.floor(Math.random()*(max-min+1)+min);}","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/MineGame/utils/CreateBoard.js"],"names":["CreateBoard","row","col","mines","board","mineLocation","x","subCol","y","push","value","revealed","flagged","minesCount","random","i","j","min","max","Math","floor"],"mappings":"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","sourcesContent":["export default function CreateBoard(row, col, mines){\n  // Board for storing the values for each cell\n    let board = [];\n  // Tracking the minelocation \n    let mineLocation = [];\n    // Create blank board\n  \n    for (let x = 0; x < row; x++) {\n      let subCol = [];\n      for (let y = 0; y < col; y++) {\n        subCol.push({\n          value: 0,\n          revealed: false,\n          x: x,\n          y: y,\n          flagged: false,\n        });\n      }\n      board.push(subCol);\n    }\n  \n    // Randomize Bomb Placement\n    let minesCount = 0;\n    while (minesCount < mines) {\n      // Implementing random function\n      let x = random(0, row - 1);\n      let y = random(0, col - 1);\n  \n      // placing bomb at random location(x,y) on board[x][y]\n      if (board[x][y].value === 0) {\n        board[x][y].value = \"X\";\n        mineLocation.push([x, y]);\n        minesCount++;\n      }\n    }\n  \n    // Increasing the value of specific cell \n    // If the cell has mines increasing the cell value by 1.\n    // Add Numbers\n    for (let i = 0; i < row; i++) {\n      for (let j = 0; j < col; j++) {\n        if (board[i][j].value === \"X\") {\n          continue;\n        }\n  \n        // Top\n        if (i > 0 && board[i - 1][j].value === \"X\") {\n          board[i][j].value++;\n        }\n  \n        // Top Right\n        if (\n          i > 0 &&\n          j < col - 1 &&\n          board[i - 1][j + 1].value === \"X\"\n        ) {\n          board[i][j].value++;\n        }\n  \n        // Right\n        if (j < col - 1 && board[i][j + 1].value === \"X\") {\n          board[i][j].value++;\n        }\n  \n        // Botoom Right\n        if (\n          i < row - 1 &&\n          j < col - 1 &&\n          board[i + 1][j + 1].value === \"X\"\n        ) {\n          board[i][j].value++;\n        }\n  \n        // Bottom\n        if (i < row - 1 && board[i + 1][j].value === \"X\") {\n          board[i][j].value++;\n        }\n  \n        // Bottom Left\n        if (\n          i < row - 1 &&\n          j > 0 &&\n          board[i + 1][j - 1].value === \"X\"\n        ) {\n          board[i][j].value++;\n        }\n  \n        // LEft\n        if (j > 0 && board[i][j - 1].value === \"X\") {\n          board[i][j].value++;\n        }\n  \n        // Top Left\n        if (i > 0 && j > 0 && board[i - 1][j - 1].value === \"X\") {\n          board[i][j].value++;\n        }\n      }\n    }\n    return { board, mineLocation };\n  };\n  \n  // Random function used for generating random value of x & y\n  function random(min = 0, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }"]},"metadata":{},"sourceType":"module"}