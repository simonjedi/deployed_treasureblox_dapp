import { EventEmitter } from "events";
import { IJsonRpcHistory } from "@walletconnect/types";
import { ERROR, formatMessageContext } from "@walletconnect/utils";
import { formatJsonRpcRequest, isJsonRpcError, } from "@walletconnect/jsonrpc-utils";
import { generateChildLogger, getLoggerContext } from "@walletconnect/logger";
import { HISTORY_CONTEXT, HISTORY_EVENTS } from "../constants";
export class JsonRpcHistory extends IJsonRpcHistory {
    constructor(client, logger) {
        super(client, logger);
        this.client = client;
        this.logger = logger;
        this.records = new Map();
        this.events = new EventEmitter();
        this.name = HISTORY_CONTEXT;
        this.cached = [];
        this.client;
        this.logger = generateChildLogger(logger, this.name);
        this.registerEventListeners();
    }
    async init() {
        this.logger.trace(`Initialized`);
        await this.initialize();
    }
    get context() {
        return getLoggerContext(this.logger);
    }
    get size() {
        return this.records.size;
    }
    get keys() {
        return Array.from(this.records.keys());
    }
    get values() {
        return Array.from(this.records.values());
    }
    get pending() {
        const requests = [];
        this.values.forEach(record => {
            if (typeof record.response !== "undefined")
                return;
            const requestEvent = {
                topic: record.topic,
                request: formatJsonRpcRequest(record.request.method, record.request.params, record.id),
                chainId: record.chainId,
            };
            return requests.push(requestEvent);
        });
        return requests;
    }
    async set(topic, request, chainId) {
        await this.isInitialized();
        this.logger.debug(`Setting JSON-RPC request history record`);
        this.logger.trace({ type: "method", method: "set", topic, request, chainId });
        if (this.records.has(request.id))
            return;
        const record = {
            id: request.id,
            topic,
            request: { method: request.method, params: request.params || null },
            chainId,
        };
        this.records.set(record.id, record);
        this.events.emit(HISTORY_EVENTS.created, record);
    }
    async resolve(response) {
        await this.isInitialized();
        this.logger.debug(`Updating JSON-RPC response history record`);
        this.logger.trace({ type: "method", method: "update", response });
        if (!this.records.has(response.id))
            return;
        const record = await this.getRecord(response.id);
        if (typeof record.response !== "undefined")
            return;
        record.response = isJsonRpcError(response)
            ? { error: response.error }
            : { result: response.result };
        this.records.set(record.id, record);
        this.events.emit(HISTORY_EVENTS.updated, record);
    }
    async get(topic, id) {
        await this.isInitialized();
        this.logger.debug(`Getting record`);
        this.logger.trace({ type: "method", method: "get", topic, id });
        const record = await this.getRecord(id);
        if (record.topic !== topic) {
            const error = ERROR.MISMATCHED_TOPIC.format({
                context: formatMessageContext(this.context),
                id,
            });
            throw new Error(error.message);
        }
        return record;
    }
    async delete(topic, id) {
        await this.isInitialized();
        this.logger.debug(`Deleting record`);
        this.logger.trace({ type: "method", method: "delete", id });
        this.values.forEach((record) => {
            if (record.topic === topic) {
                if (typeof id !== "undefined" && record.id !== id)
                    return;
                this.records.delete(record.id);
                this.events.emit(HISTORY_EVENTS.deleted, record);
            }
        });
    }
    async exists(topic, id) {
        await this.isInitialized();
        if (!this.records.has(id))
            return false;
        const record = await this.getRecord(id);
        return record.topic === topic;
    }
    on(event, listener) {
        this.events.on(event, listener);
    }
    once(event, listener) {
        this.events.once(event, listener);
    }
    off(event, listener) {
        this.events.off(event, listener);
    }
    removeListener(event, listener) {
        this.events.removeListener(event, listener);
    }
    async getRecord(id) {
        await this.isInitialized();
        const record = this.records.get(id);
        if (!record) {
            const error = ERROR.NO_MATCHING_ID.format({
                context: formatMessageContext(this.context),
                id,
            });
            throw new Error(error.message);
        }
        return record;
    }
    async persist() {
        await this.client.storage.setJsonRpcRecords(this.context, this.values);
        this.events.emit(HISTORY_EVENTS.sync);
    }
    async restore() {
        try {
            const persisted = await this.client.storage.getJsonRpcRecords(this.context);
            if (typeof persisted === "undefined")
                return;
            if (!persisted.length)
                return;
            if (this.records.size) {
                const error = ERROR.RESTORE_WILL_OVERRIDE.format({
                    context: formatMessageContext(this.context),
                });
                this.logger.error(error.message);
                throw new Error(error.message);
            }
            this.cached = persisted;
            this.logger.debug(`Successfully Restored records for ${formatMessageContext(this.context)}`);
            this.logger.trace({ type: "method", method: "restore", records: this.values });
        }
        catch (e) {
            this.logger.debug(`Failed to Restore records for ${formatMessageContext(this.context)}`);
            this.logger.error(e);
        }
    }
    async initialize() {
        await this.restore();
        this.reset();
        this.onInit();
    }
    reset() {
        this.cached.forEach(record => this.records.set(record.id, record));
    }
    onInit() {
        this.cached = [];
        this.events.emit(HISTORY_EVENTS.init);
    }
    async isInitialized() {
        if (!this.cached.length)
            return;
        return new Promise(resolve => {
            this.events.once(HISTORY_EVENTS.init, () => resolve());
        });
    }
    registerEventListeners() {
        this.events.on(HISTORY_EVENTS.created, (record) => {
            const eventName = HISTORY_EVENTS.created;
            this.logger.info(`Emitting ${eventName}`);
            this.logger.debug({ type: "event", event: eventName, record });
            this.persist();
        });
        this.events.on(HISTORY_EVENTS.updated, (record) => {
            const eventName = HISTORY_EVENTS.updated;
            this.logger.info(`Emitting ${eventName}`);
            this.logger.debug({ type: "event", event: eventName, record });
            this.persist();
        });
        this.events.on(HISTORY_EVENTS.deleted, (record) => {
            const eventName = HISTORY_EVENTS.deleted;
            this.logger.info(`Emitting ${eventName}`);
            this.logger.debug({ type: "event", event: eventName, record });
            this.persist();
        });
    }
}
//# sourceMappingURL=history.js.map