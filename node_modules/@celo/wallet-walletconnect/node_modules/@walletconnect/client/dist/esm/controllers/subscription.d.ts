/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "pino";
import { IClient, ISubscription, ISubscriptionTopicMap, Reason, SubscriptionParams } from "@walletconnect/types";
export declare class SubscriptionTopicMap implements ISubscriptionTopicMap {
    map: Map<string, string[]>;
    get topics(): string[];
    set(topic: string, id: string): void;
    get(topic: string): string[];
    exists(topic: string, id: string): boolean;
    delete(topic: string, id?: string): void;
    clear(): void;
}
export declare class Subscription extends ISubscription {
    client: IClient;
    logger: Logger;
    subscriptions: Map<string, SubscriptionParams>;
    topicMap: SubscriptionTopicMap;
    events: EventEmitter;
    name: string;
    private cached;
    constructor(client: IClient, logger: Logger);
    init(): Promise<void>;
    get context(): string;
    get length(): number;
    get ids(): string[];
    get values(): SubscriptionParams[];
    get topics(): string[];
    set(id: string, subscription: SubscriptionParams): Promise<void>;
    get(id: string): Promise<SubscriptionParams>;
    exists(id: string, topic: string): Promise<boolean>;
    delete(id: string, reason: Reason): Promise<void>;
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    enable(): Promise<void>;
    disable(): Promise<void>;
    private reset;
    private onEnable;
    private onDisable;
    private setSubscription;
    private getSubscription;
    private deleteSubscription;
    private checkExpiry;
    private expire;
    private checkSubscriptions;
    private persist;
    private restore;
    private initialize;
    private onInit;
    private isEnabled;
    private onExpiry;
    private registerEventListeners;
}
//# sourceMappingURL=subscription.d.ts.map