{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect, useCallback } from \"react\"; // import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\n\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound'; //\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\n\nimport './style.css';\nimport ohno from './assets/troy_oh_no.mp4';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactAudioPlayer from 'react-audio-player'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FighterScreen = props => {\n  _s();\n\n  var [controlPlayer, setControlPlayer] = useState(false);\n  var [hasGameStarted, setHasGameStarted] = useState(false);\n  var [hasGameOver, setHasGameOver] = useState(false);\n  var [canvas, setCanvas] = useState(false);\n  var [ctx, setCtx] = useState(false);\n  var [exit, setExit] = useState(true);\n  var [isGameOver, setIsGameOver] = useState(false);\n  var [redirectLevel1More, setredirectLevel1More] = useState(false);\n  const [timeleft, setTimeleft] = useState(10);\n  const [start, setStart] = useState(false);\n  let secondsPassed;\n  let oldTimeStamp;\n  let fps;\n\n  function gameLoop(timeStamp) {\n    // Calculate the number of seconds passed since the last frame\n    secondsPassed = (timeStamp - oldTimeStamp) / 1000;\n    oldTimeStamp = timeStamp; // Calculate fps\n\n    fps = Math.round(1 / secondsPassed); // Draw number to the screen\n\n    context.fillStyle = 'white';\n    context.fillRect(0, 0, 200, 100);\n    context.font = '25px Arial';\n    context.fillStyle = 'black';\n    context.fillText(\"FPS: \" + fps, 10, 30); // Perform the drawing operation\n\n    draw(); // The loop function has reached it's end. Keep requesting new frames\n\n    window.requestAnimationFrame(gameLoop);\n  } // Prevent game from working whilst page reloads\n\n\n  let startDate = null;\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n  }; //Game Elements\n\n  let rectangles = [{\n    x: 75,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  }, {\n    x: 450,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  } // {\n  //     x: 450,\n  //     y: 450,\n  //     dx: 5,\n  //     dy: 4,\n  //     width: 75,\n  //     height: 75,\n  //     color: \"#000099\"\n  // },\n  // {\n  //     x: 265,\n  //     y: 450,\n  //     dx: 5,\n  //     dy: 4,\n  //     width: 75,\n  //     height: 75,\n  //     color: \"#000099\"\n  // },\n  // {\n  //     x: 400,\n  //     y: 75,\n  //     dx: -5,\n  //     dy: 5.5,\n  //     width: 80,\n  //     height: 60,\n  //     color: \"#000099\"\n  // },\n  // {\n  //     x: 75,\n  //     y: 445,\n  //     dx: 5,\n  //     dy: -5,\n  //     width: 40,\n  //     height: 80,\n  //     color: \"#000099\"\n  // },\n  // {\n  //     x: 420,\n  //     y: 450,\n  //     dx: -5,\n  //     dy: -5,\n  //     width: 130,\n  //     height: 25,\n  //     color: \"#000099\"\n  // }\n  ];\n\n  const gameOverTime = () => {\n    setIsGameOver(true);\n    setExit(false);\n  };\n\n  useEffect(() => {\n    if (start) {\n      setTimeout(() => {\n        if (timeleft > 0) {\n          var timer = timeleft - 1;\n          setTimeleft(timer);\n        }\n\n        if (timeleft === 0) {\n          console.log(\"wiiiiiinnnnnnnn\");\n          window.scrollTo({\n            top: 0\n          });\n          setredirectLevel1More(true);\n          setTimeout(setStart(false), 3500);\n        }\n      }, 1000);\n    }\n  });\n  useEffect(() => {\n    const canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n\n    function millisecondsToMinutes(millis) {\n      let minutes = Math.floor(millis / 60000);\n      let seconds = (millis % 60000 / 1000).toFixed(0);\n      return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    } // Global Varabales\n    // The proper game loop\n\n\n    window.requestAnimationFrame(gameLoop);\n\n    function gameLoop() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawBorder();\n      drawRect();\n\n      if (hasGameStarted) {\n        //Get the blue rectangle to start moving\n        moveRectangle();\n      } //Detect whether rectangles hit edge of canvas\n\n\n      borderRectangleCollisionDetection(); //Detect whether player makes contact with border\n\n      playerCollisionDetection(); //Detect whether player makes contact with rectangle\n\n      rectangleCollisionDetection();\n      window.requestAnimationFrame(gameLoop);\n    } // function update() {\n    //     ctx.clearRect(0,0,canvas.width,canvas.height);\n    //     drawBorder();\n    //     drawRect();\n    //\n    //     if(hasGameStarted){\n    //         //Get the blue rectangle to start moving\n    //         moveRectangle();\n    //     }\n    //     //Detect whether rectangles hit edge of canvas\n    //     borderRectangleCollisionDetection();\n    //     //Detect whether player makes contact with border\n    //     playerCollisionDetection();\n    //     //Detect whether player makes contact with rectangle\n    //     rectangleCollisionDetection();\n    //     requestAnimationFrame(update);\n    // }\n    //\n    // //Call update method on initial document load\n    // update();\n    //Render rectangles to canvas.\n\n\n    function drawRect() {\n      //Draw playerRect first\n      ctx.fillStyle = \"#990000\";\n      ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n      rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n      });\n    } //\n    // function update(){\n    //   ctx.clearRect(0,0,canvas.width,canvas.height);\n    //\n    //   drawBoarder();\n    //   drawRect();\n    //\n    //   if (hasGameStarted){\n    //     moveRectangle();\n    //   }\n    //\n    //   playerCollisionDetection();\n    //   rectangleCollisionDetection();\n    //   boarderRectangleDetection();\n    //   requestAnimationFrame(update);\n    // }\n    //\n    // // call update methord on initial document load\n    // update();\n    // Canvas black boarder\n    //Canvas Black Border\n\n\n    function drawBorder() {\n      ctx.fillStyle = 'black';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.clearRect(25, 25, 550, 550);\n    } // function drawBoarder(){\n    //   ctx.fillStyle = \"black\";\n    //   ctx.fillRect(0,0,canvas.width,canvas.height);\n    //   ctx.clearRect(50,50,500,500);\n    // }\n\n\n    function millisecondsToMiutes(millis) {\n      let minutes = Math.floor(millis / 60000);\n      let seconds = Math.floor(millis % 60000 / 1000);\n      return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n    }\n\n    function gameOver() {\n      gameOverTime(); // if(!hasGameOver){\n      //\n      //\n      //\n      //\n      //     let endDate = new Date();\n      //     let timeDiff = endDate - startDate;\n      //     if(timeDiff < 5000){\n      //       // gameOverTime()\n      //\n      //\n      //\n      //\n      //         // alert(`You survived ${timeDiff / 1000} seconds!`);\n      //     }else{\n      //       gameOverTime()\n      //         // let minutesSurvived = millisecondsToMinutes(timeDiff);\n      //         // alert(`You survived ${minutesSurvived} minutes. WOW!`);\n      //     }\n      // setHasGameOver(true);\n      // FighterScreen()\n      // }\n    } // Render rectangles to canvas\n    //Render rectangles to canvas.\n\n\n    function drawRect() {\n      //Draw playerRect first\n      ctx.fillStyle = \"#990000\";\n      ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n      rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n      });\n    } // function drawRect(){\n    //   // Draw player rect first\n    //   ctx.fillStyle = \"#901234\";\n    //   ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n    //\n    //   rectangles.forEach(rect => {\n    //     ctx.fillStyle = rect.color;\n    //     ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n    //   });\n    //\n    // }\n    //Detect whether player makes contact with border\n\n\n    function playerCollisionDetection() {\n      if (playerRect.x + playerRect.width > 575 || playerRect.x < 25 || playerRect.y + playerRect.height > 575 || playerRect.y < 25) {\n        gameOver();\n      }\n    } // collision\n    // function playerCollisionDetection(){\n    //   if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n    //   ){\n    //     gameOver();\n    //   }\n    // }\n    //Returns true if 2 rectangles are colliding\n\n\n    function isRectangleCollision(rect1, rect2) {\n      return !(rect1.x + 10 > rect2.x + rect2.width || rect1.x + rect1.width - 10 < rect2.x || rect1.y + 10 > rect2.y + rect2.height || rect1.y + rect1.height - 10 < rect2.y);\n    } // function isRectangleCollision(rect1,rect2){\n    //   return !(\n    //     rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n    //   );\n    // }\n    //Detect whether player makes contact with rectangle\n\n\n    function rectangleCollisionDetection() {\n      rectangles.forEach(rect => {\n        if (isRectangleCollision(playerRect, rect)) {\n          gameOver();\n        }\n      });\n    } //\n    // function rectangleCollisionDetection(){\n    //   rectangles.forEach(rect =>{\n    //     if(isRectangleCollision(playerRect,rect)){\n    //       gameOver();\n    //     }\n    //   })\n    // }\n    //Get the blue rectangle to start moving\n\n\n    function moveRectangle() {\n      rectangles.forEach(rect => {\n        rect.x += rect.dx;\n        rect.y += rect.dy;\n      });\n    } // function moveRectangle(){\n    //   rectangles.forEach(rect => {\n    //     rect.x += rect.dx;\n    //     rect.y += rect.dy;\n    //   })\n    // }\n    //Detect whether rectangles hit edge of canvas\n\n\n    function borderRectangleCollisionDetection() {\n      rectangles.forEach(rect => {\n        if (rect.x + rect.width > canvas.width || rect.x < 0) {\n          rect.dx *= -1;\n        }\n\n        if (rect.y + rect.height > canvas.height || rect.y < 0) {\n          rect.dy *= -1;\n        }\n      });\n    } // function boarderRectangleDetection(){\n    //   rectangles.forEach(rect=>{\n    //     if(rect.x + rect.width > canvas.width || rect.x < 0){\n    //       rect.dx *= -1;\n    //     }\n    //     if(rect.y + rect.height > canvas.height || rect.y < 0){\n    //       rect.dy *= -1;\n    //     }\n    //   })\n    // }\n\n\n    let numberOfSpeed = 0;\n\n    function configureRectSpeed() {\n      const speedUpGame = setInterval(() => {\n        numberOfSpeed++;\n        rectangles.forEach(rect => {\n          rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n          rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n        });\n\n        if (numberOfSpeed === 4) {\n          clearInterval(speedUpGame);\n        }\n      }, 10000);\n    } //Returns true if mouse is in player rectangle\n\n\n    function isCursorInRect(x, y, rect) {\n      return x > rect.x && x < rect.x + rect.width && y > rect.y && y < rect.y + rect.height;\n    } // // Returns true if collision\n    // function isCursorInRect(x,y,rect){\n    //   return((x > rect.x) && (x < rect.x + rect.width) && (y > rect.y) && (y < rect.y + rect.height));\n    // }\n\n\n    canvas.addEventListener(\"mousedown\", e => {\n      //Get X & Y coordinates in relation to canvas\n      const pos = {\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop\n      }; //See if they clicked on the red square in particular\n\n      if (isCursorInRect(pos.x, pos.y, playerRect)) {\n        //Start timer\n        if (!hasGameStarted) {\n          startDate = new Date(); // configureRectSpeed();\n        }\n\n        setControlPlayer(true);\n        setHasGameStarted(true);\n        setStart(true);\n      }\n    }); // canvas.addEventListener('mousedown', on_canvas_down, false);\n    //\n    // function on_canvas_down(ev) {\n    //\n    //     // get x & y coordinates in relation to the canvas\n    //\n    //     var x = ev.clientX - this.offsetLeft;\n    //     var y = ev.clientY - this.offsetTop;\n    //\n    //     // See if they clicked on red square\n    //     if(isCursorInRect(x,y,playerRect)){\n    //       //\n    //       if(!hasGameStarted){\n    //         startDate = new Date();\n    //         configureRectSpeed();\n    //       }\n    //       setControlPlayer(true);\n    //       setHasGameStarted(true);\n    //\n    //     }\n    //\n    // }\n\n    canvas.addEventListener(\"mousemove\", e => {\n      if (controlPlayer && !hasGameOver) {\n        //Get X & Y coordinates in relation to canvas\n        const pos = {\n          x: e.clientX - canvas.offsetLeft,\n          y: e.clientY - canvas.offsetTop\n        };\n        playerRect.x = pos.x - 25;\n        playerRect.y = pos.y - 25;\n      }\n    }); // canvas.addEventListener('mousemove', on_canvas_move, false);\n    //\n    //\n    //   function on_canvas_move(ev) {\n    //\n    //     if(controlPlayer && !hasGameOver){\n    //       // get x & y coordinates in relation to the canvas\n    //\n    //       var x = ev.clientX - this.offsetLeft;\n    //       var y = ev.clientY - this.offsetTop;\n    //\n    //       playerRect.x = x - 25;\n    //       playerRect.y = y - 25;\n    //     }\n    //     console.log(x,\"xxxxxxxxxx\")\n    // }\n\n    canvas.addEventListener(\"mouseup\", () => {\n      setControlPlayer(false);\n    }); // canvas.addEventListener('mouseup', on_canvas_up, false);\n    // function on_canvas_up(ev) {\n    //\n    //   setControlPlayer(false);\n    // }\n  }, [controlPlayer, hasGameStarted, hasGameOver, canvas, ctx]); //     const timer = window.setInterval( async() => {\n  // }, 1000);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"top\",\n    children: [isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"siteTitle\",\n      style: {\n        fontSize: '60px',\n        color: \"#000000\"\n      },\n      children: \"You Scored Bad Luck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 20\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(ReactAudioPlayer, {\n      src: ohno,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 20\n    }, this), exit ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/JetswapXTreasureBlox1/:top\",\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 620,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 618,\n      columnNumber: 7\n    }, this), redirectLevel1More ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/PartnershipLevel1More/:top\",\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 626,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wording\",\n        children: [\"Fighter Pilot \", timeleft]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 56\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"600\",\n        height: \"600\",\n        id: \"canvas\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 644,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 605,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FighterScreen, \"Q1mLQNz2IDLKnrniVKQGfGdiUdk=\");\n\n_c = FighterScreen;\nexport default FighterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FighterScreen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js"],"names":["useState","useRef","useEffect","useCallback","Button","Container","Nav","Navbar","NavDropdown","useSound","ohno","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactAudioPlayer","FighterScreen","props","controlPlayer","setControlPlayer","hasGameStarted","setHasGameStarted","hasGameOver","setHasGameOver","canvas","setCanvas","ctx","setCtx","exit","setExit","isGameOver","setIsGameOver","redirectLevel1More","setredirectLevel1More","timeleft","setTimeleft","start","setStart","secondsPassed","oldTimeStamp","fps","gameLoop","timeStamp","Math","round","context","fillStyle","fillRect","font","fillText","draw","window","requestAnimationFrame","startDate","playerRect","x","y","width","height","rectangles","dx","dy","color","gameOverTime","setTimeout","timer","console","log","scrollTo","top","document","getElementById","getContext","millisecondsToMinutes","millis","minutes","floor","seconds","toFixed","clearRect","drawBorder","drawRect","moveRectangle","borderRectangleCollisionDetection","playerCollisionDetection","rectangleCollisionDetection","forEach","rect","millisecondsToMiutes","gameOver","isRectangleCollision","rect1","rect2","numberOfSpeed","configureRectSpeed","speedUpGame","setInterval","clearInterval","isCursorInRect","addEventListener","e","pos","clientX","offsetLeft","clientY","offsetTop","Date","fontSize"],"mappings":"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","sourcesContent":["\nimport { useState, useRef, useEffect, useCallback } from \"react\";\n\n// import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\nimport { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound';\n//\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\nimport './style.css';\n\nimport ohno from './assets/troy_oh_no.mp4';\n\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n// Hook\n\n\n\n\nconst FighterScreen = (props) =>{\n\n\n  var [controlPlayer, setControlPlayer]= useState(false)\n  var [hasGameStarted, setHasGameStarted]= useState(false)\n  var [hasGameOver, setHasGameOver]= useState(false)\n  var [canvas, setCanvas]= useState(false)\n  var [ctx, setCtx]= useState(false)\n  var [exit,setExit] = useState(true);\n  var [isGameOver, setIsGameOver]= useState(false)\n  var [redirectLevel1More,setredirectLevel1More] = useState(false);\n  const [timeleft,setTimeleft] = useState(10)\n  const [start,setStart] = useState(false)\n\n\n\n  let secondsPassed;\n  let oldTimeStamp;\n  let fps;\n\n\n  function gameLoop(timeStamp) {\n\n    // Calculate the number of seconds passed since the last frame\n    secondsPassed = (timeStamp - oldTimeStamp) / 1000;\n    oldTimeStamp = timeStamp;\n\n    // Calculate fps\n    fps = Math.round(1 / secondsPassed);\n\n    // Draw number to the screen\n    context.fillStyle = 'white';\n    context.fillRect(0, 0, 200, 100);\n    context.font = '25px Arial';\n    context.fillStyle = 'black';\n    context.fillText(\"FPS: \" + fps, 10, 30);\n\n    // Perform the drawing operation\n    draw();\n\n    // The loop function has reached it's end. Keep requesting new frames\n    window.requestAnimationFrame(gameLoop);\n}\n\n\n  // Prevent game from working whilst page reloads\n  let startDate = null;\n\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n}\n//Game Elements\nlet rectangles = [\n    {\n        x: 75,\n        y: 75,\n        dx: 5,\n        dy: 4,\n        width: 75,\n        height: 75,\n        color: \"#000099\"\n    },\n    {\n        x: 450,\n        y: 75,\n        dx: 5,\n        dy: 4,\n        width: 75,\n        height: 75,\n        color: \"#000099\"\n    },\n    // {\n    //     x: 450,\n    //     y: 450,\n    //     dx: 5,\n    //     dy: 4,\n    //     width: 75,\n    //     height: 75,\n    //     color: \"#000099\"\n    // },\n\n    // {\n    //     x: 265,\n    //     y: 450,\n    //     dx: 5,\n    //     dy: 4,\n    //     width: 75,\n    //     height: 75,\n    //     color: \"#000099\"\n    // },\n    // {\n    //     x: 400,\n    //     y: 75,\n    //     dx: -5,\n    //     dy: 5.5,\n    //     width: 80,\n    //     height: 60,\n    //     color: \"#000099\"\n    // },\n    // {\n    //     x: 75,\n    //     y: 445,\n    //     dx: 5,\n    //     dy: -5,\n    //     width: 40,\n    //     height: 80,\n    //     color: \"#000099\"\n    // },\n    // {\n    //     x: 420,\n    //     y: 450,\n    //     dx: -5,\n    //     dy: -5,\n    //     width: 130,\n    //     height: 25,\n    //     color: \"#000099\"\n    // }\n]\n\n\n      const gameOverTime = () => {\n\n        setIsGameOver(true);\n        setExit(false);\n\n      }\n\n      useEffect(() => {\n          if (start){\n            setTimeout(() => {\n\n\n              if (timeleft > 0) {\n                var timer = timeleft -1\n                setTimeleft(timer)\n              }\n\n\n              if (timeleft === 0){\n\n                console.log(\"wiiiiiinnnnnnnn\")\n\n                window.scrollTo({top: 0});\n                setredirectLevel1More(true);\n                setTimeout(setStart(false),3500);\n\n\n\n              }\n            }, 1000)\n          }\n      })\n\n\n\n\n\n\n\n\n\nuseEffect(() => {\n\n      const canvas = document.getElementById(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n\n\n      function millisecondsToMinutes(millis){\n          let minutes = Math.floor(millis / 60000);\n          let seconds = ((millis % 60000) / 1000).toFixed(0);\n          return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n      }\n\n      // Global Varabales\n\n      // The proper game loop\n      window.requestAnimationFrame(gameLoop);\n\n      function gameLoop() {\n        ctx.clearRect(0,0,canvas.width,canvas.height);\n        drawBorder();\n        drawRect();\n\n        if(hasGameStarted){\n            //Get the blue rectangle to start moving\n            moveRectangle();\n        }\n        //Detect whether rectangles hit edge of canvas\n        borderRectangleCollisionDetection();\n        //Detect whether player makes contact with border\n        playerCollisionDetection();\n        //Detect whether player makes contact with rectangle\n        rectangleCollisionDetection();\n          window.requestAnimationFrame(gameLoop);\n      }\n      // function update() {\n      //     ctx.clearRect(0,0,canvas.width,canvas.height);\n      //     drawBorder();\n      //     drawRect();\n      //\n      //     if(hasGameStarted){\n      //         //Get the blue rectangle to start moving\n      //         moveRectangle();\n      //     }\n      //     //Detect whether rectangles hit edge of canvas\n      //     borderRectangleCollisionDetection();\n      //     //Detect whether player makes contact with border\n      //     playerCollisionDetection();\n      //     //Detect whether player makes contact with rectangle\n      //     rectangleCollisionDetection();\n      //     requestAnimationFrame(update);\n      // }\n      //\n      // //Call update method on initial document load\n      // update();\n\n      //Render rectangles to canvas.\n      function drawRect() {\n          //Draw playerRect first\n          ctx.fillStyle = \"#990000\";\n          ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n          rectangles.forEach(rect => {\n              ctx.fillStyle = rect.color;\n              ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n          })\n      }\n\n      //\n      // function update(){\n      //   ctx.clearRect(0,0,canvas.width,canvas.height);\n      //\n      //   drawBoarder();\n      //   drawRect();\n      //\n      //   if (hasGameStarted){\n      //     moveRectangle();\n      //   }\n      //\n      //   playerCollisionDetection();\n      //   rectangleCollisionDetection();\n      //   boarderRectangleDetection();\n      //   requestAnimationFrame(update);\n      // }\n      //\n      // // call update methord on initial document load\n      // update();\n\n\n\n\n\n      // Canvas black boarder\n\n      //Canvas Black Border\nfunction drawBorder() {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0,0,canvas.width,canvas.height);\n    ctx.clearRect(25,25,550,550);\n}\n\n      // function drawBoarder(){\n      //   ctx.fillStyle = \"black\";\n      //   ctx.fillRect(0,0,canvas.width,canvas.height);\n      //   ctx.clearRect(50,50,500,500);\n      // }\n\n\n      function millisecondsToMiutes(millis){\n        let minutes = Math.floor(millis/60000);\n        let seconds = Math.floor((millis % 60000)/1000);\n        return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n\n      }\n\n\n\n\n\n      function gameOver() {\n\n        gameOverTime()\n\n\n          // if(!hasGameOver){\n          //\n          //\n          //\n          //\n          //     let endDate = new Date();\n          //     let timeDiff = endDate - startDate;\n          //     if(timeDiff < 5000){\n          //       // gameOverTime()\n          //\n          //\n          //\n          //\n          //         // alert(`You survived ${timeDiff / 1000} seconds!`);\n          //     }else{\n          //       gameOverTime()\n          //         // let minutesSurvived = millisecondsToMinutes(timeDiff);\n          //         // alert(`You survived ${minutesSurvived} minutes. WOW!`);\n          //     }\n\n              // setHasGameOver(true);\n\n              // FighterScreen()\n\n\n          // }\n      }\n\n\n      // Render rectangles to canvas\n\n      //Render rectangles to canvas.\nfunction drawRect() {\n    //Draw playerRect first\n    ctx.fillStyle = \"#990000\";\n    ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n    rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n    })\n}\n\n      // function drawRect(){\n      //   // Draw player rect first\n      //   ctx.fillStyle = \"#901234\";\n      //   ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n      //\n      //   rectangles.forEach(rect => {\n      //     ctx.fillStyle = rect.color;\n      //     ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n      //   });\n      //\n      // }\n\n      //Detect whether player makes contact with border\nfunction playerCollisionDetection() {\n    if(\n        playerRect.x + playerRect.width > 575 ||\n        playerRect.x < 25 ||\n        playerRect.y + playerRect.height > 575 ||\n        playerRect.y < 25\n    ){\n        gameOver();\n    }\n}\n\n      // collision\n      // function playerCollisionDetection(){\n      //   if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n      //   ){\n      //     gameOver();\n      //   }\n      // }\n\n      //Returns true if 2 rectangles are colliding\nfunction isRectangleCollision(rect1, rect2){\n    return !(\n        rect1.x+10>rect2.x+rect2.width ||\n        rect1.x+rect1.width-10<rect2.x ||\n        rect1.y+10>rect2.y+rect2.height ||\n        rect1.y+rect1.height-10<rect2.y\n    );\n}\n\n      // function isRectangleCollision(rect1,rect2){\n      //   return !(\n      //     rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n      //   );\n      // }\n\n      //Detect whether player makes contact with rectangle\nfunction rectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n        if(isRectangleCollision(playerRect, rect)){\n            gameOver();\n        }\n    })\n}\n      //\n      // function rectangleCollisionDetection(){\n      //   rectangles.forEach(rect =>{\n      //     if(isRectangleCollision(playerRect,rect)){\n      //       gameOver();\n      //     }\n      //   })\n      // }\n\n      //Get the blue rectangle to start moving\nfunction moveRectangle() {\n    rectangles.forEach(rect => {\n        rect.x += rect.dx;\n        rect.y += rect.dy;\n    })\n}\n\n      // function moveRectangle(){\n      //   rectangles.forEach(rect => {\n      //     rect.x += rect.dx;\n      //     rect.y += rect.dy;\n      //   })\n      // }\n\n      //Detect whether rectangles hit edge of canvas\nfunction borderRectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n        if(rect.x + rect.width > canvas.width || rect.x < 0){\n            rect.dx *= -1;\n        }\n        if(rect.y + rect.height > canvas.height || rect.y < 0){\n            rect.dy *= -1;\n        }\n    })\n}\n\n      // function boarderRectangleDetection(){\n      //   rectangles.forEach(rect=>{\n      //     if(rect.x + rect.width > canvas.width || rect.x < 0){\n      //       rect.dx *= -1;\n      //     }\n      //     if(rect.y + rect.height > canvas.height || rect.y < 0){\n      //       rect.dy *= -1;\n      //     }\n      //   })\n      // }\n\n      let numberOfSpeed = 0;\n\n\n\n      function configureRectSpeed() {\n          const speedUpGame = setInterval(() => {\n              numberOfSpeed++;\n              rectangles.forEach(rect => {\n                  rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n                  rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n              });\n              if(numberOfSpeed === 4){\n                  clearInterval(speedUpGame);\n              }\n          }, 10000)\n      }\n\n\n\n\n\n\n\n      //Returns true if mouse is in player rectangle\n      function isCursorInRect(x,y,rect){\n          return(x>rect.x && x<rect.x+rect.width && y>rect.y && y<rect.y+rect.height);\n      }\n\n      // // Returns true if collision\n      // function isCursorInRect(x,y,rect){\n      //   return((x > rect.x) && (x < rect.x + rect.width) && (y > rect.y) && (y < rect.y + rect.height));\n      // }\n\n\n\n      canvas.addEventListener(\"mousedown\", e => {\n          //Get X & Y coordinates in relation to canvas\n          const pos = {\n              x: e.clientX - canvas.offsetLeft,\n              y: e.clientY - canvas.offsetTop\n          }\n          //See if they clicked on the red square in particular\n          if(isCursorInRect(pos.x,pos.y,playerRect)){\n              //Start timer\n              if(!hasGameStarted){\n                  startDate = new Date();\n                  // configureRectSpeed();\n              }\n              setControlPlayer(true);\n              setHasGameStarted(true);\n              setStart(true);\n          }\n      })\n\n\n      // canvas.addEventListener('mousedown', on_canvas_down, false);\n      //\n      // function on_canvas_down(ev) {\n      //\n      //     // get x & y coordinates in relation to the canvas\n      //\n      //     var x = ev.clientX - this.offsetLeft;\n      //     var y = ev.clientY - this.offsetTop;\n      //\n      //     // See if they clicked on red square\n      //     if(isCursorInRect(x,y,playerRect)){\n      //       //\n      //       if(!hasGameStarted){\n      //         startDate = new Date();\n      //         configureRectSpeed();\n      //       }\n      //       setControlPlayer(true);\n      //       setHasGameStarted(true);\n      //\n      //     }\n      //\n      // }\n\n\n\n\n\n      canvas.addEventListener(\"mousemove\", e => {\n          if(controlPlayer && !hasGameOver){\n          //Get X & Y coordinates in relation to canvas\n          const pos = {\n              x: e.clientX - canvas.offsetLeft,\n              y: e.clientY - canvas.offsetTop\n          };\n          playerRect.x = pos.x - 25;\n          playerRect.y = pos.y - 25;\n          }\n      })\n\n\n      // canvas.addEventListener('mousemove', on_canvas_move, false);\n      //\n      //\n      //   function on_canvas_move(ev) {\n      //\n      //     if(controlPlayer && !hasGameOver){\n      //       // get x & y coordinates in relation to the canvas\n      //\n      //       var x = ev.clientX - this.offsetLeft;\n      //       var y = ev.clientY - this.offsetTop;\n      //\n      //       playerRect.x = x - 25;\n      //       playerRect.y = y - 25;\n      //     }\n      //     console.log(x,\"xxxxxxxxxx\")\n      // }\n\n\n\n\n      canvas.addEventListener(\"mouseup\", () => {\n          setControlPlayer(false);\n      })\n\n\n      // canvas.addEventListener('mouseup', on_canvas_up, false);\n      // function on_canvas_up(ev) {\n      //\n      //   setControlPlayer(false);\n      // }\n\n\n\n    }, [controlPlayer,hasGameStarted,hasGameOver,canvas,ctx]);\n\n\n\n\n\n//     const timer = window.setInterval( async() => {\n// }, 1000);\n\n\n\n\n  return (\n    <div id=\"top\">\n\n    {isGameOver && <div className=\"siteTitle\" style={{fontSize: '60px',color:\"#000000\"}}>You Scored Bad Luck</div>}\n    {isGameOver && <ReactAudioPlayer\n      src={ohno}\n      autoPlay\n    />}\n\n    {exit?(\n      <div>\n\n      </div>\n    ):(\n      <div>\n\n      <Redirect to=\"/JetswapXTreasureBlox1/:top\" {...props}/>\n\n      </div>\n    )}\n\n    {redirectLevel1More?(\n      <div>\n      <Redirect to=\"/PartnershipLevel1More/:top\" {...props}/>\n      </div>\n    ):(\n      <div>\n\n      </div>\n\n    )}\n\n\n\n<center>\n<div className=\"wording\">Fighter Pilot {timeleft}</div><br/>\n\n<canvas width=\"600\" height=\"600\" id=\"canvas\"> </canvas>\n\n</center>\n<br/>\n    </div>\n  );\n}\n\nexport default FighterScreen;\n"]},"metadata":{},"sourceType":"module"}