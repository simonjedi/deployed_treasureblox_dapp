{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect, useCallback } from \"react\"; // import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\n\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound'; //\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\n\nimport './style.css';\nimport ohno from './assets/troy_oh_no.mp4';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactAudioPlayer from 'react-audio-player'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FighterScreen = props => {\n  _s();\n\n  var [controlPlayer, setControlPlayer] = useState(false);\n  var [hasGameStarted, setHasGameStarted] = useState(false);\n  var [hasGameOver, setHasGameOver] = useState(false);\n  var [canvas, setCanvas] = useState(false);\n  var [ctx, setCtx] = useState(false);\n  var [exit, setExit] = useState(true);\n  var [isGameOver, setIsGameOver] = useState(false);\n  var [redirectLevel1More, setredirectLevel1More] = useState(false);\n  const [timeleft, setTimeleft] = useState(3);\n  const [start, setStart] = useState(false); // Prevent game from working whilst page reloads\n\n  let startDate = null;\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n  }; //Game Elements\n\n  let rectangles = [{\n    x: 75,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  }, {\n    x: 450,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  }, {\n    x: 265,\n    y: 450,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  } // {\n  //     x: 400,\n  //     y: 75,\n  //     dx: -5,\n  //     dy: 5.5,\n  //     width: 80,\n  //     height: 60,\n  //     color: \"#000099\"\n  // },\n  // {\n  //     x: 75,\n  //     y: 445,\n  //     dx: 5,\n  //     dy: -5,\n  //     width: 40,\n  //     height: 80,\n  //     color: \"#000099\"\n  // },\n  // {\n  //     x: 420,\n  //     y: 450,\n  //     dx: -5,\n  //     dy: -5,\n  //     width: 130,\n  //     height: 25,\n  //     color: \"#000099\"\n  // }\n  ];\n\n  const gameOverTime = () => {\n    setIsGameOver(true);\n    setExit(false);\n  };\n\n  useEffect(() => {\n    if (start) {\n      setTimeout(() => {\n        if (timeleft > 0) {\n          var timer = timeleft - 1;\n          setTimeleft(timer);\n        }\n\n        if (timeleft == 0) {\n          console.log(\"wiiiiiinnnnnnnn\");\n          setTimeout(handleMore, 500);\n          setStart(false);\n        }\n      }, 1000);\n    }\n  });\n\n  function handleMore() {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n    setredirectLevel1More(true);\n  }\n\n  useEffect(() => {\n    canvas = document.getElementById('canvas');\n    ctx = canvas.getContext('2d'); // Start the first frame request\n\n    window.requestAnimationFrame(gameLoop);\n\n    function gameLoop(timeStamp) {\n      draw(); // Keep requesting new frames\n\n      window.requestAnimationFrame(gameLoop);\n    }\n\n    function draw() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawBorder();\n      drawRect();\n\n      if (hasGameStarted) {\n        //Get the blue rectangle to start moving\n        moveRectangle();\n      } //Detect whether rectangles hit edge of canvas\n\n\n      borderRectangleCollisionDetection(); //Detect whether player makes contact with border\n\n      playerCollisionDetection(); //Detect whether player makes contact with rectangle\n\n      rectangleCollisionDetection();\n    }\n  }, [canvas, ctx]);\n  useEffect(() => {\n    canvas.addEventListener(\"mousedown\", e => {\n      //Get X & Y coordinates in relation to canvas\n      const pos = {\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop\n      }; //See if they clicked on the red square in particular\n\n      if (isCursorInRect(pos.x, pos.y, playerRect)) {\n        //Start timer\n        if (!hasGameStarted) {\n          startDate = new Date(); // configureRectSpeed();\n        }\n\n        setControlPlayer(true);\n        setHasGameStarted(true);\n        setStart(true);\n      }\n    }); // canvas.addEventListener('mousedown', on_canvas_down, false);\n    //\n    // function on_canvas_down(ev) {\n    //\n    //     // get x & y coordinates in relation to the canvas\n    //\n    //     var x = ev.clientX - this.offsetLeft;\n    //     var y = ev.clientY - this.offsetTop;\n    //\n    //     // See if they clicked on red square\n    //     if(isCursorInRect(x,y,playerRect)){\n    //       //\n    //       if(!hasGameStarted){\n    //         startDate = new Date();\n    //         configureRectSpeed();\n    //       }\n    //       setControlPlayer(true);\n    //       setHasGameStarted(true);\n    //\n    //     }\n    //\n    // }\n\n    canvas.addEventListener(\"mousemove\", e => {\n      if (controlPlayer && !hasGameOver) {\n        //Get X & Y coordinates in relation to canvas\n        const pos = {\n          x: e.clientX - canvas.offsetLeft,\n          y: e.clientY - canvas.offsetTop\n        };\n        playerRect.x = pos.x - 25;\n        playerRect.y = pos.y - 25;\n      }\n    }); // canvas.addEventListener('mousemove', on_canvas_move, false);\n    //\n    //\n    //   function on_canvas_move(ev) {\n    //\n    //     if(controlPlayer && !hasGameOver){\n    //       // get x & y coordinates in relation to the canvas\n    //\n    //       var x = ev.clientX - this.offsetLeft;\n    //       var y = ev.clientY - this.offsetTop;\n    //\n    //       playerRect.x = x - 25;\n    //       playerRect.y = y - 25;\n    //     }\n    //     console.log(x,\"xxxxxxxxxx\")\n    // }\n\n    canvas.addEventListener(\"mouseup\", () => {\n      setControlPlayer(false);\n    }); // canvas.addEventListener('mouseup', on_canvas_up, false);\n    // function on_canvas_up(ev) {\n    //\n    //   setControlPlayer(false);\n    // }\n    //     const timer = window.setInterval( async() => {\n    // }, 1000);\n  }, [controlPlayer, hasGameStarted, hasGameOver]);\n\n  function millisecondsToMinutes(millis) {\n    let minutes = Math.floor(millis / 60000);\n    let seconds = (millis % 60000 / 1000).toFixed(0);\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n  } // Global Varabales\n  //Render rectangles to canvas.\n\n\n  function drawRect() {\n    //Draw playerRect first\n    ctx.fillStyle = \"#990000\";\n    ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n    rectangles.forEach(rect => {\n      ctx.fillStyle = rect.color;\n      ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n    });\n  } //\n  // function update(){\n  //   ctx.clearRect(0,0,canvas.width,canvas.height);\n  //\n  //   drawBoarder();\n  //   drawRect();\n  //\n  //   if (hasGameStarted){\n  //     moveRectangle();\n  //   }\n  //\n  //   playerCollisionDetection();\n  //   rectangleCollisionDetection();\n  //   boarderRectangleDetection();\n  //   requestAnimationFrame(update);\n  // }\n  //\n  // // call update methord on initial document load\n  // update();\n  // Canvas black boarder\n  //Canvas Black Border\n\n\n  function drawBorder() {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.clearRect(25, 25, 550, 550);\n  } // function drawBoarder(){\n  //   ctx.fillStyle = \"black\";\n  //   ctx.fillRect(0,0,canvas.width,canvas.height);\n  //   ctx.clearRect(50,50,500,500);\n  // }\n\n\n  function millisecondsToMiutes(millis) {\n    let minutes = Math.floor(millis / 60000);\n    let seconds = Math.floor(millis % 60000 / 1000);\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n  }\n\n  function gameOver() {\n    gameOverTime(); // if(!hasGameOver){\n    //\n    //\n    //\n    //\n    //     let endDate = new Date();\n    //     let timeDiff = endDate - startDate;\n    //     if(timeDiff < 5000){\n    //       // gameOverTime()\n    //\n    //\n    //\n    //\n    //         // alert(`You survived ${timeDiff / 1000} seconds!`);\n    //     }else{\n    //       gameOverTime()\n    //         // let minutesSurvived = millisecondsToMinutes(timeDiff);\n    //         // alert(`You survived ${minutesSurvived} minutes. WOW!`);\n    //     }\n    // setHasGameOver(true);\n    // FighterScreen()\n    // }\n  } // Render rectangles to canvas\n  //Render rectangles to canvas.\n\n\n  function drawRect() {\n    //Draw playerRect first\n    ctx.fillStyle = \"#990000\";\n    ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n    rectangles.forEach(rect => {\n      ctx.fillStyle = rect.color;\n      ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n    });\n  } // function drawRect(){\n  //   // Draw player rect first\n  //   ctx.fillStyle = \"#901234\";\n  //   ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n  //\n  //   rectangles.forEach(rect => {\n  //     ctx.fillStyle = rect.color;\n  //     ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n  //   });\n  //\n  // }\n  //Detect whether player makes contact with border\n\n\n  function playerCollisionDetection() {\n    if (playerRect.x + playerRect.width > 575 || playerRect.x < 25 || playerRect.y + playerRect.height > 575 || playerRect.y < 25) {\n      gameOver();\n    }\n  } // collision\n  // function playerCollisionDetection(){\n  //   if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n  //   ){\n  //     gameOver();\n  //   }\n  // }\n  //Returns true if 2 rectangles are colliding\n\n\n  function isRectangleCollision(rect1, rect2) {\n    return !(rect1.x + 10 > rect2.x + rect2.width || rect1.x + rect1.width - 10 < rect2.x || rect1.y + 10 > rect2.y + rect2.height || rect1.y + rect1.height - 10 < rect2.y);\n  } // function isRectangleCollision(rect1,rect2){\n  //   return !(\n  //     rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n  //   );\n  // }\n  //Detect whether player makes contact with rectangle\n\n\n  function rectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n      if (isRectangleCollision(playerRect, rect)) {\n        gameOver();\n      }\n    });\n  } //\n  // function rectangleCollisionDetection(){\n  //   rectangles.forEach(rect =>{\n  //     if(isRectangleCollision(playerRect,rect)){\n  //       gameOver();\n  //     }\n  //   })\n  // }\n  //Get the blue rectangle to start moving\n\n\n  function moveRectangle() {\n    rectangles.forEach(rect => {\n      rect.x += rect.dx;\n      rect.y += rect.dy;\n    });\n  } // function moveRectangle(){\n  //   rectangles.forEach(rect => {\n  //     rect.x += rect.dx;\n  //     rect.y += rect.dy;\n  //   })\n  // }\n  //Detect whether rectangles hit edge of canvas\n\n\n  function borderRectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n      if (rect.x + rect.width > canvas.width || rect.x < 0) {\n        rect.dx *= -1;\n      }\n\n      if (rect.y + rect.height > canvas.height || rect.y < 0) {\n        rect.dy *= -1;\n      }\n    });\n  } // function boarderRectangleDetection(){\n  //   rectangles.forEach(rect=>{\n  //     if(rect.x + rect.width > canvas.width || rect.x < 0){\n  //       rect.dx *= -1;\n  //     }\n  //     if(rect.y + rect.height > canvas.height || rect.y < 0){\n  //       rect.dy *= -1;\n  //     }\n  //   })\n  // }\n\n\n  let numberOfSpeed = 0;\n\n  function configureRectSpeed() {\n    const speedUpGame = setInterval(() => {\n      numberOfSpeed++;\n      rectangles.forEach(rect => {\n        rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n        rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n      });\n\n      if (numberOfSpeed === 4) {\n        clearInterval(speedUpGame);\n      }\n    }, 10000);\n  } //Returns true if mouse is in player rectangle\n\n\n  function isCursorInRect(x, y, rect) {\n    return x > rect.x && x < rect.x + rect.width && y > rect.y && y < rect.y + rect.height;\n  } // // Returns true if collision\n  // function isCursorInRect(x,y,rect){\n  //   return((x > rect.x) && (x < rect.x + rect.width) && (y > rect.y) && (y < rect.y + rect.height));\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"top\",\n    children: [isGameOver && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"siteTitle\",\n      style: {\n        fontSize: '60px',\n        color: \"#000000\"\n      },\n      children: \"You Scored Bad Luck\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 20\n    }, this), isGameOver && /*#__PURE__*/_jsxDEV(ReactAudioPlayer, {\n      src: ohno,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 20\n    }, this), exit ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/JetswapXTreasureBlox1/:top\",\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 577,\n      columnNumber: 7\n    }, this), redirectLevel1More ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/PartnershipLevel1More/:top\",\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 585,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 589,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"wording\",\n        children: [\"Fighter Pilot \", timeleft]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 56\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"600\",\n        height: \"600\",\n        id: \"canvas\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 603,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 564,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FighterScreen, \"/duZV94+gtpsKAR5lc8BjMXK4x0=\");\n\n_c = FighterScreen;\nexport default FighterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FighterScreen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js"],"names":["useState","useRef","useEffect","useCallback","Button","Container","Nav","Navbar","NavDropdown","useSound","ohno","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactAudioPlayer","FighterScreen","props","controlPlayer","setControlPlayer","hasGameStarted","setHasGameStarted","hasGameOver","setHasGameOver","canvas","setCanvas","ctx","setCtx","exit","setExit","isGameOver","setIsGameOver","redirectLevel1More","setredirectLevel1More","timeleft","setTimeleft","start","setStart","startDate","playerRect","x","y","width","height","rectangles","dx","dy","color","gameOverTime","setTimeout","timer","console","log","handleMore","window","scrollTo","top","behavior","document","getElementById","getContext","requestAnimationFrame","gameLoop","timeStamp","draw","clearRect","drawBorder","drawRect","moveRectangle","borderRectangleCollisionDetection","playerCollisionDetection","rectangleCollisionDetection","addEventListener","e","pos","clientX","offsetLeft","clientY","offsetTop","isCursorInRect","Date","millisecondsToMinutes","millis","minutes","Math","floor","seconds","toFixed","fillStyle","fillRect","forEach","rect","millisecondsToMiutes","gameOver","isRectangleCollision","rect1","rect2","numberOfSpeed","configureRectSpeed","speedUpGame","setInterval","clearInterval","fontSize"],"mappings":"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","sourcesContent":["\nimport { useState, useRef, useEffect, useCallback } from \"react\";\n\n// import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\nimport { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound';\n//\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\nimport './style.css';\n\nimport ohno from './assets/troy_oh_no.mp4';\n\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n// Hook\n\n\n\n\nconst FighterScreen = (props) =>{\n\n\n  var [controlPlayer, setControlPlayer]= useState(false)\n  var [hasGameStarted, setHasGameStarted]= useState(false)\n  var [hasGameOver, setHasGameOver]= useState(false)\n  var [canvas, setCanvas]= useState(false)\n  var [ctx, setCtx]= useState(false)\n  var [exit,setExit] = useState(true);\n  var [isGameOver, setIsGameOver]= useState(false)\n  var [redirectLevel1More,setredirectLevel1More] = useState(false);\n  const [timeleft,setTimeleft] = useState(3)\n  const [start,setStart] = useState(false)\n\n\n\n\n  // Prevent game from working whilst page reloads\n  let startDate = null;\n\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n}\n//Game Elements\nlet rectangles = [\n    {\n        x: 75,\n        y: 75,\n        dx: 5,\n        dy: 4,\n        width: 75,\n        height: 75,\n        color: \"#000099\"\n    },\n    {\n        x: 450,\n        y: 75,\n        dx: 5,\n        dy: 4,\n        width: 75,\n        height: 75,\n        color: \"#000099\"\n    },\n    {\n        x: 265,\n        y: 450,\n        dx: 5,\n        dy: 4,\n        width: 75,\n        height: 75,\n        color: \"#000099\"\n    },\n    // {\n    //     x: 400,\n    //     y: 75,\n    //     dx: -5,\n    //     dy: 5.5,\n    //     width: 80,\n    //     height: 60,\n    //     color: \"#000099\"\n    // },\n    // {\n    //     x: 75,\n    //     y: 445,\n    //     dx: 5,\n    //     dy: -5,\n    //     width: 40,\n    //     height: 80,\n    //     color: \"#000099\"\n    // },\n    // {\n    //     x: 420,\n    //     y: 450,\n    //     dx: -5,\n    //     dy: -5,\n    //     width: 130,\n    //     height: 25,\n    //     color: \"#000099\"\n    // }\n]\n\n\n      const gameOverTime = () => {\n\n        setIsGameOver(true);\n        setExit(false);\n\n      }\n\n      useEffect(() => {\n          if (start){\n            setTimeout(() => {\n\n\n              if (timeleft > 0) {\n                var timer = timeleft -1\n                setTimeleft(timer)\n              }\n\n\n              if (timeleft == 0){\n\n                console.log(\"wiiiiiinnnnnnnn\")\n\n                setTimeout(handleMore,500);\n                setStart(false);\n\n              }\n            }, 1000)\n          }\n      })\n\n\n      function handleMore()  {\n        window.scrollTo({top: 0,behavior: 'smooth'})\n        setredirectLevel1More(true)\n\n      }\n\n\n\n      useEffect(() => {\n\n        canvas = document.getElementById('canvas');\n        ctx = canvas.getContext('2d');\n\n        // Start the first frame request\n        window.requestAnimationFrame(gameLoop);\n\n\n        function gameLoop(timeStamp){\n            draw();\n\n            // Keep requesting new frames\n            window.requestAnimationFrame(gameLoop);\n        }\n\n        function draw(){\n          ctx.clearRect(0,0,canvas.width,canvas.height);\n          drawBorder();\n          drawRect();\n\n          if(hasGameStarted){\n              //Get the blue rectangle to start moving\n              moveRectangle();\n          }\n          //Detect whether rectangles hit edge of canvas\n          borderRectangleCollisionDetection();\n          //Detect whether player makes contact with border\n          playerCollisionDetection();\n          //Detect whether player makes contact with rectangle\n          rectangleCollisionDetection();\n\n        }\n\n      }, [canvas,ctx]);\n\n\n\n      useEffect(()=>{\n\n        canvas.addEventListener(\"mousedown\", e => {\n            //Get X & Y coordinates in relation to canvas\n            const pos = {\n                x: e.clientX - canvas.offsetLeft,\n                y: e.clientY - canvas.offsetTop\n            }\n            //See if they clicked on the red square in particular\n            if(isCursorInRect(pos.x,pos.y,playerRect)){\n                //Start timer\n                if(!hasGameStarted){\n                    startDate = new Date();\n                    // configureRectSpeed();\n                }\n                setControlPlayer(true);\n                setHasGameStarted(true);\n                setStart(true);\n            }\n        })\n\n\n        // canvas.addEventListener('mousedown', on_canvas_down, false);\n        //\n        // function on_canvas_down(ev) {\n        //\n        //     // get x & y coordinates in relation to the canvas\n        //\n        //     var x = ev.clientX - this.offsetLeft;\n        //     var y = ev.clientY - this.offsetTop;\n        //\n        //     // See if they clicked on red square\n        //     if(isCursorInRect(x,y,playerRect)){\n        //       //\n        //       if(!hasGameStarted){\n        //         startDate = new Date();\n        //         configureRectSpeed();\n        //       }\n        //       setControlPlayer(true);\n        //       setHasGameStarted(true);\n        //\n        //     }\n        //\n        // }\n\n\n\n\n\n        canvas.addEventListener(\"mousemove\", e => {\n            if(controlPlayer && !hasGameOver){\n            //Get X & Y coordinates in relation to canvas\n            const pos = {\n                x: e.clientX - canvas.offsetLeft,\n                y: e.clientY - canvas.offsetTop\n            };\n            playerRect.x = pos.x - 25;\n            playerRect.y = pos.y - 25;\n            }\n        })\n\n\n        // canvas.addEventListener('mousemove', on_canvas_move, false);\n        //\n        //\n        //   function on_canvas_move(ev) {\n        //\n        //     if(controlPlayer && !hasGameOver){\n        //       // get x & y coordinates in relation to the canvas\n        //\n        //       var x = ev.clientX - this.offsetLeft;\n        //       var y = ev.clientY - this.offsetTop;\n        //\n        //       playerRect.x = x - 25;\n        //       playerRect.y = y - 25;\n        //     }\n        //     console.log(x,\"xxxxxxxxxx\")\n        // }\n\n\n\n\n        canvas.addEventListener(\"mouseup\", () => {\n            setControlPlayer(false);\n        })\n\n        // canvas.addEventListener('mouseup', on_canvas_up, false);\n        // function on_canvas_up(ev) {\n        //\n        //   setControlPlayer(false);\n        // }\n\n\n\n\n\n\n\n\n  //     const timer = window.setInterval( async() => {\n  // }, 1000);\n\n\n\n      },[controlPlayer,hasGameStarted,hasGameOver])\n\n\n\n      function millisecondsToMinutes(millis){\n          let minutes = Math.floor(millis / 60000);\n          let seconds = ((millis % 60000) / 1000).toFixed(0);\n          return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n      }\n\n      // Global Varabales\n\n\n\n      //Render rectangles to canvas.\n      function drawRect() {\n          //Draw playerRect first\n          ctx.fillStyle = \"#990000\";\n          ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n          rectangles.forEach(rect => {\n              ctx.fillStyle = rect.color;\n              ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n          })\n      }\n\n      //\n      // function update(){\n      //   ctx.clearRect(0,0,canvas.width,canvas.height);\n      //\n      //   drawBoarder();\n      //   drawRect();\n      //\n      //   if (hasGameStarted){\n      //     moveRectangle();\n      //   }\n      //\n      //   playerCollisionDetection();\n      //   rectangleCollisionDetection();\n      //   boarderRectangleDetection();\n      //   requestAnimationFrame(update);\n      // }\n      //\n      // // call update methord on initial document load\n      // update();\n\n\n\n\n\n      // Canvas black boarder\n\n      //Canvas Black Border\nfunction drawBorder() {\n    ctx.fillStyle = 'black';\n    ctx.fillRect(0,0,canvas.width,canvas.height);\n    ctx.clearRect(25,25,550,550);\n}\n\n      // function drawBoarder(){\n      //   ctx.fillStyle = \"black\";\n      //   ctx.fillRect(0,0,canvas.width,canvas.height);\n      //   ctx.clearRect(50,50,500,500);\n      // }\n\n\n      function millisecondsToMiutes(millis){\n        let minutes = Math.floor(millis/60000);\n        let seconds = Math.floor((millis % 60000)/1000);\n        return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n\n      }\n\n\n\n\n\n      function gameOver() {\n\n        gameOverTime()\n\n\n          // if(!hasGameOver){\n          //\n          //\n          //\n          //\n          //     let endDate = new Date();\n          //     let timeDiff = endDate - startDate;\n          //     if(timeDiff < 5000){\n          //       // gameOverTime()\n          //\n          //\n          //\n          //\n          //         // alert(`You survived ${timeDiff / 1000} seconds!`);\n          //     }else{\n          //       gameOverTime()\n          //         // let minutesSurvived = millisecondsToMinutes(timeDiff);\n          //         // alert(`You survived ${minutesSurvived} minutes. WOW!`);\n          //     }\n\n              // setHasGameOver(true);\n\n              // FighterScreen()\n\n\n          // }\n      }\n\n\n      // Render rectangles to canvas\n\n      //Render rectangles to canvas.\nfunction drawRect() {\n    //Draw playerRect first\n    ctx.fillStyle = \"#990000\";\n    ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n    rectangles.forEach(rect => {\n        ctx.fillStyle = rect.color;\n        ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n    })\n}\n\n      // function drawRect(){\n      //   // Draw player rect first\n      //   ctx.fillStyle = \"#901234\";\n      //   ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n      //\n      //   rectangles.forEach(rect => {\n      //     ctx.fillStyle = rect.color;\n      //     ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n      //   });\n      //\n      // }\n\n      //Detect whether player makes contact with border\nfunction playerCollisionDetection() {\n    if(\n        playerRect.x + playerRect.width > 575 ||\n        playerRect.x < 25 ||\n        playerRect.y + playerRect.height > 575 ||\n        playerRect.y < 25\n    ){\n        gameOver();\n    }\n}\n\n      // collision\n      // function playerCollisionDetection(){\n      //   if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n      //   ){\n      //     gameOver();\n      //   }\n      // }\n\n      //Returns true if 2 rectangles are colliding\nfunction isRectangleCollision(rect1, rect2){\n    return !(\n        rect1.x+10>rect2.x+rect2.width ||\n        rect1.x+rect1.width-10<rect2.x ||\n        rect1.y+10>rect2.y+rect2.height ||\n        rect1.y+rect1.height-10<rect2.y\n    );\n}\n\n      // function isRectangleCollision(rect1,rect2){\n      //   return !(\n      //     rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n      //   );\n      // }\n\n      //Detect whether player makes contact with rectangle\nfunction rectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n        if(isRectangleCollision(playerRect, rect)){\n            gameOver();\n        }\n    })\n}\n      //\n      // function rectangleCollisionDetection(){\n      //   rectangles.forEach(rect =>{\n      //     if(isRectangleCollision(playerRect,rect)){\n      //       gameOver();\n      //     }\n      //   })\n      // }\n\n      //Get the blue rectangle to start moving\nfunction moveRectangle() {\n    rectangles.forEach(rect => {\n        rect.x += rect.dx;\n        rect.y += rect.dy;\n    })\n}\n\n      // function moveRectangle(){\n      //   rectangles.forEach(rect => {\n      //     rect.x += rect.dx;\n      //     rect.y += rect.dy;\n      //   })\n      // }\n\n      //Detect whether rectangles hit edge of canvas\nfunction borderRectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n        if(rect.x + rect.width > canvas.width || rect.x < 0){\n            rect.dx *= -1;\n        }\n        if(rect.y + rect.height > canvas.height || rect.y < 0){\n            rect.dy *= -1;\n        }\n    })\n}\n\n      // function boarderRectangleDetection(){\n      //   rectangles.forEach(rect=>{\n      //     if(rect.x + rect.width > canvas.width || rect.x < 0){\n      //       rect.dx *= -1;\n      //     }\n      //     if(rect.y + rect.height > canvas.height || rect.y < 0){\n      //       rect.dy *= -1;\n      //     }\n      //   })\n      // }\n\n      let numberOfSpeed = 0;\n\n\n\n      function configureRectSpeed() {\n          const speedUpGame = setInterval(() => {\n              numberOfSpeed++;\n              rectangles.forEach(rect => {\n                  rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n                  rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n              });\n              if(numberOfSpeed === 4){\n                  clearInterval(speedUpGame);\n              }\n          }, 10000)\n      }\n\n\n\n\n\n\n\n      //Returns true if mouse is in player rectangle\n      function isCursorInRect(x,y,rect){\n          return(x>rect.x && x<rect.x+rect.width && y>rect.y && y<rect.y+rect.height);\n      }\n\n      // // Returns true if collision\n      // function isCursorInRect(x,y,rect){\n      //   return((x > rect.x) && (x < rect.x + rect.width) && (y > rect.y) && (y < rect.y + rect.height));\n      // }\n\n\n\n\n\n\n  return (\n    <div id=\"top\">\n\n    {isGameOver && <div className=\"siteTitle\" style={{fontSize: '60px',color:\"#000000\"}}>You Scored Bad Luck</div>}\n    {isGameOver && <ReactAudioPlayer\n      src={ohno}\n      autoPlay\n    />}\n\n    {exit?(\n      <div>\n\n      </div>\n    ):(\n      <div>\n\n      <Redirect to=\"/JetswapXTreasureBlox1/:top\" {...props}/>\n\n      </div>\n    )}\n\n    {redirectLevel1More?(\n      <div>\n      <Redirect to=\"/PartnershipLevel1More/:top\" {...props}/>\n      </div>\n    ):(\n      <div>\n\n      </div>\n\n    )}\n\n\n\n<center>\n<div className=\"wording\">Fighter Pilot {timeleft}</div><br/>\n\n<canvas width=\"600\" height=\"600\" id=\"canvas\"> </canvas>\n\n</center>\n<br/>\n    </div>\n  );\n}\n\nexport default FighterScreen;\n"]},"metadata":{},"sourceType":"module"}