'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatLogQuery = exports.formatOptions = exports.formatRange = exports.fromETHBlockNumberOrHash = exports.fromETHBlockNumber = void 0;
const utils = require("./");
exports.fromETHBlockNumber = function (blockNumber) {
    if (typeof blockNumber === 'number') {
        return blockNumber;
    }
    else if (typeof blockNumber === 'string') {
        if (blockNumber === 'earliest') {
            return 0;
        }
        else if (blockNumber === 'latest' || blockNumber === 'pending') {
            return 'best';
        }
        else {
            const num = utils.toInteger(blockNumber);
            return num || num === 0 ? num : 'best';
        }
    }
    else {
        return 'best';
    }
};
exports.fromETHBlockNumberOrHash = function (blockRevision) {
    if (/^(-0x|0x)?[0-9a-fA-F]{64}$/i.test(blockRevision)) {
        return blockRevision;
    }
    else {
        return exports.fromETHBlockNumber(blockRevision);
    }
};
exports.formatRange = function (range) {
    const ret = {};
    if (range.unit !== 'block' && range.unit !== 'time') {
        return null;
    }
    else {
        ret.unit = range.unit;
    }
    if (range.hasOwnProperty('from')) {
        const temp = exports.fromETHBlockNumber(range.from);
        if (temp !== 'best') {
            ret.from = temp;
        }
        else {
            ret.from = 0;
        }
    }
    else {
        ret.from = 0;
    }
    if (range.hasOwnProperty('to')) {
        const temp = utils.fromETHBlockNumber(range.to);
        if (temp !== 'best') {
            ret.to = temp;
        }
        else {
            ret.to = Number.MAX_SAFE_INTEGER;
        }
    }
    else {
        ret.to = Number.MAX_SAFE_INTEGER;
    }
    return ret;
};
exports.formatOptions = function (options) {
    const ret = {};
    if (options.hasOwnProperty('limit')) {
        const temp = utils.toInteger(options.limit);
        if (temp) {
            ret.limit = temp;
        }
    }
    if (options.hasOwnProperty('offset')) {
        const temp = utils.toInteger(options.offset);
        if (temp) {
            ret.offset = temp;
        }
    }
    if (ret.hasOwnProperty('limit') || ret.hasOwnProperty('offset')) {
        return ret;
    }
    else {
        return null;
    }
};
exports.formatLogQuery = function (params) {
    const body = {
        topicSets: [],
    };
    if (params.range) {
        const ret = exports.formatRange(params.range);
        if (ret) {
            body.range = ret;
        }
    }
    if (params.options) {
        const ret = exports.formatOptions(params.options);
        if (ret) {
            body.options = ret;
        }
    }
    if (!body.range && (params.hasOwnProperty('fromBlock') || params.hasOwnProperty('toBlock'))) {
        body.range = {
            unit: 'block',
        };
        if (params.hasOwnProperty('fromBlock')) {
            body.range.from = params.fromBlock;
        }
        if (params.hasOwnProperty('toBlock')) {
            body.range.to = params.toBlock;
        }
        body.range = exports.formatRange(body.range);
    }
    body.topicSets = [];
    const topics = [];
    if (params.topics && params.topics.length) {
        for (let i = 0; i < params.topics.length; i++) {
            if (typeof params.topics[i] === 'string') {
                topics.push({
                    name: 'topic' + i,
                    array: [params.topics[i]],
                });
            }
            else if (utils.isArray(params.topics[i]) && params.topics[i].length) {
                topics.push({
                    name: 'topic' + i,
                    array: params.topics[i],
                });
            }
        }
    }
    const outputTopic = function (inputTopics, index, receiver, current) {
        if (index === inputTopics.length) {
            const o = {};
            Object.assign(o, current);
            receiver.push(o);
            return;
        }
        for (const item of inputTopics[index].array) {
            current[inputTopics[index].name] = item;
            outputTopic(inputTopics, index + 1, receiver, current);
        }
    };
    if (topics.length) {
        outputTopic(topics, 0, body.topicSets, {});
    }
    return body;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLWZvcm1hdHRlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvb3B0aW9uLWZvcm1hdHRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFBOzs7QUFHWiw0QkFBMkI7QUFFZCxRQUFBLGtCQUFrQixHQUFHLFVBQVMsV0FBMkI7SUFDbEUsSUFBSSxPQUFPLFdBQVcsS0FBSyxRQUFRLEVBQUU7UUFDakMsT0FBTyxXQUFXLENBQUE7S0FDckI7U0FBTSxJQUFJLE9BQU8sV0FBVyxLQUFLLFFBQVEsRUFBRTtRQUN4QyxJQUFJLFdBQVcsS0FBSyxVQUFVLEVBQUU7WUFDNUIsT0FBTyxDQUFDLENBQUE7U0FDWDthQUFNLElBQUksV0FBVyxLQUFLLFFBQVEsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFO1lBQzlELE9BQU8sTUFBTSxDQUFBO1NBQ2hCO2FBQU07WUFDSCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBQ3hDLE9BQU8sR0FBRyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFBO1NBQ3pDO0tBQ0o7U0FBTTtRQUNILE9BQU8sTUFBTSxDQUFBO0tBQ2hCO0FBQ0wsQ0FBQyxDQUFBO0FBRVksUUFBQSx3QkFBd0IsR0FBRyxVQUFTLGFBQWtCO0lBQy9ELElBQUksNkJBQTZCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQ25ELE9BQU8sYUFBYSxDQUFBO0tBQ3ZCO1NBQU07UUFDSCxPQUFPLDBCQUFrQixDQUFDLGFBQWEsQ0FBQyxDQUFBO0tBQzNDO0FBQ0wsQ0FBQyxDQUFBO0FBRVksUUFBQSxXQUFXLEdBQUcsVUFBUyxLQUFVO0lBQzFDLE1BQU0sR0FBRyxHQUFrQixFQUFFLENBQUE7SUFDN0IsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLE9BQU8sSUFBSSxL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