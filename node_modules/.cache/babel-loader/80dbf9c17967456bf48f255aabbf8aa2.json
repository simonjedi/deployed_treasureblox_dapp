{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/Connection.js\",\n    _s = $RefreshSig$();\n\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport { useWallet, UseWalletProvider } from 'use-wallet';\nimport { Button, ButtonGroup, Col, Toast, Modal } from 'react-bootstrap';\nimport MyNav from \"./MyNav\";\nimport App from \"./App\";\nimport \"./App.css\";\nimport getWeb3 from \"./getWeb3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst setHidden = () => {\n  console.log(document.body.style.overflow);\n\n  if (document.body.style.overflow !== \"hidden\") {\n    document.body.style.overflow = \"hidden\";\n  } else {\n    document.body.style.overflow = \"scroll\";\n  }\n};\n\nconst Connection = props => {\n  _s();\n\n  const [show, setShow] = useState(false);\n\n  const handleClose = () => setShow(false);\n\n  const handleShow = () => setShow(true);\n\n  const wallet = useWallet();\n  const [firstPartAddress, setFirstPartAddress] = useState('Connect Wallet');\n  const [secondPartAddress, setSecondPartAddress] = useState('');\n  useEffect(() => {\n    const init = async () => {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const usersAccount = accounts[0];\n      const stringOfUsersAccount = new String(usersAccount);\n      console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n\n      setFirstPartAddress(stringOfUsersAccount.slice(0, 5));\n      setSecondPartAddress('____' + stringOfUsersAccount.slice(37, 42));\n    };\n\n    init();\n  });\n\n  const connectWallet = async e => {\n    await wallet.connect();\n    const usersAccount = props.accounts;\n    const stringOfUsersAccount = new String(usersAccount);\n    console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n\n    setFirstPartAddress('Welcome');\n    setSecondPartAddress('');\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ButtonGroup, {\n      className: \"mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        children: \"Network\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: connectWallet,\n        id: \"wallet-button\",\n        className: \"customWalletButton \",\n        children: [firstPartAddress, secondPartAddress]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"primary\",\n      onClick: (handleShow, setHidden),\n      children: \"Launch demo modal\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      className: \"Networkcustom modal-dialog\",\n      \"data-backdrop\": \"false\",\n      show: show,\n      onHide: handleClose,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Choose Network\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: \"Woohoo, you're reading this text in a modal!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: handleClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: handleClose,\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}; // Wrap everything in <UseWalletProvider />\n\n\n_s(Connection, \"aHDWbgFdMVhDtcE80KuDtbShWxE=\", false, function () {\n  return [useWallet];\n});\n\n_c = Connection;\nexport default (props => /*#__PURE__*/_jsxDEV(UseWalletProvider, {\n  chainId: 1337,\n  connectors: {\n    // This is how connectors get configured\n    provided: {\n      provider: window.cleanEthereum\n    }\n  },\n  children: /*#__PURE__*/_jsxDEV(Connection, {\n    accounts: props.accounts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 103,\n  columnNumber: 3\n}, this));\n\nvar _c;\n\n$RefreshReg$(_c, \"Connection\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/Connection.js"],"names":["React","useState","useEffect","useWallet","UseWalletProvider","Button","ButtonGroup","Col","Toast","Modal","MyNav","App","getWeb3","setHidden","console","log","document","body","style","overflow","Connection","props","show","setShow","handleClose","handleShow","wallet","firstPartAddress","setFirstPartAddress","secondPartAddress","setSecondPartAddress","init","web3","accounts","eth","getAccounts","usersAccount","stringOfUsersAccount","String","slice","connectWallet","e","connect","window","location","reload","provided","provider","cleanEthereum"],"mappings":"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","sourcesContent":["// App.js\n\nimport React, {useState, useEffect} from 'react'\nimport { useWallet, UseWalletProvider } from 'use-wallet'\nimport { Button,ButtonGroup,Col,Toast,Modal } from 'react-bootstrap';\n\nimport MyNav from \"./MyNav\";\nimport App from \"./App\";\nimport \"./App.css\";\n\nimport getWeb3 from \"./getWeb3\"\n\nconst setHidden = () => {\n    console.log(document.body.style.overflow);\n    if (document.body.style.overflow !== \"hidden\") {\n      document.body.style.overflow = \"hidden\";\n    } else {\n      document.body.style.overflow = \"scroll\";\n    }\n  };\n\nconst Connection = (props) =>  {\n\n\n  const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n\n\n  const wallet = useWallet()\n  const [firstPartAddress, setFirstPartAddress] = useState('Connect Wallet');\n  const [secondPartAddress, setSecondPartAddress] = useState('');\n\n  useEffect(() => {\n\n     const init = async() => {\n       const web3 = await getWeb3();\n       const accounts = await web3.eth.getAccounts();\n       const usersAccount = accounts[0];\n       const stringOfUsersAccount = new String(usersAccount)\n       console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n       setFirstPartAddress(stringOfUsersAccount.slice(0, 5));\n       setSecondPartAddress('____'+stringOfUsersAccount.slice(37, 42));\n\n     }\n     init()\n   });\n\n  const connectWallet = async(e) => {\n    await wallet.connect()\n    const usersAccount = props.accounts;\n    const stringOfUsersAccount = new String(usersAccount)\n    console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n    setFirstPartAddress('Welcome');\n    setSecondPartAddress('');\n    window.location.reload();\n\n  }\n\n  return(\n    <div>\n\n      <ButtonGroup className=\"mb-2\">\n          <Button >Network</Button>\n\n\n          <Button onClick={connectWallet} id=\"wallet-button\" className=\"customWalletButton \" >{firstPartAddress}{secondPartAddress}</Button>\n\n        </ButtonGroup>\n\n        <Button variant=\"primary\" onClick={handleShow,setHidden}>\n        Launch demo modal\n      </Button>\n\n      <Modal className=\"Networkcustom modal-dialog\" data-backdrop=\"false\" show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Choose Network</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>Woohoo, you're reading this text in a modal!</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Save Changes\n          </Button>\n        </Modal.Footer>\n      </Modal>\n\n\n\n\n        <br />\n\n    </div>\n  )\n}\n\n// Wrap everything in <UseWalletProvider />\nexport default (props) => (\n  <UseWalletProvider\n\n    chainId={1337}\n    connectors={{\n      // This is how connectors get configured\n      provided: {provider: window.cleanEthereum},\n    }}>\n\n    <Connection accounts={props.accounts}/>\n\n  </UseWalletProvider>\n)\n"]},"metadata":{},"sourceType":"module"}