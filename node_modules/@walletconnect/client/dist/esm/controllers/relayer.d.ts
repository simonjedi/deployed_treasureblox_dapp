/// <reference types="node" />
import { EventEmitter } from "events";
import { Logger } from "pino";
import { RelayerTypes, IRelayer, IClient, ISubscription, IJsonRpcHistory } from "@walletconnect/types";
import { IJsonRpcProvider, JsonRpcPayload } from "@walletconnect/jsonrpc-utils";
export declare class Relayer extends IRelayer {
    client: IClient;
    logger: Logger;
    events: EventEmitter;
    subscriptions: ISubscription;
    history: IJsonRpcHistory;
    provider: IJsonRpcProvider;
    name: string;
    constructor(client: IClient, logger: Logger, provider?: string | IJsonRpcProvider);
    get context(): string;
    get connected(): boolean;
    get connecting(): boolean;
    init(): Promise<void>;
    publish(topic: string, payload: JsonRpcPayload, opts?: RelayerTypes.PublishOptions): Promise<void>;
    subscribe(topic: string, expiry: number, opts?: RelayerTypes.SubscribeOptions): Promise<string>;
    unsubscribe(topic: string, id: string, opts?: RelayerTypes.UnsubscribeOptions): Promise<void>;
    unsubscribeByTopic(topic: string, opts?: RelayerTypes.UnsubscribeOptions): Promise<void>;
    on(event: string, listener: any): void;
    once(event: string, listener: any): void;
    off(event: string, listener: any): void;
    removeListener(event: string, listener: any): void;
    private getRelayProtocol;
    private rpcPublish;
    private rpcSubscribe;
    private rpcUnsubscribe;
    private onUnsubscribe;
    private recordPayloadEvent;
    private shouldIgnorePayloadEvent;
    private onPayload;
    private acknowledgePayload;
    private resubscribe;
    private onConnect;
    private onDisconnect;
    private setProvider;
    private registerEventListeners;
}
//# sourceMappingURL=relayer.d.ts.map