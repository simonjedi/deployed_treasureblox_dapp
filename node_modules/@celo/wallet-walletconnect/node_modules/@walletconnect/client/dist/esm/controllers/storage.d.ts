import { Logger } from "pino";
import { IKeyValueStorage } from "keyvaluestorage";
import { IClient, IStorage, JsonRpcRecord, StorageKeyMap, SubscriptionParams } from "@walletconnect/types";
export declare class Storage implements IStorage {
    client: IClient;
    logger: Logger;
    keyValueStorage: IKeyValueStorage;
    name: string;
    version: string;
    keyMap: StorageKeyMap;
    constructor(client: IClient, logger: Logger, keyValueStorage: IKeyValueStorage);
    get context(): string;
    get prefix(): string;
    setKeyChain(context: string, keychain: Map<string, string>): Promise<void>;
    getKeyChain(context: string): Promise<Map<string, string> | undefined>;
    setSequenceState<Sequence = any>(context: string, sequences: Sequence[]): Promise<void>;
    getSequenceState<Sequence = any>(context: string): Promise<Sequence[] | undefined>;
    setJsonRpcRecords(context: string, records: JsonRpcRecord[]): Promise<void>;
    getJsonRpcRecords(context: string): Promise<JsonRpcRecord[] | undefined>;
    setRelayerSubscriptions(context: string, subscriptions: SubscriptionParams[]): Promise<void>;
    getRelayerSubscriptions(context: string): Promise<SubscriptionParams[] | undefined>;
    getStorageKey(context: string): string;
    getStorageKeyName(context: string): string;
    isValidStorageKeyName(name: string): boolean;
}
//# sourceMappingURL=storage.d.ts.map