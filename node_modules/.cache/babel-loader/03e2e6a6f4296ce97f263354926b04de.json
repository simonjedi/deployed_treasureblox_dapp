{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect, useCallback } from \"react\"; // import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\n\nimport { Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound'; //\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\n\nimport './style.css';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport ReactAudioPlayer from 'react-audio-player'; // Hook\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst FighterScreen = props => {\n  _s();\n\n  const [controlPlayer, setControlPlayer] = useState(false);\n  const [hasGameStarted, setHasGameStarted] = useState(false);\n  const [hasGameOver, setHasGameOver] = useState(false); // Prevent game from working whilst page reloads\n\n  let startDate = null;\n  let playerRect = {\n    x: 275,\n    y: 275,\n    width: 50,\n    height: 50\n  }; // Game Elements\n\n  let rectangles = [{\n    x: 75,\n    y: 75,\n    dx: 5,\n    dy: 4,\n    width: 75,\n    height: 75,\n    color: \"#000099\"\n  }, {\n    x: 400,\n    y: 75,\n    dx: -5,\n    dy: 5.5,\n    width: 80,\n    height: 60,\n    color: \"#000099\"\n  }, {\n    x: 75,\n    y: 445,\n    dx: 5,\n    dy: -5,\n    width: 40,\n    height: 80,\n    color: \"#000099\"\n  }, {\n    x: 420,\n    y: 450,\n    dx: -5,\n    dy: -5,\n    width: 130,\n    height: 25,\n    color: \"#000099\"\n  }];\n\n  function millisecondsToMiutes(millis) {\n    let minutes = Math.floor(millis / 60000);\n    let seconds = Math.floor(millis % 60000 / 1000);\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n  }\n\n  function gameOver() {\n    if (!hasGameOver) {\n      let endDate = new Date();\n      let timeDiff = endDate - startDate;\n\n      if (timeDiff < 60000) {\n        alert('You survived ' + timeDiff / 1000 + \" seconds!\");\n      } else {\n        let minutesSurvived = millisecondsToMiutes(timeDiff);\n        alert('You survived ${minutesSurvived} WOW!');\n      }\n\n      setHasGameOver(true);\n    }\n  }\n\n  const canvas = document.getElementById(\"canvas\");\n  const ctx = canvas.getContext(\"2d\"); // Canvas black boarder\n\n  function drawBoarder() {\n    ctx.fillStyle = \"black\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    ctx.clearRect(50, 50, 500, 500);\n  } // Render rectangles to canvas\n\n\n  function drawRect() {\n    // Draw player rect first\n    ctx.fillStyle = \"#901234\";\n    ctx.fillRect(playerRect.x, playerRect.y, playerRect.width, playerRect.height);\n    rectangles.forEach(rect => {\n      ctx.fillStyle = rect.color;\n      ctx.fillRect(rect.x, rect.y, rect.width, rect.height);\n    });\n  } // collision\n\n\n  function playerCollisionDetection() {\n    if (playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50) {\n      gameOver();\n    }\n  }\n\n  function isRectangleCollision(rect1, rect2) {\n    return !(rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y);\n  }\n\n  function rectangleCollisionDetection() {\n    rectangles.forEach(rect => {\n      if (isRectangleCollision(playerRect, rect)) {\n        gameOver();\n      }\n    });\n  }\n\n  function moveRectangle() {\n    rectangles.forEach(rect => {\n      rect.x += rect.dx;\n      rect.y += rect.dy;\n    });\n  }\n\n  function boarderRectangleDetection() {\n    rectangles.forEach(rect => {\n      if (rect.x + rect.width > canvas.width || rect.x < 0) {\n        rect.dx *= -1;\n      }\n\n      if (rect.y + rect.height > canvas.height || rect.y < 0) {\n        rect.dy *= -1;\n      }\n    });\n  }\n\n  let numberOfSpeed = 0;\n\n  function configureRectSpeed() {\n    const speedUpGame = setInterval(() => {\n      numberOfSpeed++;\n      rectangles.forEach(rect => {\n        rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n        rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n      });\n\n      if (numberOfSpeed === 4) {\n        clearInterval(speedUpGame);\n      }\n    }, 10000);\n  }\n\n  function update() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    drawBoarder();\n    drawRect();\n\n    if (hasGameStarted) {\n      moveRectangle();\n    }\n\n    playerCollisionDetection();\n    rectangleCollisionDetection();\n    boarderRectangleDetection();\n    requestAnimationFrame(update);\n  } // call update methord on initial document load\n\n\n  update(); // Returns true if collision\n\n  function isCursorInRect(x, y, rect) {\n    return x > rect.x && x < rect.x + rect.width && y > rect.y && y < rect.y + rect.height;\n  }\n\n  canvas.addEventListener('mousedown', on_canvas_down, false);\n\n  function on_canvas_down(ev) {\n    console.log(controlPlayer, \"xxxxxxxxx////////\");\n    console.log(!hasGameOver, \"xxxxxxxxx////////\"); // get x & y coordinates in relation to the canvas\n\n    var x = ev.clientX - this.offsetLeft;\n    var y = ev.clientY - this.offsetTop; // See if they clicked on red square\n\n    if (isCursorInRect(x, y, playerRect)) {\n      //\n      if (!hasGameStarted) {\n        startDate = new Date();\n        configureRectSpeed();\n      }\n\n      ;\n      setHasGameStarted(true);\n      controlPlayer = true;\n    }\n\n    console.log(hasGameStarted, \"xxxxxxxxxx\");\n  } // canvas.addEventListener('mousemove', on_canvas_move, false);\n  //\n  // function on_canvas_move(ev) {\n  //     var x = ev.clientX - this.offsetLeft;\n  //     var y = ev.clientY - this.offsetTop;\n  //\n  //     console.log(x,\"xxxxxxxxxx\")\n  // }\n\n\n  canvas.addEventListener('mousemove', on_canvas_move, false);\n\n  function on_canvas_move(ev) {\n    if (controlPlayer && !hasGameOver) {\n      // get x & y coordinates in relation to the canvas\n      var x = ev.clientX - this.offsetLeft;\n      var y = ev.clientY - this.offsetTop;\n      playerRect.x = x - 25;\n      playerRect.y = y - 25;\n    }\n\n    console.log(x, \"xxxxxxxxxx\");\n  }\n\n  canvas.addEventListener('mouseup', on_canvas_up, false);\n\n  function on_canvas_up(ev) {\n    setControlPlayer(false);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"center\", {\n      children: [\"Fighter Pilot\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 14\n      }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: \"600\",\n        height: \"600\",\n        id: \"canvas\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 310,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FighterScreen, \"yngXK3MhQBEDNbWNsv9IJJKPA5o=\");\n\n_c = FighterScreen;\nexport default FighterScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"FighterScreen\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/FighterPilot/FighterScreen.js"],"names":["useState","useRef","useEffect","useCallback","Button","Container","Nav","Navbar","NavDropdown","useSound","BrowserRouter","Router","Switch","Route","Link","Redirect","ReactAudioPlayer","FighterScreen","props","controlPlayer","setControlPlayer","hasGameStarted","setHasGameStarted","hasGameOver","setHasGameOver","startDate","playerRect","x","y","width","height","rectangles","dx","dy","color","millisecondsToMiutes","millis","minutes","Math","floor","seconds","gameOver","endDate","Date","timeDiff","alert","minutesSurvived","canvas","document","getElementById","ctx","getContext","drawBoarder","fillStyle","fillRect","clearRect","drawRect","forEach","rect","playerCollisionDetection","isRectangleCollision","rect1","rect2","rectangleCollisionDetection","moveRectangle","boarderRectangleDetection","numberOfSpeed","configureRectSpeed","speedUpGame","setInterval","clearInterval","update","requestAnimationFrame","isCursorInRect","addEventListener","on_canvas_down","ev","console","log","clientX","offsetLeft","clientY","offsetTop","on_canvas_move","on_canvas_up"],"mappings":"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","sourcesContent":["\nimport { useState, useRef, useEffect, useCallback } from \"react\";\n\n// import Bird from './components/Bird'\n// import Obstacles from './components/Obstacles'\nimport { Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\nimport useSound from 'use-sound';\n//\n// import lazer from './assets/Lazer.wav';\n// import ohno from './assets/troy_oh_no.mp4';\nimport './style.css';\n\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport ReactAudioPlayer from 'react-audio-player';\n\n\n// Hook\n\n\n\n\nconst FighterScreen = (props) =>{\n\n\n  const [controlPlayer, setControlPlayer]= useState(false)\n  const [hasGameStarted, setHasGameStarted]= useState(false)\n  const [hasGameOver, setHasGameOver]= useState(false)\n\n\n  // Prevent game from working whilst page reloads\n  let startDate = null;\n\n  let playerRect = {\n    x:275,\n    y:275,\n    width:50,\n    height:50,\n  }\n\n  // Game Elements\n  let rectangles = [\n    {\n      x:75,\n      y:75,\n      dx:5,\n      dy:4,\n      width:75,\n      height:75,\n      color:\"#000099\",\n    },\n    {\n      x:400,\n      y:75,\n      dx:-5,\n      dy:5.5,\n      width:80,\n      height:60,\n      color:\"#000099\",\n    },\n    {\n      x:75,\n      y:445,\n      dx:5,\n      dy:-5,\n      width:40,\n      height:80,\n      color:\"#000099\",\n    },\n    {\n      x:420,\n      y:450,\n      dx:-5,\n      dy:-5,\n      width:130,\n      height:25,\n      color:\"#000099\",\n    },\n  ]\n\n\n  function millisecondsToMiutes(millis){\n    let minutes = Math.floor(millis/60000);\n    let seconds = Math.floor((millis % 60000)/1000);\n    return minutes + \":\" + (seconds < 10 ? \"0\" : \"\") + seconds;\n\n  }\n\n  function gameOver(){\n    if(!hasGameOver){\n      let endDate = new Date();\n      let timeDiff = endDate - startDate;\n      if (timeDiff < 60000){\n        alert('You survived '+ timeDiff/1000 +\" seconds!\");\n      }else{\n        let minutesSurvived = millisecondsToMiutes(timeDiff);\n        alert('You survived ${minutesSurvived} WOW!');\n\n      }\n\n      setHasGameOver(true);\n    }\n  }\n\n\n\n\n      const canvas = document.getElementById(\"canvas\");\n      const ctx = canvas.getContext(\"2d\");\n\n      // Canvas black boarder\n\n      function drawBoarder(){\n        ctx.fillStyle = \"black\";\n        ctx.fillRect(0,0,canvas.width,canvas.height);\n        ctx.clearRect(50,50,500,500);\n      }\n\n\n      // Render rectangles to canvas\n\n      function drawRect(){\n        // Draw player rect first\n        ctx.fillStyle = \"#901234\";\n        ctx.fillRect(playerRect.x,playerRect.y,playerRect.width,playerRect.height);\n\n        rectangles.forEach(rect => {\n          ctx.fillStyle = rect.color;\n          ctx.fillRect(rect.x,rect.y,rect.width,rect.height);\n        });\n\n      }\n\n      // collision\n      function playerCollisionDetection(){\n        if(playerRect.x + playerRect.width > 550 || playerRect.x < 50 || playerRect.y + playerRect.height > 550 || playerRect.y < 50\n        ){\n          gameOver();\n        }\n      }\n\n      function isRectangleCollision(rect1,rect2){\n        return !(\n          rect1.x > rect2.x + rect2.width || rect1.x + rect1.width < rect2.x || rect1.y > rect2.y + rect2.height || rect1.y + rect1.height < rect2.y\n        );\n      }\n\n      function rectangleCollisionDetection(){\n        rectangles.forEach(rect =>{\n          if(isRectangleCollision(playerRect,rect)){\n            gameOver();\n          }\n        })\n      }\n\n      function moveRectangle(){\n        rectangles.forEach(rect => {\n          rect.x += rect.dx;\n          rect.y += rect.dy;\n        })\n      }\n\n      function boarderRectangleDetection(){\n        rectangles.forEach(rect=>{\n          if(rect.x + rect.width > canvas.width || rect.x < 0){\n            rect.dx *= -1;\n          }\n          if(rect.y + rect.height > canvas.height || rect.y < 0){\n            rect.dy *= -1;\n          }\n        })\n      }\n\n      let numberOfSpeed = 0;\n\n      function configureRectSpeed(){\n        const speedUpGame = setInterval(()=>{\n          numberOfSpeed++;\n          rectangles.forEach(rect =>{\n            rect.dx >= 0 ? rect.dx += 1 : rect.dx -= 1;\n            rect.dy >= 0 ? rect.dy += 1 : rect.dy -= 1;\n\n          });\n          if(numberOfSpeed === 4){\n            clearInterval(speedUpGame);\n          }\n        },10000)\n      }\n\n\n\n      function update(){\n        ctx.clearRect(0,0,canvas.width,canvas.height);\n\n        drawBoarder();\n        drawRect();\n\n        if (hasGameStarted){\n          moveRectangle();\n        }\n\n        playerCollisionDetection();\n        rectangleCollisionDetection();\n        boarderRectangleDetection();\n        requestAnimationFrame(update);\n      }\n\n      // call update methord on initial document load\n      update();\n\n\n      // Returns true if collision\n      function isCursorInRect(x,y,rect){\n        return(x > rect.x && x < rect.x+rect.width && y > rect.y && y < rect.y+rect.height);\n      }\n\n\n\n\n\n      canvas.addEventListener('mousedown', on_canvas_down, false);\n\n      function on_canvas_down(ev) {\n\n        console.log(controlPlayer,\"xxxxxxxxx////////\")\n        console.log(!hasGameOver,\"xxxxxxxxx////////\")\n\n          // get x & y coordinates in relation to the canvas\n\n          var x = ev.clientX - this.offsetLeft;\n          var y = ev.clientY - this.offsetTop;\n\n          // See if they clicked on red square\n          if (isCursorInRect(x,y,playerRect)){\n            //\n            if(!hasGameStarted){\n              startDate = new Date();\n              configureRectSpeed();\n            };\n            setHasGameStarted(true);\n            controlPlayer = true;\n          }\n\n        console.log(hasGameStarted,\"xxxxxxxxxx\")\n      }\n\n\n\n\n\n\n      // canvas.addEventListener('mousemove', on_canvas_move, false);\n      //\n      // function on_canvas_move(ev) {\n      //     var x = ev.clientX - this.offsetLeft;\n      //     var y = ev.clientY - this.offsetTop;\n      //\n      //     console.log(x,\"xxxxxxxxxx\")\n      // }\n\n\n      canvas.addEventListener('mousemove', on_canvas_move, false);\n\n\n        function on_canvas_move(ev) {\n\n          if(controlPlayer && !hasGameOver){\n            // get x & y coordinates in relation to the canvas\n\n            var x = ev.clientX - this.offsetLeft;\n            var y = ev.clientY - this.offsetTop;\n\n            playerRect.x = x - 25;\n            playerRect.y = y - 25;\n          }\n          console.log(x,\"xxxxxxxxxx\")\n      }\n\n\n\n\n\n\n\n      canvas.addEventListener('mouseup', on_canvas_up, false);\n      function on_canvas_up(ev) {\n\n        setControlPlayer(false);\n      }\n\n\n\n\n    \n\n\n\n\n\n\n\n  return (\n    <div>\n\n<center>\nFighter Pilot<br/>\n<canvas width=\"600\" height=\"600\" id=\"canvas\"> </canvas>\n\n</center>\n<br/>\n    </div>\n  );\n}\n\nexport default FighterScreen;\n"]},"metadata":{},"sourceType":"module"}