{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar EventEmitter = require('events');\n\nvar EthereumProvider = require('ethereum-provider');\n\nvar ConnectionManager = require('../ConnectionManager');\n\nvar monitor = function monitor(provider) {\n  function update(status) {\n    provider.status = status;\n    if (provider instanceof EventEmitter) provider.emit('status', status);\n  }\n\n  function check() {\n    return _check.apply(this, arguments);\n  }\n\n  function _check() {\n    _check = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!provider.inSetup) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\", setTimeout(check, 1000));\n\n            case 2:\n              _context.prev = 2;\n              _context.next = 5;\n              return provider.send('eth_syncing');\n\n            case 5:\n              if (!_context.sent) {\n                _context.next = 10;\n                break;\n              }\n\n              update('syncing');\n              setTimeout(function () {\n                return check();\n              }, 5000);\n              _context.next = 11;\n              break;\n\n            case 10:\n              update('connected');\n\n            case 11:\n              _context.next = 16;\n              break;\n\n            case 13:\n              _context.prev = 13;\n              _context.t0 = _context[\"catch\"](2);\n              update('disconnected');\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[2, 13]]);\n    }));\n    return _check.apply(this, arguments);\n  }\n\n  update('loading');\n  check();\n  provider.on('connect', function () {\n    return check();\n  });\n  provider.on('close', function () {\n    return update('disconnected');\n  });\n  return provider;\n};\n\nmodule.exports = function (connections, targets, options) {\n  // If window.ethereum and injected is a target in any priority, return ethereum provider\n  if (connections.injected.__isProvider && targets.map(function (t) {\n    return t.type;\n  }).indexOf('injected') > -1) {\n    delete connections.injected.__isProvider;\n    return monitor(connections.injected);\n  }\n\n  var provider = new EthereumProvider(new ConnectionManager(connections, targets, options));\n  provider.setMaxListeners(128);\n  return monitor(provider);\n};","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/TreasureHuntDAPP_React/node_modules/eth-provider/provider/index.js"],"names":["EventEmitter","require","EthereumProvider","ConnectionManager","monitor","provider","update","status","emit","check","inSetup","setTimeout","send","on","module","exports","connections","targets","options","injected","__isProvider","map","t","type","indexOf","setMaxListeners"],"mappings":";;;;AAAA,IAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAA5B;;AACA,IAAMC,gBAAgB,GAAGD,OAAO,CAAC,mBAAD,CAAhC;;AACA,IAAME,iBAAiB,GAAGF,OAAO,CAAC,sBAAD,CAAjC;;AAEA,IAAMG,OAAO,GAAG,SAAVA,OAAU,CAAAC,QAAQ,EAAI;AAC1B,WAASC,MAAT,CAAiBC,MAAjB,EAAyB;AACvBF,IAAAA,QAAQ,CAACE,MAAT,GAAkBA,MAAlB;AACA,QAAIF,QAAQ,YAAYL,YAAxB,EAAsCK,QAAQ,CAACG,IAAT,CAAc,QAAd,EAAwBD,MAAxB;AACvC;;AAJyB,WAKXE,KALW;AAAA;AAAA;;AAAA;AAAA,sEAK1B;AAAA;AAAA;AAAA;AAAA;AAAA,mBACMJ,QAAQ,CAACK,OADf;AAAA;AAAA;AAAA;;AAAA,+CAC+BC,UAAU,CAACF,KAAD,EAAQ,IAAR,CADzC;;AAAA;AAAA;AAAA;AAAA,qBAGcJ,QAAQ,CAACO,IAAT,CAAc,aAAd,CAHd;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIMN,cAAAA,MAAM,CAAC,SAAD,CAAN;AACAK,cAAAA,UAAU,CAAC;AAAA,uBAAMF,KAAK,EAAX;AAAA,eAAD,EAAgB,IAAhB,CAAV;AALN;AAAA;;AAAA;AAOMH,cAAAA,MAAM,CAAC,WAAD,CAAN;;AAPN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAUIA,cAAAA,MAAM,CAAC,cAAD,CAAN;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAL0B;AAAA;AAAA;;AAkB1BA,EAAAA,MAAM,CAAC,SAAD,CAAN;AACAG,EAAAA,KAAK;AACLJ,EAAAA,QAAQ,CAACQ,EAAT,CAAY,SAAZ,EAAuB;AAAA,WAAMJ,KAAK,EAAX;AAAA,GAAvB;AACAJ,EAAAA,QAAQ,CAACQ,EAAT,CAAY,OAAZ,EAAqB;AAAA,WAAMP,MAAM,CAAC,cAAD,CAAZ;AAAA,GAArB;AACA,SAAOD,QAAP;AACD,CAvBD;;AAyBAS,MAAM,CAACC,OAAP,GAAiB,UAACC,WAAD,EAAcC,OAAd,EAAuBC,OAAvB,EAAmC;AAClD;AACA,MAAIF,WAAW,CAACG,QAAZ,CAAqBC,YAArB,IAAqCH,OAAO,CAACI,GAAR,CAAY,UAAAC,CAAC;AAAA,WAAIA,CAAC,CAACC,IAAN;AAAA,GAAb,EAAyBC,OAAzB,CAAiC,UAAjC,IAA+C,CAAC,CAAzF,EAA4F;AAC1F,WAAOR,WAAW,CAACG,QAAZ,CAAqBC,YAA5B;AACA,WAAOhB,OAAO,CAACY,WAAW,CAACG,QAAb,CAAd;AACD;;AACD,MAAMd,QAAQ,GAAG,IAAIH,gBAAJ,CAAqB,IAAIC,iBAAJ,CAAsBa,WAAtB,EAAmCC,OAAnC,EAA4CC,OAA5C,CAArB,CAAjB;AACAb,EAAAA,QAAQ,CAACoB,eAAT,CAAyB,GAAzB;AACA,SAAOrB,OAAO,CAACC,QAAD,CAAd;AACD,CATD","sourcesContent":["const EventEmitter = require('events')\nconst EthereumProvider = require('ethereum-provider')\nconst ConnectionManager = require('../ConnectionManager')\n\nconst monitor = provider => {\n  function update (status) {\n    provider.status = status\n    if (provider instanceof EventEmitter) provider.emit('status', status)\n  }\n  async function check () {\n    if (provider.inSetup) return setTimeout(check, 1000)\n    try {\n      if (await provider.send('eth_syncing')) {\n        update('syncing')\n        setTimeout(() => check(), 5000)\n      } else {\n        update('connected')\n      }\n    } catch (e) {\n      update('disconnected')\n    }\n  }\n  update('loading')\n  check()\n  provider.on('connect', () => check())\n  provider.on('close', () => update('disconnected'))\n  return provider\n}\n\nmodule.exports = (connections, targets, options) => {\n  // If window.ethereum and injected is a target in any priority, return ethereum provider\n  if (connections.injected.__isProvider && targets.map(t => t.type).indexOf('injected') > -1) {\n    delete connections.injected.__isProvider\n    return monitor(connections.injected)\n  }\n  const provider = new EthereumProvider(new ConnectionManager(connections, targets, options))\n  provider.setMaxListeners(128)\n  return monitor(provider)\n}\n"]},"metadata":{},"sourceType":"script"}