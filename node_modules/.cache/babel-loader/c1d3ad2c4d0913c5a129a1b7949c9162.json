{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/SkillSlider/SliderGame.js\";\nimport React, { Component } from 'react';\nimport { Tooltip, OverlayTrigger, Form, ButtonGroup, ButtonToolbar, CardColumns, CardGroup, Card, Button, Container, Nav, Navbar, NavDropdown } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './SliderGame.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Results from \"./SliderResults\";\nimport Row from \"./SliderRow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SliderGame = props => {\n  //\n  //   this.handleClick = this.handleClick.bind(this);\n  //   this.updateActiveRow = this.updateActiveRow.bind(this);\n  //   this.setEndValue = this.setEndValue.bind(this);\n  //   this.setRotatingValue = this.setRotatingValue.bind(this);\n  //   this.cancelInterval = this.cancelInterval.bind(this);\n  //   this.resetGame = this.resetGame.bind(this);\n  //   this.determinePrize = this.determinePrize.bind(this);\n  //   document.body.addEventListener('touchstart', this.handleClick.bind(this));\n  //   window.addEventListener('keypress', this.handleClick.bind(this));\n  // }\n  //\n  // handleClick(){\n  //   var index = this.state.activeRowIndex;\n  //   // If click occurs while a row is active\n  //   if(index < this.state.rows.length){\n  //     //Cancel the row's timer\n  //     this.cancelInterval(index);\n  //     //And set the value it ended on\n  //     this.setEndValue(index, this.state.rows[index].value);\n  //     this.determinePrize();\n  //   }\n  //   // Update the active row index every click\n  //   this.updateActiveRow();\n  // }\n  //\n  // updateActiveRow(){\n  //   //If the active section isn't a row\n  //   if( this.state.activeRowIndex < this.state.rows.length){\n  //     var index = this.state.activeRowIndex + 1;\n  //     this.setState({activeRowIndex: index });\n  //   } else{\n  //     this.resetGame();\n  //   }\n  // }\n  //\n  // determinePrize(){\n  //   var rows = this.state.rows;\n  //   var endValues = rows.map( function(row){\n  //     return row.endValue;\n  //   });\n  //\n  //   var prize = '';\n  //   endValues.forEach( function(value, index){\n  //     if(endValues[index] !== endValues[0]){\n  //       prize = 3; //code for 'No Prize'\n  //     } else{\n  //       prize = endValues[0];\n  //     }\n  //   });\n  //\n  //   console.log(prize);\n  //   this.setState({prize: prize});\n  // }\n  //\n  // resetGame(){\n  //   //Generate new key for each row. This forces re-rendering and resetting of timers.\n  //   var rows = this.state.rows.map( function(row){\n  //     //Generate new key\n  //     row.key = Math.random();\n  //     //Reset running timer\n  //     row.isRunning = true;\n  //     return row;\n  //   });\n  //\n  //   //Set the state\n  //   this.setState({rows: rows});\n  //   this.setState({activeRowIndex: 0});\n  // }\n  //\n  // setRotatingValue(index, value){\n  //   var rows = this.state.rows;\n  //   var row = rows[index];\n  //   row.value = value;\n  //   rows[index] = row;\n  //   this.setState({rows: rows});\n  // }\n  //\n  // setEndValue(index, value){\n  //   var rows = this.state.rows;\n  //   var row = rows[index];\n  //   row.endValue = value;\n  //   rows[index] = row;\n  //   this.setState({rows: rows});\n  // }\n  //\n  // cancelInterval(index){\n  //   var rows = this.state.rows;\n  //   var row = rows[index];\n  //   row.isRunning = false;\n  //   rows[index] = row;\n  //   this.setState({rows: rows});\n  // }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"background\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spaceTopHome\",\n      children: /*#__PURE__*/_jsxDEV(Helmet, {\n        children: /*#__PURE__*/_jsxDEV(\"title\", {\n          children: \"TreasureBlox | Hello Worlkd\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_c = SliderGame;\nexport default SliderGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"SliderGame\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/PartnershipExample/GamesSelection/SkillSlider/SliderGame.js"],"names":["React","Component","Tooltip","OverlayTrigger","Form","ButtonGroup","ButtonToolbar","CardColumns","CardGroup","Card","Button","Container","Nav","Navbar","NavDropdown","BrowserRouter","Router","Switch","Route","Link","Results","Row","SliderGame","props"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AAEA,SAAQC,OAAR,EAAgBC,cAAhB,EAA+BC,IAA/B,EAAoCC,WAApC,EAAgDC,aAAhD,EAA8DC,WAA9D,EAA0EC,SAA1E,EAAoFC,IAApF,EAAyFC,MAAzF,EAAgGC,SAAhG,EAA0GC,GAA1G,EAA8GC,MAA9G,EAAqHC,WAArH,QAAwI,iBAAxI;AAEA,OAAO,sCAAP;AACA,OAAO,kBAAP;AAEA,SACEC,aAAa,IAAIC,MADnB,EAEEC,MAFF,EAGEC,KAHF,EAIEC,IAJF,QAKO,kBALP;AAQA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,GAAP,MAAgB,aAAhsBAEE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,2BACA;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACA,QAAC,MAAD;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,UAFF;AAkBC,CAnHH;;KAAMD,U;AAqHJ,eAAeA,UAAf","sourcesContent":["import React, {Component} from 'react';\n\nimport {Tooltip,OverlayTrigger,Form,ButtonGroup,ButtonToolbar,CardColumns,CardGroup,Card,Button,Container,Nav,Navbar,NavDropdown } from 'react-bootstrap';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './SliderGame.css';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nimport Results from \"./SliderResults\"\nimport Row from \"./SliderRow\"\n\nconst SliderGame = (props) => {\n\n\n  //\n  //   this.handleClick = this.handleClick.bind(this);\n  //   this.updateActiveRow = this.updateActiveRow.bind(this);\n  //   this.setEndValue = this.setEndValue.bind(this);\n  //   this.setRotatingValue = this.setRotatingValue.bind(this);\n  //   this.cancelInterval = this.cancelInterval.bind(this);\n  //   this.resetGame = this.resetGame.bind(this);\n  //   this.determinePrize = this.determinePrize.bind(this);\n  //   document.body.addEventListener('touchstart', this.handleClick.bind(this));\n  //   window.addEventListener('keypress', this.handleClick.bind(this));\n  // }\n  //\n  // handleClick(){\n  //   var index = this.state.activeRowIndex;\n  //   // If click occurs while a row is active\n  //   if(index < this.state.rows.length){\n  //     //Cancel the row's timer\n  //     this.cancelInterval(index);\n  //     //And set the value it ended on\n  //     this.setEndValue(index, this.state.rows[index].value);\n  //     this.determinePrize();\n  //   }\n  //   // Update the active row index every click\n  //   this.updateActiveRow();\n  // }\n  //\n  // updateActiveRow(){\n  //   //If the active section isn't a row\n  //   if( this.state.activeRowIndex < this.state.rows.length){\n  //     var index = this.state.activeRowIndex + 1;\n  //     this.setState({activeRowIndex: index });\n  //   } else{\n  //     this.resetGame();\n  //   }\n  // }\n  //\n  // determinePrize(){\n  //   var rows = this.state.rows;\n  //   var endValues = rows.map( function(row){\n  //     return row.endValue;\n  //   });\n  //\n  //   var prize = '';\n  //   endValues.forEach( function(value, index){\n  //     if(endValues[index] !== endValues[0]){\n  //       prize = 3; //code for 'No Prize'\n  //     } else{\n  //       prize = endValues[0];\n  //     }\n  //   });\n  //\n  //   console.log(prize);\n  //   this.setState({prize: prize});\n  // }\n  //\n  // resetGame(){\n  //   //Generate new key for each row. This forces re-rendering and resetting of timers.\n  //   var rows = this.state.rows.map( function(row){\n  //     //Generate new key\n  //     row.key = Math.random();\n  //     //Reset running timer\n  //     row.isRunning = true;\n  //     return row;\n  //   });\n  //\n  //   //Set the state\n  //   this.setState({rows: rows});\n  //   this.setState({activeRowIndex: 0});\n  // }\n  //\n  // setRotatingValue(index, value){\n  //   var rows = this.state.rows;\n  //   var row = rows[index];\n  //   row.value = value;\n  //   rows[index] = row;\n  //   this.setState({rows: rows});\n  // }\n  //\n  // setEndValue(index, value){\n  //   var rows = this.state.rows;\n  //   var row = rows[index];\n  //   row.endValue = value;\n  //   rows[index] = row;\n  //   this.setState({rows: rows});\n  // }\n  //\n  // cancelInterval(index){\n  //   var rows = this.state.rows;\n  //   var row = rows[index];\n  //   row.isRunning = false;\n  //   rows[index] = row;\n  //   this.setState({rows: rows});\n  // }\n\n  return (\n\n    <div className=\"background\">\n    <div className=\"spaceTopHome\">\n    <Helmet>\n      <title>TreasureBlox | Hello Worlkd</title>\n    </Helmet>\n\n\n\n  </div>\n\n  </div>\n\n\n\n  );\n\n  }\n\n  export default SliderGame;\n"]},"metadata":{},"sourceType":"module"}