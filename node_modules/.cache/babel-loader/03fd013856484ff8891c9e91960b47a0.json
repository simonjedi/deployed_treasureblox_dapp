{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/MineGame/BloxMine/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport CreateBoard from '../utils/CreateBoard';\nimport { revealed } from \"../utils/Reveal\";\nimport Cell from './Cell';\nimport { BrowserRouter as Router, Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport useSound from 'use-sound';\nimport troy_wrong from '../assets/troy_oh_no.mp4';\nimport troy_success from '../assets/Troy_you_did_it.mp4';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst [redirectLevel1More, setredirectLevel1More] = useState(false);\n\nconst handleMore = async () => {\n  setredirectLevel1More(true);\n  setTimeout(function () {}, 1000);\n};\n\nfunction Board(props) {\n  _s();\n\n  const [play, setPlay] = useState(true);\n  const [wrong, setWrong] = useState(false);\n  const [playFour] = useSound(troy_wrong, {\n    volume: 1.5\n  });\n  const [playFive] = useSound(troy_success, {\n    volume: 1.5\n  });\n  const [grid, setGrid] = useState([]);\n  const [nonMinecount, setNonMinecount] = useState(0);\n  const [mineLocation, setmineLocation] = useState([]);\n  const style = {\n    display: 'flex',\n    flexDirection: 'row',\n    width: 'fit-content',\n    color: 'white'\n  };\n  useEffect(() => {\n    freshBoard();\n  }, []); // Making freshboard atstart\n\n  const freshBoard = () => {\n    const newBoard = CreateBoard(10, 10, 20);\n    setNonMinecount(10 * 10 - 20);\n    setmineLocation(newBoard.mineLocation);\n    setGrid(newBoard.board);\n  };\n\n  const updateFlag = (e, x, y) => {\n    e.preventDefault(); // deep copy of the object\n\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    newGrid[x][y].flagged = true;\n    console.log(newGrid[x][y]);\n    setGrid(newGrid);\n  };\n\n  const newfresh = () => {\n    freshBoard();\n  };\n\n  const endGame = () => {\n    setPlay(false);\n  };\n\n  const revealcell = (x, y) => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n\n    if (newGrid[x][y].value === \"X\") {\n      for (let i = 0; i < mineLocation.length; i++) {\n        newGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n      }\n\n      playFour();\n      setTimeout(newfresh, 1000);\n      setGrid(newGrid);\n      setWrong(true);\n      setTimeout(endGame, 2500);\n      console.log(\"REDIRECT ME CHANGE STATE\");\n    }\n\n    if (nonMinecount === 0) {\n      playFive();\n      setTimeout(newfresh, 500);\n      setTimeout(handleMore, 1000);\n      console.log(\"WIN\");\n    } else {\n      let revealedboard = revealed(newGrid, x, y, nonMinecount);\n      setGrid(revealedboard.arr);\n      setNonMinecount(revealedboard.newNonMines);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"parent\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          color: 'white',\n          textAlign: 'center',\n          fontSize: '30px',\n          margin: '0px'\n        },\n        children: [\"Find All Non-Mines - \", nonMinecount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), play ? /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/hunt1\",\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }, this), redirectLevel1More ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/Game1Win\",\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 19\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 19\n      }, this), grid.map((singlerow, index1) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: style,\n          children: singlerow.map((singlecol, index2) => {\n            return /*#__PURE__*/_jsxDEV(Cell, {\n              details: singlecol,\n              updateFlag: updateFlag,\n              revealcell: revealcell\n            }, index2, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 37\n            }, this);\n          })\n        }, index1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"VHHR1EHF2t1horbM+gFMiYnUzNA=\", false, function () {\n  return [useSound, useSound];\n});\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/MineGame/BloxMine/Board.js"],"names":["React","useState","useEffect","CreateBoard","revealed","Cell","BrowserRouter","Router","Switch","Route","Link","Redirect","useSound","troy_wrong","troy_success","redirectLevel1More","setredirectLevel1More","handleMore","setTimeout","Board","props","play","setPlay","wrong","setWrong","playFour","volume","playFive","grid","setGrid","nonMinecount","setNonMinecount","mineLocation","setmineLocation","style","display","flexDirection","width","color","freshBoard","newBoard","board","updateFlag","e","x","y","preventDefault","newGrid","JSON","parse","stringify","flagged","console","log","newfresh","endGame","revealcell","value","i","length","revealedboard","arr","newNonMines","textAlign","fontSize","margin","map","singlerow","index1","singlecol","index2"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport CreateBoard from '../utils/CreateBoard';\nimport { revealed } from \"../utils/Reveal\";\nimport Cell from './Cell';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\n\nimport useSound from 'use-sound';\n\nimport troy_wrong from '../assets/troy_oh_no.mp4';\nimport troy_success from '../assets/Troy_you_did_it.mp4';\n\nconst [redirectLevel1More,setredirectLevel1More] = useState(false);\n\n\nconst handleMore = async() => {\n  setredirectLevel1More(true)\n  setTimeout(function(){\n  },1000);\n}\n\n\n\n\nfunction Board(props) {\n\n    const [play,setPlay] = useState(true);\n    const [wrong,setWrong] = useState(false);\n\n    const [playFour]=useSound(troy_wrong,{volume:1.5});\n    const [playFive]=useSound(troy_success,{volume:1.5});\n\n    const [grid,setGrid]=useState([]);\n    const [nonMinecount,setNonMinecount]=useState(0);\n    const [mineLocation,setmineLocation]=useState([]);\n    const style={\n        display : 'flex',\n        flexDirection : 'row',\n        width:'fit-content',\n        color:'white',\n\n    }\n    useEffect(()=>{\n\n        freshBoard();\n    },[]);\n\n    // Making freshboard atstart\n    const freshBoard = () => {\n        const newBoard=CreateBoard(10,10,20);\n        setNonMinecount(10*10-20);\n        setmineLocation(newBoard.mineLocation);\n        setGrid(newBoard.board);\n    }\n    const updateFlag=(e,x,y)=>{\n        e.preventDefault();\n        // deep copy of the object\n        let newGrid=JSON.parse(JSON.stringify(grid));\n        newGrid[x][y].flagged=true;\n        console.log(newGrid[x][y]);\n        setGrid(newGrid);\n    }\n    const newfresh=()=>{\n        freshBoard();\n    }\n    const endGame=()=>{\n\n        setPlay(false);\n    }\n\n\n    const revealcell=(x,y)=>{\n        let newGrid=JSON.parse(JSON.stringify(grid));\n        if(newGrid[x][y].value===\"X\"){\n            for(let i=0;i<mineLocation.length;i++){\n                newGrid[mineLocation[i][0]][mineLocation[i][1]].revealed=true;\n\n            }\n            playFour()\n            setTimeout(newfresh,1000);\n            setGrid(newGrid);\n            setWrong(true)\n            setTimeout(endGame,2500);\n\n\n            console.log(\"REDIRECT ME CHANGE STATE\")\n\n\n        }\n        if(nonMinecount===0){\n          playFive()\n          setTimeout(newfresh,500);\n          setTimeout(handleMore,1000);\n          console.log(\"WIN\")\n\n\n        }\n        else{\n            let revealedboard=revealed(newGrid,x,y,nonMinecount);\n            setGrid(revealedboard.arr);\n            setNonMinecount(revealedboard.newNonMines);\n\n        }\n    }\n\n    return (\n        <div className=\"parent\">\n            <div>\n                <h3 style={{color:'white',textAlign:'center',fontSize:'30px',margin:'0px'}}>Find All Non-Mines - {nonMinecount}</h3>\n                <br/>\n                {play?(\n                  <div>\n\n                  </div>\n                ):(\n                  <div>\n                  <Redirect to=\"/hunt1\" {...props}/>\n                  </div>\n                )}\n\n\n                {redirectLevel1More?(\n                  <div>\n                  <Redirect to=\"/Game1Win\" {...props}/>\n                  </div>\n                ):(\n                  <div>\n\n                  </div>\n\n                )}\n\n                {grid.map((singlerow,index1)=>{\n                    return (\n                        <div style={style} key={index1}>\n                            {singlerow.map((singlecol,index2)=>{\n                            return  <Cell details={singlecol} key={index2} updateFlag={updateFlag} revealcell={revealcell}/>\n                            })}\n\n                        </div>\n                    )\n                })}\n            </div>\n\n        </div>\n    )\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}