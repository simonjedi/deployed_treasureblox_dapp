{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/Connection.js\",\n    _s = $RefreshSig$();\n\n// App.js\nimport React, { useState, useEffect } from 'react';\nimport { useWallet, UseWalletProvider } from 'use-wallet';\nimport { Button } from 'react-bootstrap';\nimport MyNav from \"./MyNav\";\nimport App from \"./App\";\nimport getWeb3 from \"./getWeb3\";\nimport WalletConnectClient from \"@walletconnect/client\";\nconst client = await WalletConnectClient.init({\n  relayProvider: \"wss://relay.walletconnect.com\",\n  metadata: {\n    name: \"Example Dapp\",\n    description: \"Example Dapp\",\n    url: \"#\",\n    icons: [\"https://walletconnect.com/walletconnect-logo.png\"]\n  }\n});\nimport { CLIENT_EVENTS } from \"@walletconnect/client\";\nimport { PairingTypes } from \"@walletconnect/types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclient.on(CLIENT_EVENTS.pairing.proposal, async proposal => {\n  // uri should be shared with the Wallet either through QR Code scanning or mobile deep linking\n  const {\n    uri\n  } = proposal.signal.params;\n});\n\nconst Connection = props => {\n  _s();\n\n  const wallet = useWallet();\n  const [firstPartAddress, setFirstPartAddress] = useState('Connect Wallet');\n  const [secondPartAddress, setSecondPartAddress] = useState('');\n  useEffect(() => {\n    const init = async () => {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const usersAccount = accounts[0];\n      const stringOfUsersAccount = new String(usersAccount);\n      console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n\n      setFirstPartAddress(stringOfUsersAccount.slice(0, 5));\n      setSecondPartAddress('____' + stringOfUsersAccount.slice(37, 42));\n    };\n\n    init();\n  });\n\n  const connectWallet = async e => {\n    await wallet.connect();\n    const usersAccount = props.accounts;\n    const stringOfUsersAccount = new String(usersAccount);\n    console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n\n    setFirstPartAddress('Welcome');\n    setSecondPartAddress('');\n    window.location.reload();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Button, {\n      onClick: connectWallet,\n      id: \"wallet-button\",\n      className: \"customButton enableEthereumButton\",\n      children: [firstPartAddress, secondPartAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}; // Wrap everything in <UseWalletProvider />\n\n\n_s(Connection, \"xg0lUAxmWKC4h1FC8bHTNYHpH0w=\", false, function () {\n  return [useWallet];\n});\n\n_c = Connection;\nexport default (props => /*#__PURE__*/_jsxDEV(UseWalletProvider, {\n  chainId: 1337,\n  connectors: {\n    // This is how connectors get configured\n    provided: {\n      provider: window.cleanEthereum\n    }\n  },\n  children: /*#__PURE__*/_jsxDEV(Connection, {\n    accounts: props.accounts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 77,\n  columnNumber: 3\n}, this));\n\nvar _c;\n\n$RefreshReg$(_c, \"Connection\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/Connection.js"],"names":["React","useState","useEffect","useWallet","UseWalletProvider","Button","MyNav","App","getWeb3","WalletConnectClient","client","init","relayProvider","metadata","name","description","url","icons","CLIENT_EVENTS","PairingTypes","on","pairing","proposal","uri","signal","params","Connection","props","wallet","firstPartAddress","setFirstPartAddress","secondPartAddress","setSecondPartAddress","web3","accounts","eth","getAccounts","usersAccount","stringOfUsersAccount","String","console","log","slice","connectWallet","e","connect","window","location","reload","provided","provider","cleanEthereum"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAASC,SAAT,EAAoBC,iBAApB,QAA6C,YAA7C;AACA,SAASC,MAAT,QAAuB,iBAAvB;AAEA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,OAAP,MAAoB,WAApB;AAGA,OAAOC,mBAAP,MAAgC,uBAAhC;AAEA,MAAMC,MAAM,GAAG,MAAMD,mBAAmB,CAACE,IAApB,CAAyB;AAC5CC,EAAAA,aAAa,EAAE,+BAD6B;AAE5CC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,IAAI,EAAE,cADE;AAERC,IAAAA,WAAW,EAAE,cAFL;AAGRC,IAAAA,GAAG,EAAE,GAHG;AAIRC,IAAAA,KAAK,EAAE,CAAC,kDAAD;AAJC;AAFkC,CAAzB,CAArB;AAUA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,YAAT,QAA6B,sBAA7B;;AAEAT,MAAM,CAACU,EAAP,CACEF,aAAa,CAACG,OAAd,CAAsBC,QADxB,EAEE,MAAOA,QAAP,IAA2C;AACzC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAUD,QAAQ,CAACE,MAAT,CAAgBC,MAAhC;AACD,CALH;;AASA,MAAMC,UAAU,GAAIC,KAAD,IAAY;AAAA;;AAE7B,QAAMC,MAAM,GAAGzB,SAAS,EAAxB;AACA,QAAM,CAAC0B,gBAAD,EAAmBC,mBAAnB,IAA0C7B,QAAQ,CAAC,gBAAD,CAAxD;AACA,QAAM,CAAC8B,iBAAD,EAAoBC,oBAApB,IAA4C/B,QAAQ,CAAC,EAAD,CAA1D;AAEAC,EAAAA,SAAS,CAAC,MAAM;AAEb,UAAMS,IAAI,GAAG,YAAW;AACtB,YAAMsB,IAAI,GAAG,MAAMzB,OAAO,EAA1B;AACA,YAAM0B,QAAQ,GAAG,MAAMD,IAAI,CAACE,GAAL,CAASC,WAAT,EAAvB;AACA,YAAMC,YAAY,GAAGH,QAAQ,CAAC,CAAD,CAA7B;AACA,YAAMI,oBAAoB,GAAG,IAAIC,MAAJ,CAAWF,YAAX,CAA7B;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAoB,CAACI,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAAZ,EALsB,CAKyB;;AAC/CZ,MAAAA,mBAAmB,CAACQ,oBAAoB,CAACI,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAAD,CAAnB;AACAV,MAAAA,oBAAoB,CAAC,SAAOM,oBAAoB,CAACI,KAArB,CAA2B,EAA3B,EAA+B,EAA/B,CAAR,CAApB;AAED,KATD;;AAUA/B,IAAAA,IAAI;AACL,GAbO,CAAT;;AAeA,QAAMgC,aAAa,GAAG,MAAMC,CAAN,IAAY;AAChC,UAAMhB,MAAM,CAACiB,OAAP,EAAN;AACA,UAAMR,YAAY,GAAGV,KAAK,CAACO,QAA3B;AACA,UAAMI,oBAAoB,GAAG,IAAIC,MAAJ,CAAWF,YAAX,CAA7B;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYH,oBAAoB,CAACI,KAArB,CAA2B,CAA3B,EAA8B,CAA9B,CAAZ,EAJgC,CAIe;;AAC/CZ,IAAAA,mBAAmB,CAAC,SAAD,CAAnB;AACAE,IAAAA,oBAAoB,CAAC,EAAD,CAApB;AACAc,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AAED,GATD;;AAWA,sBACE;AAAA,2BACE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAEL,aAAjB;AAAgC,MAAA,EAAE,EAAC,eAAnC;AAAmD,MAAA,SAAS,EAAC,mCAA7D;AAAA,iBAAkGd,gBAAlG,EAAoHE,iBAApH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CArCD,C,CAuCA;;;GAvCML,U;UAEWvB,S;;;KAFXuB,U;AAwCN,gBAAgBC,KAAD,iBACb,QAAC,iBAAD;AAEE,EAAA,OAAO,EAAE,IAFX;AAGE,EAAA,UAAU,EAAE;AACV;AACAsB,IAAAA,QAAQ,EAAE;AAACC,MAAAA,QAAQ,EAAEJ,MAAM,CAACK;AAAlB;AAFA,GAHd;AAAA,yBAQE,QAAC,UAAD;AAAY,IAAA,QAAQ,EAAExB,KAAK,CAACO;AAA5B;AAAA;AAAA;AAAA;AAAA;AARF;AAAA;AAAA;AAAA;AAAA,QADF","sourcesContent":["// App.js\n\nimport React, {useState, useEffect} from 'react'\nimport { useWallet, UseWalletProvider } from 'use-wallet'\nimport { Button } from 'react-bootstrap';\n\nimport MyNav from \"./MyNav\";\nimport App from \"./App\";\nimport getWeb3 from \"./getWeb3\";\n\n\nimport WalletConnectClient from \"@walletconnect/client\";\n\nconst client = await WalletConnectClient.init({\n  relayProvider: \"wss://relay.walletconnect.com\",\n  metadata: {\n    name: \"Example Dapp\",\n    description: \"Example Dapp\",\n    url: \"#\",\n    icons: [\"https://walletconnect.com/walletconnect-logo.png\"],\n  },\n});\n\nimport { CLIENT_EVENTS } from \"@walletconnect/client\";\nimport { PairingTypes } from \"@walletconnect/types\";\n\nclient.on(\n  CLIENT_EVENTS.pairing.proposal,\n  async (proposal: PairingTypes.Proposal) => {\n    // uri should be shared with the Wallet either through QR Code scanning or mobile deep linking\n    const { uri } = proposal.signal.params;\n  }\n);\n\n\nconst Connection = (props) =>  {\n\n  const wallet = useWallet()\n  const [firstPartAddress, setFirstPartAddress] = useState('Connect Wallet');\n  const [secondPartAddress, setSecondPartAddress] = useState('');\n\n  useEffect(() => {\n\n     const init = async() => {\n       const web3 = await getWeb3();\n       const accounts = await web3.eth.getAccounts();\n       const usersAccount = accounts[0];\n       const stringOfUsersAccount = new String(usersAccount)\n       console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n       setFirstPartAddress(stringOfUsersAccount.slice(0, 5));\n       setSecondPartAddress('____'+stringOfUsersAccount.slice(37, 42));\n\n     }\n     init()\n   });\n\n  const connectWallet = async(e) => {\n    await wallet.connect()\n    const usersAccount = props.accounts;\n    const stringOfUsersAccount = new String(usersAccount)\n    console.log(stringOfUsersAccount.slice(0, 4)); // \"01\"\n    setFirstPartAddress('Welcome');\n    setSecondPartAddress('');\n    window.location.reload();\n\n  }\n\n  return(\n    <div>\n      <Button onClick={connectWallet} id=\"wallet-button\" className=\"customButton enableEthereumButton\">{firstPartAddress}{secondPartAddress}</Button>\n    </div>\n  )\n}\n\n// Wrap everything in <UseWalletProvider />\nexport default (props) => (\n  <UseWalletProvider\n\n    chainId={1337}\n    connectors={{\n      // This is how connectors get configured\n      provided: {provider: window.cleanEthereum},\n    }}>\n\n    <Connection accounts={props.accounts}/>\n\n\n  </UseWalletProvider>\n)\n"]},"metadata":{},"sourceType":"module"}