{"ast":null,"code":"var _jsxFileName = \"/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/BloxMine/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport CreateBoard from '../utils/CreateBoard';\nimport { revealed } from \"../utils/Reveal\";\nimport Cell from './Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  const [grid, setGrid] = useState([]);\n  const [nonMinecount, setNonMinecount] = useState(0);\n  const [mineLocation, setmineLocation] = useState([]);\n  const style = {\n    display: 'flex',\n    flexDirection: 'row',\n    width: 'fit-content',\n    color: 'white'\n  };\n  useEffect(() => {\n    freshBoard();\n  }, []); // Making freshboard atstart\n\n  const freshBoard = () => {\n    const newBoard = CreateBoard(10, 10, 20);\n    setNonMinecount(10 * 10 - 20);\n    setmineLocation(newBoard.mineLocation);\n    setGrid(newBoard.board);\n  };\n\n  const updateFlag = (e, x, y) => {\n    e.preventDefault(); // deep copy of the object\n\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    newGrid[x][y].flagged = true;\n    console.log(newGrid[x][y]);\n    setGrid(newGrid);\n  };\n\n  const newfresh = () => {\n    freshBoard();\n  };\n\n  const revealcell = (x, y) => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n\n    if (newGrid[x][y].value === \"X\") {\n      toast.dark(' Clicked on Mine ,Try Again', {\n        position: \"top-center\",\n        autoClose: 1000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n\n      for (let i = 0; i < mineLocation.length; i++) {\n        newGrid[mineLocation[i][0]][mineLocation[i][1]].revealed = true;\n      }\n\n      setGrid(newGrid);\n      setTimeout(newfresh, 500);\n    }\n\n    if (nonMinecount === 0) {\n      toast.success('Wohoo!!,You won', {\n        position: \"top-center\",\n        autoClose: 1000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined\n      });\n      setTimeout(newfresh, 500);\n    } else {\n      let revealedboard = revealed(newGrid, x, y, nonMinecount);\n      setGrid(revealedboard.arr);\n      setNonMinecount(revealedboard.newNonMines);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"parent\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          color: 'white',\n          textAlign: 'center',\n          fontSize: '30px',\n          margin: '0px'\n        },\n        children: [\"Non-Mines - \", nonMinecount]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), grid.map((singlerow, index1) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: style,\n          children: singlerow.map((singlecol, index2) => {\n            return /*#__PURE__*/_jsxDEV(Cell, {\n              details: singlecol,\n              updateFlag: updateFlag,\n              revealcell: revealcell\n            }, index2, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 37\n            }, this);\n          })\n        }, index1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"P2nXUmV1Q5/fYBs6DYxmwJnNxxI=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/jedi/Desktop/Education/REACT/deployed_treasureblox_dapp/src/BloxMine/Board.js"],"names":["React","useState","useEffect","CreateBoard","revealed","Cell","Board","grid","setGrid","nonMinecount","setNonMinecount","mineLocation","setmineLocation","style","display","flexDirection","width","color","freshBoard","newBoard","board","updateFlag","e","x","y","preventDefault","newGrid","JSON","parse","stringify","flagged","console","log","newfresh","revealcell","value","toast","dark","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","i","length","setTimeout","success","revealedboard","arr","newNonMines","textAlign","fontSize","margin","map","singlerow","index1","singlecol","index2"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AACb,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAeP,QAAQ,CAAC,EAAD,CAA7B;AACA,QAAM,CAACQ,YAAD,EAAcC,eAAd,IAA+BT,QAAQ,CAAC,CAAD,CAA7C;AACA,QAAM,CAACU,YAAD,EAAcC,eAAd,IAA+BX,QAAQ,CAAC,EAAD,CAA7C;AACA,QAAMY,KAAK,GAAC;AACRC,IAAAA,OAAO,EAAG,MADF;AAERC,IAAAA,aAAa,EAAG,KAFR;AAGRC,IAAAA,KAAK,EAAC,aAHE;AAIRC,IAAAA,KAAK,EAAC;AAJE,GAAZ;AAOAf,EAAAA,SAAS,CAAC,MAAI;AAEVgB,IAAAA,UAAU;AACb,GAHQ,EAGP,EAHO,CAAT,CAXa,CAgBb;;AACA,QAAMA,UAAU,GAAG,MAAM;AACrB,UAAMC,QAAQ,GAAChB,WAAW,CAAC,EAAD,EAAI,EAAJ,EAAO,EAAP,CAA1B;AACAO,IAAAA,eAAe,CAAC,KAAG,EAAH,GAAM,EAAP,CAAf;AACAE,IAAAA,eAAe,CAACO,QAAQ,CAACR,YAAV,CAAf;AACAH,IAAAA,OAAO,CAACW,QAAQ,CAACC,KAAV,CAAP;AACH,GALD;;AAMA,QAAMC,UAAU,GAAC,CAACC,CAAD,EAAGC,CAAH,EAAKC,CAAL,KAAS;AACtBF,IAAAA,CAAC,CAACG,cAAF,GADsB,CAEtB;;AACA,QAAIC,OAAO,GAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAetB,IAAf,CAAX,CAAZ;AACAmB,IAAAA,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAcM,OAAd,GAAsB,IAAtB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYN,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,CAAZ;AACAhB,IAAAA,OAAO,CAACkB,OAAD,CAAP;AACH,GAPD;;AAQA,QAAMO,QAAQ,GAAC,MAAI;AACff,IAAAA,UAAU;AACb,GAFD;;AAGA,QAAMgB,UAAU,GAAC,CAACX,CAAD,EAAGC,CAAH,KAAO;AACpB,QAAIE,OAAO,GAACC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAetB,IAAf,CAAX,CAAZ;;AACA,QAAGmB,OAAO,CAACH,CAAD,CAAP,CAAWC,CAAX,EAAcW,KAAd,KAAsB,GAAzB,EAA6B;AACzBC,MAAAA,KAAK,CAACC,IAAN,CAAW,6BAAX,EAA0C;AAAEC,QAAAA,QAAQ,EAAE,YAAZ;AAA0BC,QAAAA,SAAS,EAAE,IAArC;AAA2CC,QAAAA,eAAe,EAAE,KAA5D;AAAmEC,QAAAA,YAAY,EAAE,IAAjF;AAAuFC,QAAAA,YAAY,EAAE,IAArG;AAA2GC,QAAAA,SAAS,EAAE,IAAtH;AAA4HC,QAAAA,QAAQ,EAAEC;AAAtI,OAA1C;;AACA,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACnC,YAAY,CAACoC,MAA3B,EAAkCD,CAAC,EAAnC,EAAsC;AAClCpB,QAAAA,OAAO,CAACf,YAAY,CAACmC,CAAD,CAAZ,CAAgB,CAAhB,CAAD,CAAP,CAA4BnC,YAAY,CAACmC,CAAD,CAAZ,CAAgB,CAAhB,CAA5B,EAAgD1C,QAAhD,GAAyD,IAAzD;AACH;;AACDI,MAAAA,OAAO,CAACkB,OAAD,CAAP;AACAsB,MAAAA,UAAU,CAACf,QAAD,EAAU,GAAV,CAAV;AACH;;AACD,QAAGxB,YAAY,KAAG,CAAlB,EAAoB;AAChB2B,MAAAA,KAAK,CAACa,OAAN,CAAc,iBAAd,EAAgC;AAAEX,QAAAA,QAAQ,EAAE,YAAZ;AAA0BC,QAAAA,SAAS,EAAE,IAArC;AAA2CC,QAAAA,eAAe,EAAE,KAA5D;AAAmEC,QAAAA,YAAY,EAAE,IAAjF;AAAuFC,QAAAA,YAAY,EAAE,IAArG;AAA2GC,QAAAA,SAAS,EAAE,IAAtH;AAA4HC,QAAAA,QAAQ,EAAEC;AAAtI,OAAhC;AACAG,MAAAA,UAAU,CAACf,QAAD,EAAU,GAAV,CAAV;AACH,KAHD,MAII;AACA,UAAIiB,aAAa,GAAC9C,QAAQ,CAACsB,OAAD,EAASH,CAAT,EAAWC,CAAX,EAAaf,YAAb,CAA1B;AACAD,MAAAA,OAAO,CAAC0C,aAAa,CAACC,GAAf,CAAP;AACAzC,MAAAA,eAAe,CAACwC,aAAa,CAACE,WAAf,CAAf;AACH;AAEJ,GApBD;;AAsBA,sBACI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,2BACI;AAAA,8BACI;AAAI,QAAA,KAAK,EAAE;AAACnC,UAAAA,KAAK,EAAC,OAAP;AAAeoC,UAAAA,SAAS,EAAC,QAAzB;AAAkCC,UAAAA,QAAQ,EAAC,MAA3C;AAAkDC,UAAAA,MAAM,EAAC;AAAzD,SAAX;AAAA,mCAAyF9C,YAAzF;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,cAAD;AAAA;AAAA;AAAA;AAAA,cAFJ,EAGKF,IAAI,CAACiD,GAAL,CAAS,CAACC,SAAD,EAAWC,MAAX,KAAoB;AAC1B,4BACI;AAAK,UAAA,KAAK,EAAE7C,KAAZ;AAAA,oBACK4C,SAAS,CAACD,GAAV,CAAc,CAACG,SAAD,EAAWC,MAAX,KAAoB;AACnC,gCAAQ,QAAC,IAAD;AAAM,cAAA,OAAO,EAAED,SAAf;AAAuC,cAAA,UAAU,EAAEtC,UAAnD;AAA+D,cAAA,UAAU,EAAEa;AAA3E,eAA+B0B,MAA/B;AAAA;AAAA;AAAA;AAAA,oBAAR;AACC,WAFA;AADL,WAAwBF,MAAxB;AAAA;AAAA;AAAA;AAAA,gBADJ;AAQH,OATA,CAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAmBH;;GA3EQpD,K;;KAAAA,K;AA4ET,eAAeA,KAAf","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport CreateBoard from '../utils/CreateBoard';\nimport { revealed } from \"../utils/Reveal\";\nimport Cell from './Cell';\n\nfunction Board() {\n    const [grid,setGrid]=useState([]);\n    const [nonMinecount,setNonMinecount]=useState(0);\n    const [mineLocation,setmineLocation]=useState([]);\n    const style={\n        display : 'flex',\n        flexDirection : 'row',\n        width:'fit-content',\n        color:'white',\n\n    }\n    useEffect(()=>{\n\n        freshBoard();\n    },[]);\n\n    // Making freshboard atstart\n    const freshBoard = () => {\n        const newBoard=CreateBoard(10,10,20);\n        setNonMinecount(10*10-20);\n        setmineLocation(newBoard.mineLocation);\n        setGrid(newBoard.board);\n    }\n    const updateFlag=(e,x,y)=>{\n        e.preventDefault();\n        // deep copy of the object\n        let newGrid=JSON.parse(JSON.stringify(grid));\n        newGrid[x][y].flagged=true;\n        console.log(newGrid[x][y]);\n        setGrid(newGrid);\n    }\n    const newfresh=()=>{\n        freshBoard();\n    }\n    const revealcell=(x,y)=>{\n        let newGrid=JSON.parse(JSON.stringify(grid));\n        if(newGrid[x][y].value===\"X\"){\n            toast.dark(' Clicked on Mine ,Try Again', { position: \"top-center\", autoClose: 1000, hideProgressBar: false, closeOnClick: true, pauseOnHover: true, draggable: true, progress: undefined, });\n            for(let i=0;i<mineLocation.length;i++){\n                newGrid[mineLocation[i][0]][mineLocation[i][1]].revealed=true;\n            }\n            setGrid(newGrid);\n            setTimeout(newfresh,500);\n        }\n        if(nonMinecount===0){\n            toast.success('Wohoo!!,You won',{ position: \"top-center\", autoClose: 1000, hideProgressBar: false, closeOnClick: true, pauseOnHover: true, draggable: true, progress: undefined, });\n            setTimeout(newfresh,500);\n        }\n        else{\n            let revealedboard=revealed(newGrid,x,y,nonMinecount);\n            setGrid(revealedboard.arr);\n            setNonMinecount(revealedboard.newNonMines);\n        }\n\n    }\n\n    return (\n        <div className=\"parent\">\n            <div>\n                <h3 style={{color:'white',textAlign:'center',fontSize:'30px',margin:'0px'}}>Non-Mines - {nonMinecount}</h3>\n                <ToastContainer></ToastContainer>\n                {grid.map((singlerow,index1)=>{\n                    return (\n                        <div style={style} key={index1}>\n                            {singlerow.map((singlecol,index2)=>{\n                            return  <Cell details={singlecol} key={index2} updateFlag={updateFlag} revealcell={revealcell}/>\n                            })}\n\n                        </div>\n                    )\n                })}\n            </div>\n\n        </div>\n    )\n}\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}