import { JsonRpcRequest, JsonRpcResult } from "@walletconnect/jsonrpc-types";
import { PairingTypes, RelayerTypes, SessionTypes } from ".";
export declare namespace PairingJsonRpc {
    interface ApproveParams {
        relay: RelayerTypes.ProtocolOptions;
        responder: PairingTypes.Participant;
        expiry: number;
        state: PairingTypes.State;
    }
    interface ApproveRequest extends JsonRpcRequest {
        method: "wc_pairingApprove";
        params: ApproveParams;
    }
    interface ApproveResult extends JsonRpcResult {
        result: true;
    }
    interface RejectParams {
        reason: string;
    }
    interface RejectRequest extends JsonRpcRequest {
        method: "wc_pairingReject";
        params: RejectParams;
    }
    interface RejectResult extends JsonRpcResult {
        result: true;
    }
    interface UpdateParams {
        state: Partial<PairingTypes.State>;
    }
    interface UpdateRequest extends JsonRpcRequest {
        method: "wc_pairingUpdate";
        params: UpdateParams;
    }
    interface UpdateResult extends JsonRpcResult {
        result: true;
    }
    interface UpgradeParams {
        permissions: Partial<PairingTypes.Permissions>;
    }
    interface UpgradeRequest extends JsonRpcRequest {
        method: "wc_pairingUpgrade";
        params: UpgradeParams;
    }
    interface UpgradeResult extends JsonRpcResult {
        result: true;
    }
    interface DeleteParams {
        reason: string;
    }
    interface DeleteRequest extends JsonRpcRequest {
        method: "wc_pairingDelete";
        params: DeleteParams;
    }
    interface DeleteResult extends JsonRpcResult {
        result: true;
    }
    interface PayloadParams {
        request: {
            method: string;
            params: any;
        };
    }
    interface PayloadRequest extends JsonRpcRequest {
        method: "wc_pairingPayload";
        params: PayloadParams;
    }
    interface PayloadResult extends JsonRpcResult {
        result: any;
    }
    interface PingParams {
    }
    interface PingRequest extends JsonRpcRequest {
        method: "wc_pairingPing";
        f: any;
        params: PingParams;
    }
    interface PingResult extends JsonRpcResult {
        result: true;
    }
    interface NotificationParams {
        type: string;
        data: any;
    }
    interface NotificationRequest extends JsonRpcRequest {
        method: "wc_pairingNotification";
        params: NotificationParams;
    }
    interface NotificationResult extends JsonRpcResult {
        result: true;
    }
}
export declare namespace SessionJsonRpc {
    interface ProposeParams {
        topic: string;
        relay: RelayerTypes.ProtocolOptions;
        proposer: SessionTypes.Participant;
        signal: SessionTypes.Signal;
        permissions: SessionTypes.Permissions;
        ttl: number;
    }
    interface ProposeRequest extends JsonRpcRequest {
        method: "wc_sessionPropose";
        params: ProposeParams;
    }
    interface ProposeResult extends JsonRpcResult {
        result: true;
    }
    interface ApproveParams {
        relay: RelayerTypes.ProtocolOptions;
        responder: SessionTypes.Participant;
        expiry: number;
        state: SessionTypes.State;
    }
    interface ApproveRequest extends JsonRpcRequest {
        method: "wc_sessionApprove";
        params: ApproveParams;
    }
    interface ApproveResult extends JsonRpcResult {
        result: true;
    }
    interface RejectParams {
        reason: string;
    }
    interface RejectRequest extends JsonRpcRequest {
        method: "wc_sessionReject";
        params: RejectParams;
    }
    interface RejectResult extends JsonRpcResult {
        result: true;
    }
    interface UpdateParams {
        state: Partial<SessionTypes.State>;
    }
    interface UpdateRequest extends JsonRpcRequest {
        method: "wc_sessionUpdate";
        params: UpdateParams;
    }
    interface UpdateResult extends JsonRpcResult {
        result: true;
    }
    interface UpgradeParams {
        permissions: Partial<SessionTypes.Permissions>;
    }
    interface UpgradeRequest extends JsonRpcRequest {
        method: "wc_sessionUpgrade";
        params: UpgradeParams;
    }
    interface UpgradeResult extends JsonRpcResult {
        result: true;
    }
    interface DeleteParams {
        reason: string;
    }
    interface DeleteRequest extends JsonRpcRequest {
        method: "wc_sessionDelete";
        params: DeleteParams;
    }
    interface DeleteResult extends JsonRpcResult {
        result: true;
    }
    interface PayloadParams {
        request: {
            method: string;
            params: any;
        };
        chainId?: string;
    }
    interface PayloadRequest extends JsonRpcRequest {
        method: "wc_sessionPayload";
        params: PayloadParams;
    }
    interface PayloadResult extends JsonRpcResult {
        result: any;
    }
    interface PingParams {
    }
    interface PingRequest extends JsonRpcRequest {
        method: "wc_sessionPing";
        params: PingParams;
    }
    interface PingResult extends JsonRpcResult {
        result: true;
    }
    interface NotificationParams {
        type: string;
        data: any;
    }
    interface NotificationRequest extends JsonRpcRequest {
        method: "wc_sessionNotification";
        params: NotificationParams;
    }
    interface NotificationResult extends JsonRpcResult {
        result: true;
    }
}
//# sourceMappingURL=jsonrpc.d.ts.map